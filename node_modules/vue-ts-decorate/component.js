"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vue_1 = require("vue");
var tools_1 = require("./utils/tools");
var utilities_1 = require("./utils/utilities");
function Component(options) {
    var opt = options || {};
    var tagName = opt.componentTag;
    delete opt.componentTag;
    return function (target) {
        var instance = new target();
        opt = utilities_1.initOptions(opt);
        opt = utilities_1.parseOptions(instance, opt);
        opt = utilities_1.parseProps(opt);
        if (instance.$mixin$ && instance.$mixin$.length > 0) {
            opt.mixins = opt.mixins.concat(instance.$mixin$);
        }
        for (var key in instance.$$methodsToRemove) {
            delete opt.methods[instance.$$methodsToRemove[key]];
        }
        opt = utilities_1.cleanOptions(opt);
        var data = opt.data;
        opt.data = function () { return tools_1.assign({}, data); };
        if (opt.style && opt.COMP_HASH_ID) {
            var _a = tools_1.scopedCss(opt.style, opt.COMP_HASH_ID), className = _a.className, styleText = _a.styleText;
            opt.style = { class: className, text: styleText, src: opt.style };
            var insertIn = utilities_1.vueVersion === 1 ? 'init' : 'beforeCreate';
            if (opt.init || opt.beforeMount) {
                var orgMethod = opt.init || opt.beforeMount;
                opt[insertIn] = doStyle('insert', orgMethod);
            }
            else if (!opt.init || !opt.beforeMount) {
                opt[insertIn] = doStyle('insert');
            }
            if (opt.beforeDestroy) {
                var orgMethod = opt.beforeDestroy;
                opt.beforeDestroy = doStyle('delete', orgMethod);
            }
            else {
                opt.beforeDestroy = doStyle('delete');
            }
        }
        if (tagName) {
            tagName = utilities_1.camelToKebabCase(tagName);
            vue_1.default.component(tagName, opt);
            return vue_1.default.component(tagName);
        }
        else {
            return vue_1.default.extend(opt);
        }
    };
}
exports.default = Component;
function doStyle(action, orgMethod) {
    return function () {
        switch (action) {
            case 'insert':
                tools_1.insertCss(this.$options.style.class, this.$options.style.text);
                break;
            case 'delete':
                tools_1.deleteCss(this.$options.style.class);
                break;
        }
        if (orgMethod) {
            orgMethod.call(this);
        }
    };
}
//# sourceMappingURL=component.js.map