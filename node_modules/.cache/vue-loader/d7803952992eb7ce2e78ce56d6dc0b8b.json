{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cmurray/britevue-frontend/src/views/Dashboard/Terms/Terms.vue?vue&type=template&id=4b3bdffa&scoped=true&","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/views/Dashboard/Terms/Terms.vue","mtime":1628691920058},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}