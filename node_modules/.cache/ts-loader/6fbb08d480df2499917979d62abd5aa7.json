{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js!/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js??ref--14-2!/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/SurveyService.ts","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/services/SurveyService.ts","mtime":1628691920057},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvY211cnJheS9icml0ZXZ1ZS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvY211cnJheS9icml0ZXZ1ZS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9ob21lL2NtdXJyYXkvYnJpdGV2dWUtZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvaG9tZS9jbXVycmF5L2JyaXRldnVlLWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL2hvbWUvY211cnJheS9icml0ZXZ1ZS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgeyBBcGkgfSBmcm9tICJAL3NlcnZpY2VzL0FwaSI7CmltcG9ydCBBeGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCByb3V0ZXIgZnJvbSAiQC9yb3V0ZXIiOwpleHBvcnQgdmFyIFN1cnZleVNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BcGkpIHsKICBfaW5oZXJpdHMoU3VydmV5U2VydmljZSwgX0FwaSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU3VydmV5U2VydmljZSk7CgogIGZ1bmN0aW9uIFN1cnZleVNlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3VydmV5U2VydmljZSk7CgogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFN1cnZleVNlcnZpY2UsIFt7CiAgICBrZXk6ICJsb2dvdXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvZ291dCgpIHsKICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTsKICAgIH0KICAgIC8qKgogICAgICogR2V0cyB0aGUgdXNlci4KICAgICAqCiAgICAgKiBAcGFyYW0gaWQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRTdXJ2ZXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRTdXJ2ZXkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoaWQpIHsKICAgICAgICB2YXIgdG9rZW4sIHVybCwgZXJyLCByZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdG9rZW4gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS50b2tlbik7CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJhc2VfdXJsICsgJy9hcGkvc3VydmV5LycgKyBpZDsKICAgICAgICAgICAgICAgIGVyciA9IG51bGw7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBBeGlvcy5nZXQodXJsLCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAiQXV0aG9yaXphdGlvbiI6ICJCZWFyZXIgIiArIHRva2VuLnRva2VuCiAgICAgICAgICAgICAgICAgIH0gLy93aXRoQ3JlZGVudGlhbHM6IHRydWUKCiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZXJyID0gZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlcy5kYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFN1cnZleShfeCkgewogICAgICAgIHJldHVybiBfZ2V0U3VydmV5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRTdXJ2ZXk7CiAgICB9KCkKICAgIC8qKgogICAgICogU3VibWl0IHN1cnZleSByZXNwb25zZS4KICAgICAqCiAgICAgKiBAcGFyYW0gc3VydmV5CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAicG9zdFN1cnZleSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Bvc3RTdXJ2ZXkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHN1cnZleSkgewogICAgICAgIHZhciB0b2tlbiwgdXJsLCByZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRva2VuID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UudG9rZW4pOwogICAgICAgICAgICAgICAgdXJsID0gdGhpcy5iYXNlX3VybCArICIvYXBpL3N1cnZleSI7CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gQXhpb3MucG9zdCh1cmwsIHN1cnZleSwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JywKICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRva2VuLnRva2VuCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gOTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDIudDAucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7CiAgICAgICAgICAgICAgICByb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICdob21lJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDIudDAucmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7CiAgICAgICAgICAgICAgICByb3V0ZXIucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICdob21lJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQyLnQwLnJlc3BvbnNlKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBKU09OLnBhcnNlKCcnKSk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMsIFtbMiwgOV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcG9zdFN1cnZleShfeDIpIHsKICAgICAgICByZXR1cm4gX3Bvc3RTdXJ2ZXkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvc3RTdXJ2ZXk7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBTdXJ2ZXlTZXJ2aWNlOwp9KEFwaSk7"},{"version":3,"sources":["/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/SurveyService.ts"],"names":[],"mappings":";;;;;;AAAA,SAAQ,GAAR,QAAkB,gBAAlB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAP,MAAmB,UAAnB;AAEA,WAAa,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACU;AACF,MAAA,YAAY,CAAC,UAAb,CAAwB,MAAxB;AACH;AACD;;;;AAIG;;AARP;AAAA;AAAA;AAAA,gGAS2B,EAT3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAUc,gBAAA,KAVd,GAUsB,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,KAAxB,CAVtB;AAWc,gBAAA,GAXd,GAWoB,KAAK,QAAL,GAAgB,cAAhB,GAAiC,EAXrD;AAYY,gBAAA,GAZZ,GAYkB,IAZlB;AAAA;AAAA,uBAa0B,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe;AAC7B,kBAAA,OAAO,EAAE;AAAC,qCAAiB,YAAU,KAAK,CAAC;AAAlC,mBADoB,CAE7B;;AAF6B,iBAAf,EAGf,KAHe,CAGT,UAAA,CAAC;AAAA,yBAAI,GAAG,GAAG,CAAV;AAAA,iBAHQ,CAb1B;;AAAA;AAac,gBAAA,GAbd;;AAAA,qBAiBW,GAjBX;AAAA;AAAA;AAAA;;AAAA,sBAkBkB,GAlBlB;;AAAA;AAAA,iDAoBe,GAAG,CAAC,IApBnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuBI;;;;AAIG;;AA3BP;AAAA;AAAA;AAAA,kGA4B4B,MA5B5B;AAAA;AAAA;AAAA;AAAA;AAAA;AA6Bc,gBAAA,KA7Bd,GA6BsB,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,KAAxB,CA7BtB;AA8Bc,gBAAA,GA9Bd,GA8BoB,KAAK,QAAL,GAAgB,aA9BpC;AAAA;AAAA;AAAA,uBAgC4B,KAAK,CAAC,IAAN,CAAW,GAAX,EAChB,MADgB,EAEhB;AACE,kBAAA,OAAO,EAAE;AACP,oCAAgB,iCADT;AAEP,qCAAiB,YAAU,KAAK,CAAC;AAF1B,mBADX;AAKE,kBAAA,eAAe,EAAE;AALnB,iBAFgB,CAhC5B;;AAAA;AAgCgB,gBAAA,GAhChB;AAAA,kDA0CiB,GA1CjB;;AAAA;AAAA;AAAA;;AAAA,sBA4CgB,aAAE,QAAF,CAAW,MAAX,KAAsB,GA5CtC;AAAA;AAAA;AAAA;;AA6CgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AA9ChB;AAAA;;AAAA;AAAA,sBA+CuB,aAAE,QAAF,CAAW,MAAX,KAAsB,GA/C7C;AAAA;AAAA;AAAA;;AAgDgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AAjDhB;AAAA;;AAAA;AAAA,kDAmDqB,aAAE,QAnDvB;;AAAA;AAAA,kDAqDmB,IAAI,CAAC,KAAL,CAAW,EAAX,CArDnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAmC,GAAnC","sourcesContent":["import {Api} from \"@/services/Api\";\nimport Axios from \"axios\";\nimport {ISurvey} from \"@/interfaces/ISurvey\";\nimport {json} from \"@rxweb/reactive-forms\";\nimport router from \"@/router\"\n\nexport class SurveyService extends Api{\n    logout() {\n        localStorage.removeItem('user');\n    }\n    /**\n     * Gets the user.\n     *\n     * @param id\n     */\n    public async getSurvey(id: string): Promise<ISurvey>{\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + '/api/survey/' + id;\n        let err = null;\n        const res = await Axios.get(url, {\n            headers: {\"Authorization\": \"Bearer \"+token.token}\n            //withCredentials: true\n        }).catch(e => err = e);\n        if(err){\n            throw err;\n        }\n        return res.data;\n    }\n\n    /**\n     * Submit survey response.\n     *\n     * @param survey\n     */\n    public async postSurvey(survey: ISurvey): Promise<any>{\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + \"/api/survey\";\n        try {\n          const res = await Axios.post(url,\n            survey,\n            {\n              headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n                'Authorization': 'Bearer '+token.token,\n              },\n              withCredentials: true,\n            }\n          )\n          return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n            return JSON.parse('');\n        }\n    }\n}\n"],"sourceRoot":""}]}