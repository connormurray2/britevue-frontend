{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js!/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js??ref--14-2!/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cmurray/britevue-frontend/src/views/Dashboard/Landing/Landing.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/views/Dashboard/Landing/Landing.vue","mtime":1628691920057},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cmurray/britevue-frontend/src/views/Dashboard/Landing/Landing.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport axios from \"axios\";\nimport { Vue, Component, Inject } from \"vue-property-decorator\";\nimport { IGooglePlace } from \"@/interfaces/IGooglePlace\";\nimport { Loader, LoaderOptions } from \"google-maps\";\nimport Header from \"@/layouts/dashboard/Header/Header.vue\";\nimport Footer from \"@/layouts/dashboard/Footer/Footer.vue\";\nimport { UserService } from \"@/services/UserService\";\nimport { IUser } from \"@/interfaces/IUser\";\nimport { PlaceService } from \"@/services/PlaceService\";\nimport { FavoritesService } from \"@/services/FavoritesService\";\n@Component({\n  components: {\n    Header,\n    Footer,\n  },\n  metaInfo:{\n    title: \"Britevue - Blockchain verified reviews where reviewers get paid\",\n    meta: [\n      { name:'title',content:'Britevue - Blockchain verified reviews where reviewers get paid'},\n      { name: 'description', content:  'Begin earning money for your reviews of businesses and places with Britevue. We will pay you for information about your hometown to get started!'},\n      { itemprop: 'name', content: \"Britevue\"},\n      { itemprop: 'description', content: \"Begin earning money for your reviews of businesses and places with Britevue. We will pay you for information about your hometown to get started!\"},\n      { itemprop: 'image', content:  require('@/assets/images/logo_black.svg')},\n      { property: 'og:type', content: \"website\"},\n      { property: 'og:url', content: \"https://britevue.com/\"},\n      { property: 'og:title', content: \"Britevue - Blockchain verified reviews where reviewers get paid\"},\n      { property: 'og:description', content: \"Begin earning money for your reviews of businesses and places with Britevue. We will pay you for information about your hometown to get started!\"},\n      { property: 'og:image', content:  require('@/assets/images/logo_black.svg')},\n      { property: 'og:site_name', content: 'britevue'},\n      { name: 'twitter:card', content: \"summary_large_image\"},\n      { name: 'twitter:url', content: \"https://britevue.com/\"},\n      { name: 'twitter:title', content: \"Britevue - Blockchain verified reviews where reviewers get paid\"},\n      { name: 'twitter:description', content: \"Begin earning money for your reviews of businesses and places with Britevue. We will pay you for information about your hometown to get started!\"},\n      { name: 'twitter:image', content: require('@/assets/images/logo_black.svg') },\n    ]\n  }\n})\nexport default class Landing extends Vue {\n  profile: IUser | null = null;\n  lat: number;\n  lng: number;\n  type: string;\n  loadingPlaces: boolean;\n  loadingMap: boolean;\n  radius: number;\n  hideReviewAlert: boolean;\n  reviewdPlaceId: string = \"\";\n  reviewdPlaceName: string = \"\";\n  input_location: any;\n\n  @Inject(\"favoritesService\")\n  favorites_ser!: FavoritesService;\n\n  @Inject(\"placeService\")\n  place_ser!: PlaceService;\n\n  @Inject(\"userService\")\n  user_service!: UserService;\n\n  flash: any;\n\n  constructor() {\n    super();\n    this.lat = 45.422164978;\n    this.lng = -75.6916639;\n    this.type = \"restaurant\";\n    this.loadingPlaces = true;\n    this.loadingMap = true;\n    this.radius = 5;\n    this.hideReviewAlert = true;\n    this.input_location = null;\n    if (typeof this.$route.params.review != \"undefined\") {\n      this.hideReviewAlert = false;\n      this.reviewdPlaceId = this.$route.params.place_id;\n      this.reviewdPlaceName = this.$route.params.place_name;\n    }\n\n    this.locatorButtonPressed();\n  }\n\n  async mounted() {\n    await this.user_service.updateUserLocalStorage(\"\");\n    const user = await this.user_service.getCurrentUser();\n    if (user) {\n      this.profile = user;\n      //check user token is expired\n      const checkUser = this.user_service.getUser(this.profile.id);\n    }\n\n    await this.locatorButtonPressed();\n\n    if(this.lat && this.lng && this.lat != 45.422164978 && this.lng != -75.6916639) {\n      const address = await this.place_ser.getAddressForCoordinates(this.lat,this.lng);\n/*       console.log('address');\n       console.log(address);*/\n      if (address.status != 200) {\n        return\n      }\n      const input = document.getElementById(\"pac-input\") as HTMLInputElement;\n\n      input.value = address.data;\n/*      const autocomplete = new google.maps.places.Autocomplete(input);\n\n      console.log('autocomplete.getPlace()');\n      console.log(autocomplete.getPlace());*/\n\n    }\n    await this.loadMap();\n    await this.loadInitialPlaces();\n\n  }\n  async coordinates() {\n    return `${this.lat}, ${this.lng}`;\n  }\n  async loadInitialPlaces() {\n    this.loadingPlaces = true\n    const google_places = await this.place_ser.searchGoogleLocations(this.lat,this.lng,this.type,this.radius);\n    this.loadingPlaces = false;\n   const places = await this.checkPlacesIsFavorite(google_places.data.Results);\n    this.places = places;\n\n    let initial_places=[];\n    if (google_places.status== 200) {\n      for (let i=0;i<google_places.data.Results.length;i++) {\n        const brite_place = await this.place_ser.getBriteLocation(google_places.data.Results[i].place_id)\n\n        initial_places.push(brite_place.data)\n      }\n      const places = await this.checkPlacesIsFavorite(initial_places);\n      this.places=initial_places\n      this.addLocationsToGoogleMaps();\n    }\n\n  }\n  async findCloseByButtonPressed(e: any) {\n    let el = document.getElementById(\"typeErrorMessage\");\n    if (el == null) {\n      return \"\";\n    }\n    if (this.type == \"\") {\n      el.innerHTML = \"This field is required\";\n      return \"\";\n    }\n    el.innerHTML = \"\";\n    el = document.getElementById(\"placeErrorMessage\");\n    if (el == null) {\n      return \"\";\n    }\n\n    if (this.input_location == null) {\n      el.innerHTML = \"This field is required\";\n      return \"\";\n    }\n    el.innerHTML='';\n    this.loadingPlaces = true\n    const google_places = await this.place_ser.searchGoogleLocations(this.lat,this.lng,this.type,this.radius);\n    this.places = []\n    if (google_places.status==200) {\n        for (let i=0;i<google_places.data.Results.length;i++) {\n          const brite_place = await this.place_ser.getBriteLocation(google_places.data.Results[i].place_id)\n          this.places.push(brite_place.data)\n        }\n        this.addLocationsToGoogleMaps();\n    }\n    this.loadingPlaces = false;\n  }\n  addLocationsToGoogleMaps() {\n    this.loadMap();\n  }\n  async locatorButtonPressed() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        this.lat = position.coords.latitude;\n        this.lng = position.coords.longitude;\n      },\n      (error) => {\n        console.log(\"Error getting location\");\n      }\n    );\n\n\n  }\n\n  //dummy data\n  places: IGooglePlace[] = [];\n\n  async loadMap() {\n    const options: LoaderOptions = {\n      language: \"en\",\n      libraries: [\n        \"drawing\",\n        \"geometry\",\n        \"localContext \",\n        \"places\",\n        \"visualization\",\n      ],\n    };\n    const loader = new Loader(\n      \"AIzaSyDMqrI8hMqiyIPdQUkRUerdohx28Fuv4wE\",\n      options\n    );\n    const google = await loader.load();\n    const con: any = this.$refs.map;\n    const infowindow = new google.maps.InfoWindow();\n    const infowindowContent = document.getElementById(\n      \"infowindow-content\"\n    ) as HTMLElement;\n    const input = document.getElementById(\"pac-input\") as HTMLInputElement;\n    this.input_location=input.value;\n    const autocomplete = new google.maps.places.Autocomplete(input);\n    // Bind the map's bounds (viewport) property to the autocomplete object,\n    // so that the autocomplete requests use the current map bounds for the\n    // bounds option in the request.\n    autocomplete.addListener(\"place_changed\", () => {\n      autocomplete.bindTo(\"bounds\", map);\n      // Set the data fields to return when the user selects a place.\n      autocomplete.setFields([\n        \"address_components\",\n        \"geometry\",\n        \"icon\",\n        \"name\",\n      ]);\n      //get autocomplete location\n      const input_location = autocomplete.getPlace();\n\n      if (\n        input_location == null ||\n        input_location.geometry == null ||\n        input_location.geometry.location == null\n      ) {\n        return;\n      }\n      this.input_location = input_location;\n      this.lat = input_location.geometry.location.lat();\n      this.lng = input_location.geometry.location.lng();\n\n      infowindow.close();\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          input_location.geometry.location.lat(),\n          input_location.geometry.location.lng()\n        ),\n        map: map,\n      });\n      marker.setVisible(false);\n      const place = autocomplete.getPlace();\n\n      if (!place.geometry) {\n        // User entered the name of a Place that was not suggested and\n        // pressed the Enter key, or the Place Details request failed.\n        this.flash(\n          \"No details available for input: '\" + place.name + \"'\",\n          \"error\",\n          { timeout: 5000 }\n        );\n        return;\n      }\n\n      // If the place has a geometry, then present it on a map.\n      if (place.geometry.viewport) {\n        map.fitBounds(place.geometry.viewport);\n      } else {\n        map.setCenter(place.geometry.location);\n        map.setZoom(17); // Why 17? Because it looks good.\n      }\n      marker.setPosition(place.geometry.location);\n      marker.setVisible(true);\n\n      let address = \"\";\n\n      if (place.address_components) {\n        address = [\n          (place.address_components[0] &&\n            place.address_components[0].short_name) ||\n            \"\",\n          (place.address_components[1] &&\n            place.address_components[1].short_name) ||\n            \"\",\n          (place.address_components[2] &&\n            place.address_components[2].short_name) ||\n            \"\",\n        ].join(\" \");\n      }\n      infowindow.setContent(\n        `<div class=\"ui header\">${place.name}</div><p>${place.formatted_address}</p>`\n      );\n      infowindow.open(map, marker);\n    });\n\n    //load map\n    const map = new google.maps.Map(con, {\n      center: { lat: this.lat, lng: this.lng },\n      zoom: 14,\n    });\n\n    this.places.forEach((place) => {\n      const lat = place.geometry.location.lat;\n      const lng = place.geometry.location.lng;\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(lat, lng),\n        map: map,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(\n          `<div class=\"ui header\">${place.name}</div><p>${place.formatted_address}</p>`\n        );\n        infowindow.open(map, marker);\n      });\n    });\n  }\n  createReview(place_id: any,place_name: any){\n    if(this.checkUserWallet()){\n      this.$router.push({name: \"new_review\", params: { 'place_id': place_id,'place_name':place_name }});\n    }\n  }\n  typeChanged() {\n    const selectElement = document.querySelector(\".type-label\");\n    if (selectElement != null) {\n      selectElement.classList.add(\"d-none\");\n    }\n  }\n  radiusChanged() {\n    const selectElement = document.querySelector(\".radius-label\");\n    if (selectElement != null) {\n      selectElement.classList.add(\"d-none\");\n    }\n  }\n  imageUrlAlt(event: any) {\n    event.target.src = require(\"@/assets/images/no-photo-avatar.png\");\n  }\n  removeReviewAlert() {\n    this.hideReviewAlert = true;\n  }\n  getRoutePath(name: string, parameters: any) {\n    return this.$router.push({ name: name, params: parameters });\n  }\n  goToPhotos(place: any) {\n    this.getRoutePath(\"place_photos\", { place: place });\n  }\n  async addFavoritePlace(place_id: any){\n    if(this.checkUserWallet()){\n      const add_favorite_place = await this.favorites_ser.addFavorite(this.profile!.id,'location',place_id);\n      if(add_favorite_place.status==200){\n        const element=document.getElementById('favorite_'+place_id) as HTMLElement ;\n        element.classList.remove('far');\n        element.classList.add('fas');\n        this.flash('Place has been added as your favorite', 'success', {timeout: 5000});\n      }\n      if(add_favorite_place.status==409){\n        this.flash('You have already added this place to favorite', 'error', {timeout: 5000});\n      }\n    }\n  }\n  getBaseUrl() {\n    return window.location.origin + this.$route.path;\n  }\n  public async logout() {\n    localStorage.removeItem(\"user\");\n  }\n  checkUserWallet() {\n    if(this.profile){\n      if (this.profile.wallet) {\n        return true;\n      } else {\n        return false;\n      }\n    }else{\n      return false;\n    }\n  }\n\n  async checkPlacesIsFavorite(places: any){\n    let favorite_places = await this.favorites_ser.places(this.profile!.id);\n    if (favorite_places.status == 200) {\n      favorite_places = favorite_places.data;\n      const favorite_locations = new Array(favorite_places.length)\n      if (favorite_places && favorite_places.length) {\n        for (let i = 0; i < favorite_places.length; i++) {\n          for (let j = 0;j < places.length; j++) {\n            if(favorite_places[i].favorite==places[j].place_id){\n              places[j].isFavorite=true;\n            }\n          }\n\n        }\n      }\n    }\n  return places;\n  }\n\n}\n"],"sourceRoot":""}]}