{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js!/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js??ref--14-2!/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/ReviewsService.ts","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/services/ReviewsService.ts","mtime":1628691920057},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/ReviewsService.ts"],"names":[],"mappings":"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","sourcesContent":["import {Api} from \"@/services/Api\";\nimport {IReview} from \"@/interfaces/IReview\";\nimport {IUser} from \"@/interfaces/IUser\";\nimport {IRating} from \"@/interfaces/IRating\";\nimport Axios from \"axios\";\nimport router from \"@/router\";\n\n\nexport class ReviewsService extends Api {\n    public async allUserReviews(id: string){\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/reviews?filter=user&id=${id}`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n\n    public async getReview(review_id: string) {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/review/${review_id}`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n                //...\n            }\n        }\n\n\n    }\n\n    public async createReview(user: IUser, place_id: string, review_body: string, stars: any,imageHashes?: any, review_paywall?: number){\n        const url = this.base_url + `/api/review`;\n        const token = JSON.parse(localStorage.token)\n        try {\n            const res = await Axios.post(url,\n                JSON.stringify({\n                    \"user\": user.id,\n                    \"placeId\": place_id,\n                    \"reviewBody\": review_body,\n                    \"photos\": imageHashes,\n                    \"ratings\": {\n                        \"quality\": stars.quality.rate,\n                        \"experience\": stars.experience.rate,\n                        \"value\": stars.value.rate\n                    },\n                    \"paywall\": {\n                        \"cost\": review_paywall\n                    }\n                }),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8','Authorization': `Bearer ${token.token}`\n                    }\n                }\n            );\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n    }\n    public async sendTip(value: any,userId: any,reviewId: any){\n        const url = this.base_url + `/api/tip`;\n        const token = JSON.parse(localStorage.token)\n        try {\n            const res = await Axios.post(url,\n                JSON.stringify({\n                    \"tipUser\": userId,\n                    \"amount\": value,\n                    \"reviewTx\": reviewId\n                }\n                ),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8','Authorization': `Bearer ${token.token}`\n                    }\n                }\n            );\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            }else if (e.response.status === 500) {\n                return e.response;\n            }\n            else {\n                return e.response;\n            }\n        }\n    }\n\n    public async editReview(review_id: string, latestTx: string, user: IUser, place_id: string, review_body: string, stars: any, imageHashes?: any, review_paywall?: number) {\n        const url = this.base_url + `/api/review`;\n        const token = JSON.parse(localStorage.token)\n        try {\n\n            const res = await Axios.put(url,\n                JSON.stringify({\n                    \"id\": review_id,\n                    \"latestTx\": latestTx,\n                    \"user\": user.id,\n                    \"placeId\": place_id,\n                    \"reviewBody\": review_body,\n                    \"photos\": imageHashes,\n                    \"ratings\": {\n                        \"quality\": stars.quality.rate,\n                        \"experience\": stars.experience.rate,\n                        \"value\": stars.value.rate\n                    },\n                    \"paywall\": {\n                        \"cost\": review_paywall\n                    }\n                }),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8','Authorization': `Bearer ${token.token}`\n                    }\n                }\n            );\n            return res;\n\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n\n    public async getPlaceReviews(place_id: string) {\n        const url = this.base_url + `/api/reviews?filter=place&id=` + place_id;\n        const token = JSON.parse(localStorage.token);\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n\n    public async upvoteReview(user_name: string, review_id: string) {\n        const url = this.base_url + `/api/upvote`;\n        const token = JSON.parse(localStorage.token);\n        try {\n            const res = await Axios.post(url,\n                JSON.stringify({\n                    \"username\": user_name,\n                    \"reviewId\": review_id\n                }),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8','Authorization': `Bearer ${token.token}`\n                    }\n                }\n            );\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n    }\n\n    public async downReview(user_name: string, review_id: string) {\n        const url = this.base_url + `/api/downvote`;\n        const token = JSON.parse(localStorage.token);\n        try {\n            const res = await Axios.post(url,\n                JSON.stringify({\n                    \"username\": user_name,\n                    \"reviewId\": review_id\n                }),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8','Authorization': `Bearer ${token.token}`\n                    }\n                }\n            );\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n\n    public async deleteReview(review_id: string) {\n        const url = this.base_url + `/api/review/` + review_id;\n        const token = JSON.parse(localStorage.token)\n        try {\n            const res = await Axios.delete(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n\n    public async buyReview(review_id: string) {\n        const url = this.base_url + `/api/review/` + review_id +'/purchase';\n        const token = JSON.parse(localStorage.token)\n        console.log(token)\n        try {\n            const res = await Axios.post(url, {}, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n    public async getRecentActivities() {\n        const url = this.base_url + `/recents`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8'}\n                //withCredentials: true\n            });\n            return res.data;\n        } catch (e) {\n\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n            }\n        }\n\n    }\n\n    logout() {\n        localStorage.removeItem('user');\n    }\n\n}\n"],"sourceRoot":""}]}