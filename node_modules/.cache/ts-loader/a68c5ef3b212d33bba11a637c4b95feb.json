{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js!/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js??ref--14-2!/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cmurray/britevue-frontend/src/layouts/dashboard/Header/Header.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/layouts/dashboard/Header/Header.vue","mtime":1628691920056},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cmurray/britevue-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cmurray/britevue-frontend/src/layouts/dashboard/Header/Header.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {Vue, Component, Inject} from 'vue-property-decorator';\nimport {UserService} from \"@/services/UserService\";\nimport {IUser} from \"@/interfaces/IUser\";\nimport {NotificationsService} from \"@/services/NotficationsService\";\nimport VueGoogleAutocomplete from \"vue-google-autocomplete\";\nimport Login from \"@/components/Login/Login.vue\";\nimport Signup from \"@/components/Signup/Signup.vue\";\n\n@Component({\n  components: {\n    VueGoogleAutocomplete,\n    Login,\n    Signup,\n  }\n})\nexport default class Header extends Vue{\n  @Inject('userService')\n  user_ser!: UserService;\n\n  @Inject('notificationsService')\n  notification_service!: NotificationsService;\n  notifications: [] | null;\n  user: IUser|null = null;\n  showSearchBar: boolean;\n  tooltip = true;\n  place: any | null = null;\n  openedMenu = false;\n  constructor() {\n    super();\n    this.notifications=[];\n    this.showSearchBar= true;\n    /*if(this.$route.name=='landing'){\n      this.showSearchBar= false;\n    }*/\n  }\n\n  async mounted(){\n    if (this.$route.query.token != null && this.$route.query.username != null) {\n      const tokenObj = {\n        username: this.$route.query.username,\n        token: this.$route.query.token,\n        expires_at: this.$route.query.expires_at\n      }\n      localStorage.setItem('token', JSON.stringify(tokenObj))\n      await this.user_ser.updateUserLocalStorage(this.$route.query.username as string)\n      const query = Object.assign({}, this.$route.query);\n      delete query.token;\n      delete query.expires_at;\n      delete query.username;\n      this.$router.replace({ query });\n      window.location.reload()\n    }\n    const user = this.user_ser.getCurrentUser();\n    if(user){\n      this.user = user;\n      // Weird hack for handcash since we don't have lastname all the time\n      if (this.user.lastName == null) {\n        this.user.lastName = \"\"\n      }\n      const x= await this.notification_service.getUserNotifications();\n      if(x.status==200){\n       this.notifications=x.data.notifications;\n      }\n    }\n  }\n\n  goHome() {\n    this.$router.push({name: \"home\"});\n  }\n  getAddressData() {\n    console.log('h')\n  }\n  getRoutePath(name: string,parameters: any){\n    return this.$router.push({name: name, params: parameters});\n  }\n  async logout(){\n    await this.user_ser.logout();\n    if(this.$route.name=='home') {\n      location.reload();\n    } else {\n      this.$router.push({name: \"home\"});\n    }\n  }\n  findPlaceChanged(ret: any, place: any, id: any) {\n    this.place = place;\n    if (typeof place.place_id != \"undefined\") {\n      this.getRoutePath(\"place\", { id: place.place_id });\n      if(this.$route.name=='place'){\n        location.reload();\n      }\n    }\n  }\n  hideTooltip() {\n    this.tooltip = false;\n  }\n  showTooltip() {\n    this.tooltip = true;\n  }\n  openMenu(){\n    this.openedMenu = !this.openedMenu;\n  }\n\n\n  openLogin() {\n    (this.$refs[\"login\"] as any).showModal();\n  }\n\n  openSignup() {\n    (this.$refs[\"signup\"] as any).showModal();\n  }\n  onLogin() {\n    this.$router.push({ name: \"dashboard\" });\n  }\n  inputChange() {\n    console.log(\"here\");\n  }\n  onSignup() {\n    this.$router.push({ name: \"profile\" });\n  }\n  writeReview() {\n    if (this.user) {\n      this.$router.push({ name: \"dashboard\" });\n    } else {\n      this.openLogin();\n    }\n  }\n}\n"],"sourceRoot":""}]}