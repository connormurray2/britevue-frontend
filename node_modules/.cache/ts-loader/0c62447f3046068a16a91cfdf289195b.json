{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js!/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js??ref--14-2!/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/PlaceService.ts","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/services/PlaceService.ts","mtime":1616199817994},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/PlaceService.ts"],"names":[],"mappings":"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","sourcesContent":["import {Api} from \"@/services/Api\";\nimport {IPlace} from \"@/interfaces/IPlace\";\nimport Axios from \"axios\";\nimport router from \"@/router\";\n\nexport class PlaceService extends Api {\n    public async getPlace(id: string): Promise<IPlace> {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/location/${id}`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res.data;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n            return JSON.parse('');\n        }\n    }\n\n    public async getBriteLocation(id: string) {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/location/${id}`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 500) {\n                return e.response;\n            }\n            else if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n            return JSON.parse('');\n        }\n\n    }\n\n    public async getGoogleLocation(id: string) {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/google/${id}`;\n        try {\n\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 500) {\n                return e.response;\n            }\n            else if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n            return JSON.parse('');\n        }\n\n\n    }\n\n    public async uploadPlaceImage(photo: File, place_id: string) {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + '/api/photo';\n        const config = {headers: {'Content-Type': 'multipart/form-data', 'Authorization': 'Bearer ' + token.token}};\n        const form_data = new FormData();\n        form_data.append('image', photo);\n        form_data.append('type', 'place');\n        form_data.append('id', place_id);\n\n        try {\n            const res = await Axios.post(url, form_data, config);\n            return res;\n        } catch (e) {\n            if (e.response.status === 500) {\n                return e.response;\n            }\n            else if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n            return JSON.parse('');\n        }\n\n    }\n\n    public async searchGoogleLocations(lat: number, lng: number, type: string, radius: number) {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/google/search?lat=${lat}&lng=${lng}&radius=10000&type=${type}`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 500) {\n                return e.response;\n            }\n            else  if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n            return JSON.parse('');\n        }\n\n    }\n\n    public async getAddressForCoordinates(lat: number, lng: number) {\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + `/api/google/address?lat=${lat}&lng=${lng}`;\n        try {\n            const res = await Axios.get(url, {\n                headers: {  'Content-type': 'application/json; charset=UTF-8',\"Authorization\": \"Bearer \"+token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 500) {\n                return e.response;\n            }\n            else  if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n        }\n\n\n    }\n\n    logout() {\n        localStorage.removeItem('user');\n    }\n}\n"],"sourceRoot":""}]}