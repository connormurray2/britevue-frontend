{"remainingRequest":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js!/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js??ref--14-2!/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/UserService.ts","dependencies":[{"path":"/home/cmurray/britevue-frontend/src/services/UserService.ts","mtime":1628691920057},{"path":"/home/cmurray/britevue-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/cmurray/britevue-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/cmurray/britevue-frontend/src/services/UserService.ts"],"names":[],"mappings":";;;;;;AAAA,SAAQ,GAAR,QAAkB,gBAAlB;AAEA,OAAO,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAP,MAAmB,UAAnB;AAEA,WAAa,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AACI;;;;AAIG;AALP;AAAA,8FAMyB,EANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOU,YAAY,CAAC,KAAb,IAAsB,IAPhC;AAAA;AAAA;AAAA;;AAAA,sBAQc,gBARd;;AAAA;AAUc,gBAAA,KAVd,GAUsB,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,KAAxB,CAVtB;AAWc,gBAAA,GAXd,GAWoB,KAAK,QAAL,GAAgB,YAAhB,GAA+B,EAXnD;AAAA;AAAA;AAAA,uBAc8B,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe;AAC7B,kBAAA,OAAO,EAAE;AAAC,qCAAiB,YAAY,KAAK,CAAC;AAApC,mBADoB,CAE7B;;AAF6B,iBAAf,CAd9B;;AAAA;AAckB,gBAAA,GAdlB;AAAA,iDAkBmB,GAlBnB;;AAAA;AAAA;AAAA;;AAAA,sBAoBgB,YAAE,QAAF,CAAW,MAAX,KAAsB,GApBtC;AAAA;AAAA;AAAA;;AAqBgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AAtBhB;AAAA;;AAAA;AAAA,sBAuBuB,YAAE,QAAF,CAAW,MAAX,KAAsB,GAvB7C;AAAA;AAAA;AAAA;;AAwBgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AAzBhB;AAAA;;AAAA;AAAA,iDA2BqB,YAAE,QA3BvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmCI;;;;AAIG;;AAvCP;AAAA;AAAA;AAAA,8FAwCwB,IAxCxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCc,gBAAA,GAzCd,GAyCoB,KAAK,QAAL,GAAgB,OAzCpC;AAAA;AAAA;AAAA,uBA2C8B,KAAK,CAAC,IAAN,CAAW,GAAX,EAClB,IAAI,CAAC,SAAL,CAAe,IAAf,CADkB,EAEd;AACI,kBAAA,OAAO,EAAE;AACL,oCAAgB;AADX;AADb,iBAFc,CA3C9B;;AAAA;AA2CkB,gBAAA,GA3ClB;AAAA,kDAmDmB,GAAG,CAAC,IAnDvB;;AAAA;AAAA;AAAA;;AAAA,sBAqDgB,aAAE,QAAF,CAAW,MAAX,KAAsB,GArDtC;AAAA;AAAA;AAAA;;AAsDgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AAvDhB;AAAA;;AAAA;AAAA,sBAwDuB,aAAE,QAAF,CAAW,MAAX,KAAsB,GAxD7C;AAAA;AAAA;AAAA;;AAyDgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AA1DhB;AAAA;;AAAA;AAAA,sBA2DuB,aAAE,QAAF,CAAW,MAAX,KAAsB,GA3D7C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kDA8DmB,IAAI,CAAC,KAAL,CAAW,+BAAX,CA9DnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmEI;;;;;AAKG;;AAxEP;AAAA;AAAA;AAAA,6FAyEuB,QAzEvB,EAyEyC,QAzEzC;AAAA;AAAA;AAAA;AAAA;AAAA;AA2Ec,gBAAA,GA3Ed,GA2EoB,KAAK,QAAL,GAAgB,QA3EpC;AAAA;AAAA;AAAA,uBA6E8B,KAAK,CAAC,IAAN,CACd,GADc,EAEd;AACI,kBAAA,QAAQ,EAAE,QADd;AAEI,kBAAA,QAAQ,EAAE;AAFd;AAIA;;AAEG;AARW,iBA7E9B;;AAAA;AA6EkB,gBAAA,GA7ElB;AAuFkB,gBAAA,KAvFlB,GAuF0B,GAAG,CAAC,IAvF9B;AAwFY,gBAAA,YAAY,CAAC,OAAb,CAAqB,OAArB,EAA8B,IAAI,CAAC,SAAL,CAAe,KAAf,CAA9B;AACM,gBAAA,IAzFlB,GAyFyB,KAAK,sBAAL,CAA4B,QAA5B,CAzFzB;AAAA,kDA0FmB,IA1FnB;;AAAA;AAAA;AAAA;;AAAA,sBA4FgB,aAAE,QAAF,CAAW,MAAX,KAAsB,GA5FtC;AAAA;AAAA;AAAA;;AA6FgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AA9FhB;AAAA;;AAAA;AAAA,sBA+FuB,aAAE,QAAF,CAAW,MAAX,KAAsB,GA/F7C;AAAA;AAAA;AAAA;;AAgGgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AAjGhB;AAAA;;AAAA;AAAA,kDAmGqB,aAAE,QAnGvB;;AAAA;AAAA,kDAsGmB,IAAI,CAAC,KAAL,CAAW,IAAX,CAtGnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8GA4GwC,QA5GxC;AAAA;AAAA;AAAA;AAAA;AAAA;AA6GQ,oBAAI,QAAQ,IAAI,EAAhB,EAAoB;AACZ,kBAAA,WADY,GACO,YAAY,CAAC,OAAb,CAAqB,MAArB,CADP;;AAEhB,sBAAI,WAAJ,EAAiB;AACb,oBAAA,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,WAAX,CAAd;AACA,oBAAA,QAAQ,GAAG,WAAW,CAAC,EAAvB;AACH;AACJ;;AAnHT,qBAoHY,QApHZ;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqH+B,KAAK,OAAL,CAAa,QAAb,CArH/B;;AAAA;AAqHkB,gBAAA,IArHlB;;AAAA,sBAsHc,IAAI,CAAC,MAAL,IAAa,GAtH3B;AAAA;AAAA;AAAA;;AAuHe,gBAAA,YAAY,CAAC,OAAb,CAAqB,MAArB,EAA6B,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,IAApB,CAA7B;AAvHf,kDAwHsB,IAAI,CAAC,IAxH3B;;AAAA;AAAA,kDA4He,IAAI,CAAC,KAAL,CAAW,gDAAX,CA5Hf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiIQ,gBAAA,YAAY,CAAC,UAAb,CAAwB,MAAxB;;AAjIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCAoIyB;AACjB,UAAI,IAAI,GAAQ,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAhB;;AACA,UAAI,IAAJ,EAAU;AACN,QAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAP;;AACA,YAAI,CAAC,IAAI,CAAC,aAAV,EAAyB;AACrB,UAAA,IAAI,CAAC,aAAL,GAAqB,CAArB;AACH;;AACD,YAAI,CAAC,IAAI,CAAC,KAAV,EAAiB;AACb,UAAA,IAAI,CAAC,KAAL,GAAa,CAAb;AACH;;AACD,YAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACZ,UAAA,IAAI,CAAC,IAAL,GAAY,EAAZ;AACH;;AACD,YAAI,CAAC,IAAI,CAAC,KAAV,EAAiB;AACb,UAAA,IAAI,CAAC,KAAL,GAAa,EAAb;AACH;AACJ;;AACD,aAAO,IAAP;AACH;AAtJL;AAAA;AAAA,iCAwJqB;AACb,UAAM,IAAI,GAAG,KAAK,cAAL,EAAb;AACA,aAAO,IAAI,KAAK,IAAhB;AACH;AA3JL;AAAA;AAAA;AAAA,uGA6JiC,KA7JjC,EA6J8C,QA7J9C;AAAA;AAAA;AAAA;AAAA;AAAA;AA+Jc,gBAAA,KA/Jd,GA+JsB,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,KAAxB,CA/JtB;AAgKc,gBAAA,GAhKd,GAgKoB,KAAK,QAAL,GAAgB,YAhKpC;AAiKY,gBAAA,GAjKZ,GAiKkB,IAjKlB;AAkKc,gBAAA,MAlKd,GAkKuB;AAAC,kBAAA,OAAO,EAAE;AAAC,oCAAgB,qBAAjB;AAAwC,qCAAiB,YAAY,KAAK,CAAC;AAA3E;AAAV,iBAlKvB;AAmKc,gBAAA,SAnKd,GAmK0B,IAAI,QAAJ,EAnK1B;AAoKQ,gBAAA,SAAS,CAAC,MAAV,CAAiB,OAAjB,EAA0B,KAA1B;AACA,gBAAA,SAAS,CAAC,MAAV,CAAiB,MAAjB,EAAyB,MAAzB;AACA,gBAAA,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,QAAvB;AAtKR;AAAA;AAAA,uBAwK8B,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,SAAhB,EAA2B,MAA3B,EAAmC,KAAnC,CAAyC,UAAA,CAAC;AAAA,yBAAI,GAAG,GAAG,CAAV;AAAA,iBAA1C,CAxK9B;;AAAA;AAwKkB,gBAAA,GAxKlB;AAAA,kDAyKmB,GAzKnB;;AAAA;AAAA;AAAA;;AA2KY,oBAAI,aAAE,QAAF,CAAW,MAAX,KAAsB,GAA1B,EAA+B;AAC3B,uBAAK,MAAL;AACA,kBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,oBAAA,IAAI,EAAE;AAAP,mBAAZ;AACH,iBAHD,MAGO,IAAI,aAAE,QAAF,CAAW,MAAX,KAAsB,GAA1B,EAA+B;AAClC,uBAAK,MAAL;AACA,kBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,oBAAA,IAAI,EAAE;AAAP,mBAAZ;AACH,iBAHM,MAGA,CACH;AACH;;AAnLb,kDAoLmB,IAAI,CAAC,KAAL,CAAW,EAAX,CApLnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGAuL+B,IAvL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAyLc,gBAAA,GAzLd,GAyLoB,KAAK,QAAL,GAAgB,WAzLpC;AA0Lc,gBAAA,KA1Ld,GA0LsB,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,KAAxB,CA1LtB;AAAA;AAAA;AAAA,uBA4L8B,KAAK,CAAC,GAAN,CACd,GADc,EAEd,IAAI,CAAC,SAAL,CAAe,IAAf,CAFc,EAGd;AACI,kBAAA,OAAO,EAAE;AACL,oCAAgB,iCADX;AAC8C,qCAAiB,YAAY,KAAK,CAAC;AADjF;AADb,iBAHc,CA5L9B;;AAAA;AA4LkB,gBAAA,GA5LlB;AAAA,kDAqMmB,GArMnB;;AAAA;AAAA;AAAA;;AAAA,sBAuMgB,aAAE,QAAF,CAAW,MAAX,KAAsB,GAvMtC;AAAA;AAAA;AAAA;;AAwMgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AAzMhB;AAAA;;AAAA;AAAA,sBA0MuB,aAAE,QAAF,CAAW,MAAX,KAAsB,GA1M7C;AAAA;AAAA;AAAA;;AA2MgB,qBAAK,MAAL;AACA,gBAAA,MAAM,CAAC,IAAP,CAAY;AAAC,kBAAA,IAAI,EAAE;AAAP,iBAAZ;AA5MhB;AAAA;;AAAA;AAAA,kDA8MqB,aAAE,QA9MvB;;AAAA;AAAA,kDAiNmB,IAAI,CAAC,KAAL,CAAW,IAAX,CAjNnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAiC,GAAjC","sourcesContent":["import {Api} from \"@/services/Api\";\nimport {IUser} from \"@/interfaces/IUser\";\nimport Axios from \"axios\";\nimport {INewUser} from \"@/interfaces/INewUser\";\nimport {json} from \"@rxweb/reactive-forms\";\nimport router from '@/router';\n\nexport class UserService extends Api {\n    /**\n     * Gets the user.\n     *\n     * @param id\n     */\n    public async getUser(id: string){\n      if (localStorage.token == null) {\n        throw 'no token found'\n      }\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + '/api/user/' + id;\n\n        try {\n            const res = await Axios.get(url, {\n                headers: {\"Authorization\": \"Bearer \" + token.token}\n                //withCredentials: true\n            });\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n                //...\n            }\n        }\n\n\n    }\n\n    /**\n     * Gets the user.\n     *\n     * @param user\n     */\n    public async signup(user: INewUser): Promise<IUser> {\n        const url = this.base_url + \"/user\";\n        try {\n            const res = await Axios.post(url,\n            JSON.stringify(user),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8'\n                    }\n                }\n            );\n            return res.data;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 409) {\n                throw e\n            }\n            return JSON.parse('{\"error\": \"failed to signup\"}');\n        }\n\n    }\n\n    /**\n     * Logs in the user.\n     *\n     * @param username\n     * @param password\n     */\n    public async login(username: string, password: string): Promise<IUser> {\n\n        const url = this.base_url + '/login';\n        try {\n            const res = await Axios.post(\n                url,\n                {\n                    username: username,\n                    password: password\n                }\n                /*{\n                  withCredentials: true\n                }*/\n            );\n            const token = res.data\n            localStorage.setItem('token', JSON.stringify(token));\n            const user = this.updateUserLocalStorage(username)\n            return user;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n                //...\n            }\n            return JSON.parse('{}')\n        }\n\n\n    }\n\n    public async updateUserLocalStorage(username: string) {\n        if (username == \"\") {\n            let userProfile: any = localStorage.getItem('user');\n            if (userProfile) {\n                userProfile = JSON.parse(userProfile)\n                username = userProfile.id\n            }\n        }\n        if (username) {\n            const user = await this.getUser(username);\n           if(user.status==200){\n               localStorage.setItem('user', JSON.stringify(user.data));\n               return user.data\n           }\n\n        }\n        return JSON.parse('{ \"status\":\"error\", \"message\":\"Token Expired\"}');\n\n    }\n\n    public async logout() {\n        localStorage.removeItem('user');\n    }\n\n    public getCurrentUser(): IUser | null {\n        let user: any = localStorage.getItem('user');\n        if (user) {\n            user = JSON.parse(user);\n            if (!user.reviews_count) {\n                user.reviews_count = 0;\n            }\n            if (!user.earns) {\n                user.earns = 0;\n            }\n            if (!user.city) {\n                user.city = \"\";\n            }\n            if (!user.state) {\n                user.state = \"\";\n            }\n        }\n        return user;\n    }\n\n    public isLoggedIn(): boolean {\n        const user = this.getCurrentUser();\n        return user !== null;\n    }\n\n    public async uploadUserPhoto(photo: File, username: string): Promise<IUser> {\n\n        const token = JSON.parse(localStorage.token)\n        const url = this.base_url + '/api/photo';\n        let err = null;\n        const config = {headers: {'Content-Type': 'multipart/form-data', 'Authorization': 'Bearer ' + token.token}};\n        const form_data = new FormData();\n        form_data.append('image', photo);\n        form_data.append('type', 'user');\n        form_data.append('id', username);\n        try {\n            const res = await Axios.post(url, form_data, config).catch(e => err = e);\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n                //...\n            }\n            return JSON.parse('');\n        }\n    }\n    public async updateProfile(user: IUser){\n\n        const url = this.base_url + '/api/user';\n        const token = JSON.parse(localStorage.token)\n        try {\n            const res = await Axios.put(\n                url,\n                JSON.stringify(user),\n                {\n                    headers: {\n                        'Content-type': 'application/json; charset=UTF-8', 'Authorization': 'Bearer ' + token.token\n                    }\n                }\n            );\n            return res;\n        } catch (e) {\n            if (e.response.status === 401) {\n                this.logout();\n                router.push({name: 'home'});\n            } else if (e.response.status === 403) {\n                this.logout();\n                router.push({name: 'home'});\n            } else {\n              return e.response\n                //...\n            }\n            return JSON.parse('{}');\n        }\n    }\n\n}\n"],"sourceRoot":""}]}