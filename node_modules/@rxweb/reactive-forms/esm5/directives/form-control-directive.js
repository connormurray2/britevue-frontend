var CHECKBOX = 'checkbox';
var SELECT_MULTIPLE = "select-multiple";
var FormControlDirective = /** @class */ (function () {
    function FormControlDirective(element, formControl) {
        this.element = element;
        this.formControl = formControl;
        this.bindEvent();
        this.setValue();
        this.subscribeOnChange();
    }
    FormControlDirective.prototype.bindEvent = function () {
        this._onChange = this.onChange.bind(this);
        this._onBlur = this.onBlur.bind(this);
        this.element.addEventListener("input", this._onChange);
        this.element.addEventListener("blur", this._onBlur);
    };
    FormControlDirective.prototype.onChange = function (event) {
        this.formControl.setValue(event.target.value);
    };
    FormControlDirective.prototype.onBlur = function (event) {
        this.formControl.markAsTouched();
    };
    FormControlDirective.prototype.setValueOnControl = function () {
        this.element.value = this.formControl.value != null ? this.formControl.value : '';
    };
    FormControlDirective.prototype.setValue = function () {
        var value = this.formControl.value === "" || this.formControl.value === undefined ? "" : this.formControl.value;
        switch (this.element.type) {
            case CHECKBOX:
                this.element.checked = value !== null && value !== false;
                break;
            default:
                this.element.value = value;
                break;
        }
    };
    FormControlDirective.prototype.subscribeOnChange = function () {
        var _this = this;
        this.formControl.subscribe(function () {
            if (_this.element.value != _this.formControl.value)
                _this.setValue();
            if (_this.formControl.invalid) {
                if (!_this.element.classList.contains("rx-invalid"))
                    _this.element.classList.add("rx-invalid");
            }
            else {
                if (_this.element.classList.contains("rx-invalid"))
                    _this.element.classList.remove("rx-invalid");
            }
        });
    };
    FormControlDirective.prototype.destroy = function () {
        this.formControl.destroy();
        this.element.removeEventListener("input", this._onChange);
        this.element.removeEventListener("blur", this._onBlur);
    };
    return FormControlDirective;
}());
export { FormControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvZm9ybS1jb250cm9sLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFDcEMsSUFBTSxlQUFlLEdBQVcsaUJBQWlCLENBQUM7QUFDbEQ7SUFJSSw4QkFBb0IsT0FBeUIsRUFBVSxXQUEwQjtRQUE3RCxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFlO1FBQzdFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVPLHdDQUFTLEdBQWpCO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDdkQsQ0FBQztJQUVPLHVDQUFRLEdBQWhCLFVBQWlCLEtBQUs7UUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU8scUNBQU0sR0FBZCxVQUFlLEtBQUs7UUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU8sZ0RBQWlCLEdBQXpCO1FBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3RGLENBQUM7SUFFTyx1Q0FBUSxHQUFoQjtRQUNJLElBQUksS0FBSyxHQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDckgsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUN2QixLQUFLLFFBQVE7Z0JBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDO2dCQUN6RCxNQUFNO1lBQ1Y7Z0JBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUMzQixNQUFNO1NBQ2I7SUFDTCxDQUFDO0lBRUQsZ0RBQWlCLEdBQWpCO1FBQUEsaUJBWUM7UUFYRyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQztZQUN2QixJQUFJLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSztnQkFDNUMsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3BCLElBQUksS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO29CQUM5QyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUE7YUFDL0M7aUJBQU07Z0JBQ0gsSUFBSSxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO29CQUM3QyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUE7YUFDbEQ7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxzQ0FBTyxHQUFQO1FBQ0ksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFDTCwyQkFBQztBQUFELENBQUMsQUE1REQsSUE0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSeEZvcm1Db250cm9sIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2Zvcm0tY29udHJvbFwiO1xyXG5jb25zdCBDSEVDS0JPWDogc3RyaW5nID0gJ2NoZWNrYm94JztcclxuY29uc3QgU0VMRUNUX01VTFRJUExFOiBzdHJpbmcgPSBcInNlbGVjdC1tdWx0aXBsZVwiO1xyXG5leHBvcnQgY2xhc3MgRm9ybUNvbnRyb2xEaXJlY3RpdmUge1xyXG5cclxuICAgIF9vbkNoYW5nZTogKGUpID0+IHZvaWQ7XHJcbiAgICBfb25CbHVyOiAoZSkgPT4gdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgcHJpdmF0ZSBmb3JtQ29udHJvbDogUnhGb3JtQ29udHJvbCkge1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlT25DaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJpbmRFdmVudCgpIHtcclxuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9vbkJsdXIgPSB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5fb25DaGFuZ2UpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLl9vbkJsdXIpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNoYW5nZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQmx1cihldmVudCkge1xyXG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2wubWFya0FzVG91Y2hlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0VmFsdWVPbkNvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbHVlID0gdGhpcy5mb3JtQ29udHJvbC52YWx1ZSAhPSBudWxsID8gdGhpcy5mb3JtQ29udHJvbC52YWx1ZSA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0VmFsdWUoKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSB0aGlzLmZvcm1Db250cm9sLnZhbHVlID09PSBcIlwiIHx8IHRoaXMuZm9ybUNvbnRyb2wudmFsdWUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiB0aGlzLmZvcm1Db250cm9sLnZhbHVlO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5lbGVtZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDSEVDS0JPWDpcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jaGVja2VkID0gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdWJzY3JpYmVPbkNoYW5nZSgpIHtcclxuICAgICAgICB0aGlzLmZvcm1Db250cm9sLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQudmFsdWUgIT0gdGhpcy5mb3JtQ29udHJvbC52YWx1ZSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybUNvbnRyb2wuaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicngtaW52YWxpZFwiKSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInJ4LWludmFsaWRcIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicngtaW52YWxpZFwiKSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInJ4LWludmFsaWRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmZvcm1Db250cm9sLmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuX29uQ2hhbmdlKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgdGhpcy5fb25CbHVyKTtcclxuICAgIH1cclxufSJdfQ==