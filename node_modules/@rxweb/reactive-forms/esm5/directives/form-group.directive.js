import { RxFormGroup } from "../services/rx-form-group";
import { FormControlDirective } from "./form-control-directive";
import { RxFormControl } from "../services/form-control";
var FormGroupDirective = /** @class */ (function () {
    function FormGroupDirective(element, formGroup) {
        this.element = element;
        this.formGroup = formGroup;
        this._formControls = new Array();
        this._formGroups = new Array();
        this.map();
    }
    FormGroupDirective.prototype.map = function () {
        var _this = this;
        var childFormControls = this.element.querySelectorAll("[form-control-path^=\"" + this.formGroup.path + "\"]");
        if (childFormControls) {
            childFormControls.forEach(function (t) {
                var formControlName = t.getAttribute("form-control-path");
                var control = _this.formGroup.get(formControlName);
                if (control instanceof RxFormControl) {
                    var formControl = new FormControlDirective(t, control);
                    _this._formControls.push(formControl);
                }
            });
        }
    };
    FormGroupDirective.prototype.destroy = function () {
        var _this = this;
        this._formControls.forEach(function (t) {
            t.destroy();
        });
        Object.keys(this.formGroup.controls).forEach(function (t) {
            if (_this.formGroup.controls[t] instanceof RxFormGroup)
                _this.formGroup.controls[t].destroy();
        });
    };
    return FormGroupDirective;
}());
export { FormGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL2Zvcm0tZ3JvdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFekQ7SUFLSSw0QkFBb0IsT0FBWSxFQUFVLFNBQXNCO1FBQTVDLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFhO1FBSHhELGtCQUFhLEdBQTJCLElBQUksS0FBSyxFQUF3QixDQUFDO1FBQzFFLGdCQUFXLEdBQXlCLElBQUksS0FBSyxFQUFzQixDQUFDO1FBR3hFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxnQ0FBRyxHQUFIO1FBQUEsaUJBWUM7UUFYRyxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsMkJBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxRQUFJLENBQWEsQ0FBQztRQUNuSCxJQUFJLGlCQUFpQixFQUFFO1lBQ25CLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQU07Z0JBQzdCLElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDMUQsSUFBSSxPQUFPLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ2xELElBQUksT0FBTyxZQUFZLGFBQWEsRUFBRTtvQkFDbEMsSUFBSSxXQUFXLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQ3ZELEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUN4QztZQUNMLENBQUMsQ0FBQyxDQUFBO1NBQ0w7SUFDTCxDQUFDO0lBRUQsb0NBQU8sR0FBUDtRQUFBLGlCQVFDO1FBUEcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQzFDLElBQUksS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksV0FBVztnQkFDakQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0wseUJBQUM7QUFBRCxDQUFDLEFBaENELElBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnhGb3JtR3JvdXAgfSBmcm9tIFwiLi4vc2VydmljZXMvcngtZm9ybS1ncm91cFwiO1xyXG5pbXBvcnQgeyBGb3JtQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gXCIuL2Zvcm0tY29udHJvbC1kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHsgUnhGb3JtQ29udHJvbCB9IGZyb20gXCIuLi9zZXJ2aWNlcy9mb3JtLWNvbnRyb2xcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtR3JvdXBEaXJlY3RpdmUge1xyXG5cclxuICAgIHByaXZhdGUgX2Zvcm1Db250cm9sczogRm9ybUNvbnRyb2xEaXJlY3RpdmVbXSA9IG5ldyBBcnJheTxGb3JtQ29udHJvbERpcmVjdGl2ZT4oKTtcclxuICAgIHByaXZhdGUgX2Zvcm1Hcm91cHM6IEZvcm1Hcm91cERpcmVjdGl2ZVtdID0gbmV3IEFycmF5PEZvcm1Hcm91cERpcmVjdGl2ZT4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IGFueSwgcHJpdmF0ZSBmb3JtR3JvdXA6IFJ4Rm9ybUdyb3VwKSB7XHJcbiAgICAgICAgdGhpcy5tYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBtYXAoKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkRm9ybUNvbnRyb2xzID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtmb3JtLWNvbnRyb2wtcGF0aF49XCIke3RoaXMuZm9ybUdyb3VwLnBhdGh9XCJdYCkgYXMgTm9kZUxpc3Q7XHJcbiAgICAgICAgaWYgKGNoaWxkRm9ybUNvbnRyb2xzKSB7XHJcbiAgICAgICAgICAgIGNoaWxkRm9ybUNvbnRyb2xzLmZvckVhY2goKHQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1Db250cm9sTmFtZSA9IHQuZ2V0QXR0cmlidXRlKFwiZm9ybS1jb250cm9sLXBhdGhcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udHJvbCA9IHRoaXMuZm9ybUdyb3VwLmdldChmb3JtQ29udHJvbE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wgaW5zdGFuY2VvZiBSeEZvcm1Db250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sRGlyZWN0aXZlKHQsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm1Db250cm9scy5wdXNoKGZvcm1Db250cm9sKTtcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybUNvbnRyb2xzLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgIHQuZGVzdHJveSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzKS5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdF0gaW5zdGFuY2VvZiBSeEZvcm1Hcm91cClcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzW3RdLmRlc3Ryb3koKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59Il19