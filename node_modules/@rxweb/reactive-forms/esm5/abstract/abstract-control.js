import { VALID, INVALID, DISABLED } from "../const";
var AbstractControl = /** @class */ (function () {
    function AbstractControl(value, validators, asyncValidators) {
        this.validators = validators;
        this.asyncValidators = asyncValidators;
        this._errors = {};
        this.subscribers = new Array();
        this._pristine = true;
        this._value = value;
    }
    Object.defineProperty(AbstractControl.prototype, "errors", {
        get: function () {
            return this._errors;
        },
        set: function (value) {
            this._errors = value;
            this.onChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "root", {
        get: function () {
            return this._root;
        },
        set: function (value) {
            this._root = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            this.markAsDirty();
            this.updateValueAndValidity();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
        get: function () {
            return this._pristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (value) {
            this._parent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
        get: function () {
            return this.status === VALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
        get: function () {
            return this.status === INVALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "enabled", {
        get: function () {
            return this.status !== DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "disabled", {
        get: function () {
            return this.status === DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
        get: function () {
            return !this.pristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
        get: function () {
            return this._touched;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
        get: function () {
            return !this._touched;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractControl.prototype.markAsDirty = function () {
        this._pristine = false;
        if (this.parent)
            this.parent.markAsDirty();
    };
    AbstractControl.prototype.markAsTouched = function () {
        this._touched = true;
        if (this.parent)
            this.parent.markAsTouched();
    };
    AbstractControl.prototype.markAsUnTouched = function () {
        this._touched = false;
        if (this.parent)
            this.parent.markAsUnTouched();
    };
    AbstractControl.prototype.disable = function () {
        this.status = DISABLED;
    };
    AbstractControl.prototype.enable = function () {
        this.status = VALID;
    };
    AbstractControl.prototype.updateValueAndValidity = function () {
        if (this.enabled) {
            this.runValidators();
        }
    };
    AbstractControl.prototype.runValidators = function () {
        var _this = this;
        this._errors = {};
        if (this.validators) {
            this.validators.forEach(function (validator) {
                var result = validator(_this);
                if (result)
                    _this.setErrors(result);
            });
        }
        if (Object.keys(this._errors).length == 0) {
            this.status = VALID;
            this.errors = undefined;
        }
    };
    AbstractControl.prototype.setErrors = function (errors) {
        var _this = this;
        Object.keys(errors).forEach(function (t) { return _this._errors[t] = errors[t]; });
        this.status = INVALID;
    };
    AbstractControl.prototype.setValue = function (value) {
        this.value = value;
    };
    AbstractControl.prototype.onChange = function () {
        this.subscribers.forEach(function (t) {
            t();
        });
    };
    AbstractControl.prototype.subscribe = function (func) {
        this.subscribers.push(func);
    };
    AbstractControl.prototype.destroy = function () {
        while (this.subscribers.length != 0)
            this.subscribers.splice(0, 1);
    };
    return AbstractControl;
}());
export { AbstractControl };
//# sourceMappingURL=data:application/json;base64,