import * as tslib_1 from "tslib";
import { RxFormArray } from "../services/rx-form-array";
import { NumericValueType } from '../enums';
import { ReactiveFormConfig } from "./reactive-form-config";
var MODEL_INSTANCE_VALUE = "modelInstanceValue";
var ApplicationUtil = /** @class */ (function () {
    function ApplicationUtil() {
    }
    ApplicationUtil.getParentObjectValue = function (control) {
        if (control.parent) {
            var parent_1 = this.parentObjectValue(control.parent);
            return parent_1.value;
        }
        return {};
    };
    ApplicationUtil.getParentModelInstanceValue = function (control) {
        if (control.parent) {
            var parent_2 = this.parentObjectValue(control.parent);
            return parent_2[MODEL_INSTANCE_VALUE];
        }
        return {};
    };
    ApplicationUtil.getRootFormGroup = function (control) {
        if (control.parent) {
            return this.getRootFormGroup(control.parent);
        }
        return control;
    };
    ApplicationUtil.getParentControl = function (control) {
        if (control.parent) {
            var parent_3 = this.parentObjectValue(control.parent);
            return parent_3;
        }
        return control;
    };
    ApplicationUtil.getFormControlName = function (control) {
        var controlName = '';
        if (control.parent) {
            for (var formControlName in control.parent.controls) {
                if (control.parent.controls[formControlName] == control) {
                    controlName = formControlName;
                    break;
                }
            }
        }
        return controlName;
    };
    ApplicationUtil.getParentFormArray = function (control) {
        if (control.parent && !(control.parent instanceof RxFormArray || control.parent instanceof RxFormArray)) {
            var parent_4 = this.getParentFormArray(control.parent);
            return parent_4;
        }
        return control.parent;
    };
    ApplicationUtil.toLower = function (value) {
        if (value)
            return String(value).toLowerCase();
        return value;
    };
    ApplicationUtil.getControl = function (fieldName, formGroup) {
        var splitText = fieldName.split('.');
        if (splitText.length > 1) {
            var formControl = formGroup;
            splitText.forEach(function (name, index) { formControl = formControl.controls[name]; });
            return formControl;
        }
        else
            return formGroup.controls[fieldName];
    };
    ApplicationUtil.getFormControl = function (fieldName, control) {
        var splitText = fieldName.split('.');
        if (splitText.length > 1 && control.parent) {
            var formControl = this.getParentControl(control);
            splitText.forEach(function (name, index) { formControl = formControl.controls[name]; });
            return formControl;
        }
        return (control.parent) ? control.parent.get([fieldName]) : undefined;
    };
    ApplicationUtil.parentObjectValue = function (control) {
        if (!control.parent)
            return control;
        else
            control = this.parentObjectValue(control.parent);
        return control;
    };
    ApplicationUtil.isNumeric = function (value) {
        return (value - parseFloat(value) + 1) >= 0;
    };
    ApplicationUtil.notEqualTo = function (primaryValue, secondaryValue) {
        var firstValue = (primaryValue === undefined || primaryValue === null) ? "" : primaryValue;
        var secondValue = (secondaryValue === undefined || secondaryValue === null) ? "" : secondaryValue;
        if (firstValue instanceof Date && secondValue instanceof Date)
            return +firstValue != +secondValue;
        return (firstValue != secondValue);
    };
    ApplicationUtil.numericValidation = function (allowDecimal, acceptValue) {
        var decimalSymbol;
        if (ReactiveFormConfig && ReactiveFormConfig.number) {
            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;
        }
        else {
            decimalSymbol = ".";
        }
        acceptValue = (acceptValue == undefined) ? NumericValueType.PositiveNumber : acceptValue;
        var regex = /^[0-9]+$/;
        switch (acceptValue) {
            case NumericValueType.PositiveNumber:
                regex = (!allowDecimal) ? /^[0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[0-9\.]+$/ : /^[0-9\,]+$/;
                break;
            case NumericValueType.NegativeNumber:
                regex = (!allowDecimal) ? /^[-][0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[-][0-9\.]+$/ : /^[-][0-9\,]+$/;
                break;
            case NumericValueType.Both:
                regex = (!allowDecimal) ? /^[-|+]?[0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[-|+]?[0-9\.]+$/ : /^[-|+]?[0-9\,]+$/;
                break;
        }
        return regex;
    };
    ApplicationUtil.configureControl = function (control, config, type) {
        if (!control.validatorConfig) {
            var jObject = {};
            jObject[type] = config;
            Object.assign(control, { validatorConfig: jObject });
        }
        else
            control.validatorConfig[type] = config;
    };
    ApplicationUtil.lowerCaseWithTrim = function (value) {
        return typeof value === "string" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();
    };
    /** Check if a value is an object */
    ApplicationUtil.isObject = function (value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    };
    /** Check if a value is an object */
    ApplicationUtil.isArray = function (value) {
        return Array.isArray(value);
    };
    ApplicationUtil.cloneValue = function (value) {
        return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? tslib_1.__spread(value) : tslib_1.__assign({}, value) : value;
    };
    return ApplicationUtil;
}());
export { ApplicationUtil };
//# sourceMappingURL=data:application/json;base64,