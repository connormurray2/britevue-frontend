import { ResetFormType } from "../enums/reset-type";
import { AbstractControl } from "../abstract/abstract-control";
import { AbstractFormArray } from "../abstract/abstract-form-array";
import { RxFormGroup } from "../services/rx-form-group";
export function isResetControl(controlName, control, options) {
    var isReset = true;
    if (options) {
        isReset = false;
        if (options.resetType)
            switch (options.resetType) {
                case ResetFormType.ControlsOnly:
                    isReset = control instanceof AbstractControl;
                    break;
                case ResetFormType.ControlsAndFormGroupsOnly:
                    isReset = control instanceof AbstractControl;
                    break;
                case ResetFormType.FormGroupsOnly:
                    isReset = control instanceof RxFormGroup;
                    break;
                case ResetFormType.FormArraysOnly:
                    isReset = control instanceof AbstractFormArray;
                    break;
                case ResetFormType.DefinedPropsOnly:
                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;
                    break;
                default:
                    isReset = true;
                    break;
            }
        if (!isReset && options.with)
            isReset = options.with.filter(function (x) { return x.split('.')[0] == controlName.split('.')[0]; })[0] !== undefined;
        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))
            isReset = true;
    }
    return isReset;
}
export function getNestedOptions(controlName, options) {
    if (options) {
        var jObjectOptions = {};
        if (options.resetType)
            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;
        if (options.with) {
            var nestedControls = options.with.filter(function (t) { return t.split('.')[0] == controlName; });
            var controlNames = nestedControls.map(function (x) {
                var splitControls = x.split('.');
                splitControls.splice(0, 1);
                return splitControls.join('.');
            });
            jObjectOptions.with = controlNames;
        }
        if (options.value && options.value[controlName])
            jObjectOptions.value = options.value[controlName];
        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;
        return jObjectOptions;
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbInV0aWwvcmVzZXQtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RCxNQUFNLFVBQVUsY0FBYyxDQUFDLFdBQWtCLEVBQUMsT0FBWSxFQUFFLE9BSS9EO0lBQ0csSUFBSSxPQUFPLEdBQVksSUFBSSxDQUFDO0lBQzVCLElBQUksT0FBTyxFQUFFO1FBQ1QsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixJQUFJLE9BQU8sQ0FBQyxTQUFTO1lBQ3JCLFFBQVEsT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDdkIsS0FBSyxhQUFhLENBQUMsWUFBWTtvQkFDM0IsT0FBTyxHQUFHLE9BQU8sWUFBWSxlQUFlLENBQUM7b0JBQzdDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMseUJBQXlCO29CQUN4QyxPQUFPLEdBQUcsT0FBTyxZQUFZLGVBQWUsQ0FBQztvQkFDN0MsTUFBTTtnQkFDVixLQUFLLGFBQWEsQ0FBQyxjQUFjO29CQUM3QixPQUFPLEdBQUcsT0FBTyxZQUFZLFdBQVcsQ0FBQztvQkFDekMsTUFBTTtnQkFDVixLQUFLLGFBQWEsQ0FBQyxjQUFjO29CQUM3QixPQUFPLEdBQUcsT0FBTyxZQUFZLGlCQUFpQixDQUFDO29CQUMvQyxNQUFNO2dCQUNWLEtBQUssYUFBYSxDQUFDLGdCQUFnQjtvQkFDL0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUN4RixNQUFNO2dCQUNWO29CQUNJLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ2YsTUFBTTthQUNUO1FBQ0wsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSTtZQUN4QixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQTVDLENBQTRDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7UUFDdEcsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7WUFDdEgsT0FBTyxHQUFHLElBQUksQ0FBQztLQUN0QjtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsV0FBbUIsRUFBRSxPQUlyRDtJQUNHLElBQUksT0FBTyxFQUFFO1FBQ1QsSUFBSSxjQUFjLEdBSUYsRUFBRSxDQUFDO1FBQ25CLElBQUksT0FBTyxDQUFDLFNBQVM7WUFDakIsY0FBYyxDQUFDLFNBQVMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksYUFBYSxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN6TCxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxFQUE5QixDQUE4QixDQUFDLENBQUM7WUFDOUUsSUFBSSxZQUFZLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7Z0JBQ25DLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7WUFDSCxjQUFjLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztTQUN0QztRQUNELElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUMzQyxjQUFjLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDckYsT0FBTyxjQUFjLENBQUM7S0FDekI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzZXRGb3JtVHlwZSB9IGZyb20gXCIuLi9lbnVtcy9yZXNldC10eXBlXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCIuLi9hYnN0cmFjdC9hYnN0cmFjdC1jb250cm9sXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0Rm9ybUFycmF5IH0gZnJvbSBcIi4uL2Fic3RyYWN0L2Fic3RyYWN0LWZvcm0tYXJyYXlcIjtcclxuaW1wb3J0IHsgUnhGb3JtR3JvdXAgfSBmcm9tIFwiLi4vc2VydmljZXMvcngtZm9ybS1ncm91cFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzZXRDb250cm9sKGNvbnRyb2xOYW1lOnN0cmluZyxjb250cm9sOiBhbnksIG9wdGlvbnM/OiB7XHJcbiAgICByZXNldFR5cGU/OiBSZXNldEZvcm1UeXBlLFxyXG4gICAgd2l0aD86IHN0cmluZ1tdLFxyXG4gICAgdmFsdWU/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XHJcbn0pIHtcclxuICAgIGxldCBpc1Jlc2V0OiBib29sZWFuID0gdHJ1ZTtcclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgaXNSZXNldCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnJlc2V0VHlwZSlcclxuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMucmVzZXRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5Db250cm9sc09ubHk6XHJcbiAgICAgICAgICAgICAgICBpc1Jlc2V0ID0gY29udHJvbCBpbnN0YW5jZW9mIEFic3RyYWN0Q29udHJvbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFJlc2V0Rm9ybVR5cGUuQ29udHJvbHNBbmRGb3JtR3JvdXBzT25seTpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSBjb250cm9sIGluc3RhbmNlb2YgQWJzdHJhY3RDb250cm9sO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5Gb3JtR3JvdXBzT25seTpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSBjb250cm9sIGluc3RhbmNlb2YgUnhGb3JtR3JvdXA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBSZXNldEZvcm1UeXBlLkZvcm1BcnJheXNPbmx5OlxyXG4gICAgICAgICAgICAgICAgaXNSZXNldCA9IGNvbnRyb2wgaW5zdGFuY2VvZiBBYnN0cmFjdEZvcm1BcnJheTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFJlc2V0Rm9ybVR5cGUuRGVmaW5lZFByb3BzT25seTpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSBvcHRpb25zLnZhbHVlID8gT2JqZWN0LmtleXMob3B0aW9ucy52YWx1ZSkuaW5kZXhPZihjb250cm9sTmFtZSkgIT0gLTEgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaXNSZXNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNSZXNldCAmJiBvcHRpb25zLndpdGgpIFxyXG4gICAgICAgICAgICBpc1Jlc2V0ID0gb3B0aW9ucy53aXRoLmZpbHRlcih4ID0+IHguc3BsaXQoJy4nKVswXSA9PSBjb250cm9sTmFtZS5zcGxpdCgnLicpWzBdKVswXSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICghaXNSZXNldCAmJiBvcHRpb25zLnZhbHVlICYmIChvcHRpb25zLnJlc2V0VHlwZSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMucmVzZXRUeXBlICE9PSBSZXNldEZvcm1UeXBlLkRlZmluZWRQcm9wc09ubHkpKVxyXG4gICAgICAgICAgICBpc1Jlc2V0ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBpc1Jlc2V0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmVzdGVkT3B0aW9ucyhjb250cm9sTmFtZTogc3RyaW5nLCBvcHRpb25zPzoge1xyXG4gICAgcmVzZXRUeXBlPzogUmVzZXRGb3JtVHlwZSxcclxuICAgIHdpdGg/OiBzdHJpbmdbXSxcclxuICAgIHZhbHVlPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfVxyXG59KSB7XHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgIGxldCBqT2JqZWN0T3B0aW9uczoge1xyXG4gICAgICAgICAgICByZXNldFR5cGU/OiBSZXNldEZvcm1UeXBlLFxyXG4gICAgICAgICAgICB3aXRoPzogc3RyaW5nW10sXHJcbiAgICAgICAgICAgIHZhbHVlPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfVxyXG4gICAgICAgIH0gfCB1bmRlZmluZWQgPSB7fTtcclxuICAgICAgICBpZiAob3B0aW9ucy5yZXNldFR5cGUpXHJcbiAgICAgICAgICAgIGpPYmplY3RPcHRpb25zLnJlc2V0VHlwZSA9IChvcHRpb25zLnJlc2V0VHlwZSA9PSBSZXNldEZvcm1UeXBlLkZvcm1Hcm91cHNPbmx5IHx8IG9wdGlvbnMucmVzZXRUeXBlID09IFJlc2V0Rm9ybVR5cGUuRm9ybUFycmF5c09ubHkpID8gUmVzZXRGb3JtVHlwZS5Db250cm9sc09ubHkgOiBvcHRpb25zLnJlc2V0VHlwZTtcclxuICAgICAgICBpZiAob3B0aW9ucy53aXRoKSB7XHJcbiAgICAgICAgICAgIGxldCBuZXN0ZWRDb250cm9scyA9IG9wdGlvbnMud2l0aC5maWx0ZXIodCA9PiB0LnNwbGl0KCcuJylbMF0gPT0gY29udHJvbE5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgY29udHJvbE5hbWVzID0gbmVzdGVkQ29udHJvbHMubWFwKHggPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwbGl0Q29udHJvbHMgPSB4LnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICBzcGxpdENvbnRyb2xzLnNwbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzcGxpdENvbnRyb2xzLmpvaW4oJy4nKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGpPYmplY3RPcHRpb25zLndpdGggPSBjb250cm9sTmFtZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnZhbHVlICYmIG9wdGlvbnMudmFsdWVbY29udHJvbE5hbWVdKVxyXG4gICAgICAgICAgICBqT2JqZWN0T3B0aW9ucy52YWx1ZSA9IG9wdGlvbnMudmFsdWVbY29udHJvbE5hbWVdO1xyXG4gICAgICAgIGpPYmplY3RPcHRpb25zID0gT2JqZWN0LmtleXMoak9iamVjdE9wdGlvbnMpLmxlbmd0aCA+IDAgPyBqT2JqZWN0T3B0aW9ucyA6IHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gak9iamVjdE9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59Il19