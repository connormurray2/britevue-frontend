import { FormProvider } from "./form-provider";
import { clone } from "../services/entity.service";
import { CONFIG_REQUIRED_FIELDS } from "../const/config-required-fields.const";
export function getConfigObject(config, control, configName) {
    if (configName === void 0) { configName = ''; }
    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};
}
function configProvider(control, config, configName) {
    if (config.dynamicConfig) {
        var currentConfig_1 = FormProvider.ProcessRule(control, clone(config), true);
        if (typeof currentConfig_1 != "boolean") {
            currentConfig_1.conditionalExpression = config.conditionalExpression;
            currentConfig_1.dynamicConfig = config.dynamicConfig;
            Object.keys(config).forEach(function (t) {
                if ((t != "conditionalExpression" && t != "dynamicConfig") || currentConfig_1[t] === undefined) {
                    currentConfig_1[t] = config[t];
                }
            });
            return currentConfig_1;
        }
        else
            return config;
    }
    return checkRequiredProps(config, configName);
}
function checkRequiredProps(config, configName) {
    var props = CONFIG_REQUIRED_FIELDS[configName];
    if (configName) {
        props.forEach(function (prop) {
            if (config[prop] === undefined)
                throw new Error("Pass the property of '" + prop + "' with value in the " + configName + ", otherwise it won't work.");
        });
    }
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9jb25maWctcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFBO0FBQzVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUUvRSxNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQVcsRUFBQyxPQUFXLEVBQUMsVUFBc0I7SUFBdEIsMkJBQUEsRUFBQSxlQUFzQjtJQUMxRSxPQUFPLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDcEcsQ0FBQztBQUNELFNBQVMsY0FBYyxDQUFDLE9BQXVCLEVBQUMsTUFBVSxFQUFDLFVBQWlCO0lBQ3hFLElBQUcsTUFBTSxDQUFDLGFBQWEsRUFBQztRQUNwQixJQUFJLGVBQWEsR0FBTyxZQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUE7UUFDNUUsSUFBRyxPQUFPLGVBQWEsSUFBSSxTQUFTLEVBQUM7WUFDN0IsZUFBYSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztZQUNuRSxlQUFhLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO2dCQUN6QixJQUFHLENBQUMsQ0FBQyxJQUFJLHVCQUF1QixJQUFJLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxlQUFhLENBQUMsQ0FBQyxDQUFDLEtBQU0sU0FBUyxFQUFDO29CQUN6RixlQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztZQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ04sT0FBTyxlQUFhLENBQUM7U0FDeEI7O1lBQ0csT0FBTyxNQUFNLENBQUM7S0FDckI7SUFDRyxPQUFPLGtCQUFrQixDQUFDLE1BQU0sRUFBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBR0QsU0FBUyxrQkFBa0IsQ0FBQyxNQUFVLEVBQUMsVUFBaUI7SUFDcEQsSUFBSSxLQUFLLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0MsSUFBRyxVQUFVLEVBQUM7UUFDVixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNkLElBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVM7Z0JBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQXlCLElBQUksNEJBQXVCLFVBQVUsK0JBQTRCLENBQUMsQ0FBQztRQUN4SCxDQUFDLENBQUMsQ0FBQTtLQUNMO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Rm9ybVByb3ZpZGVyfSBmcm9tIFwiLi9mb3JtLXByb3ZpZGVyXCJcclxuaW1wb3J0IHsgY2xvbmUgfSBmcm9tIFwiLi4vc2VydmljZXMvZW50aXR5LnNlcnZpY2VcIlxyXG5pbXBvcnQgeyBDT05GSUdfUkVRVUlSRURfRklFTERTIH0gZnJvbSBcIi4uL2NvbnN0L2NvbmZpZy1yZXF1aXJlZC1maWVsZHMuY29uc3RcIjtcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIi4uL2Fic3RyYWN0L2Fic3RyYWN0LWNvbnRyb2xcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZ09iamVjdChjb25maWc6IGFueSxjb250cm9sOmFueSxjb25maWdOYW1lOnN0cmluZyA9ICcnKTogYW55IHtcclxuICAgIHJldHVybiAoY29uZmlnICE9IHVuZGVmaW5lZCAmJiBjb25maWcgIT0gdHJ1ZSkgPyBjb25maWdQcm92aWRlcihjb250cm9sLGNvbmZpZyxjb25maWdOYW1lKSA6IHt9O1xyXG59XHJcbmZ1bmN0aW9uIGNvbmZpZ1Byb3ZpZGVyKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sLGNvbmZpZzphbnksY29uZmlnTmFtZTpzdHJpbmcpOmFueXtcclxuICAgIGlmKGNvbmZpZy5keW5hbWljQ29uZmlnKXtcclxuICAgICAgICBsZXQgY3VycmVudENvbmZpZzphbnkgPSBGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjbG9uZShjb25maWcpLHRydWUpXHJcbiAgICAgICAgaWYodHlwZW9mIGN1cnJlbnRDb25maWcgIT0gXCJib29sZWFuXCIpe1xyXG4gICAgICAgICAgICAgICAgY3VycmVudENvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb24gPSBjb25maWcuY29uZGl0aW9uYWxFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudENvbmZpZy5keW5hbWljQ29uZmlnID0gY29uZmlnLmR5bmFtaWNDb25maWc7IFxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnKS5mb3JFYWNoKHQ9PntcclxuICAgICAgICAgICAgICAgICAgICBpZigodCAhPSBcImNvbmRpdGlvbmFsRXhwcmVzc2lvblwiICYmIHQgIT0gXCJkeW5hbWljQ29uZmlnXCIpIHx8IGN1cnJlbnRDb25maWdbdF0gID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29uZmlnW3RdID0gY29uZmlnW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pICAgXHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q29uZmlnO1xyXG4gICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNoZWNrUmVxdWlyZWRQcm9wcyhjb25maWcsY29uZmlnTmFtZSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjaGVja1JlcXVpcmVkUHJvcHMoY29uZmlnOmFueSxjb25maWdOYW1lOnN0cmluZyl7XHJcbiAgICBsZXQgcHJvcHMgPSBDT05GSUdfUkVRVUlSRURfRklFTERTW2NvbmZpZ05hbWVdO1xyXG4gICAgaWYoY29uZmlnTmFtZSl7XHJcbiAgICAgICAgcHJvcHMuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgICAgICAgaWYoY29uZmlnW3Byb3BdID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXNzIHRoZSBwcm9wZXJ0eSBvZiAnJHtwcm9wfScgd2l0aCB2YWx1ZSBpbiB0aGUgJHtjb25maWdOYW1lfSwgb3RoZXJ3aXNlIGl0IHdvbid0IHdvcmsuYCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiBjb25maWdcclxufSJdfQ==