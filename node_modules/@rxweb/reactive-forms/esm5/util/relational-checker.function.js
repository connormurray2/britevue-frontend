import { ApplicationUtil } from "./app-util";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { AnnotationTypes } from "../core/validator.static";
import { ObjectMaker } from "./object-maker";
import { getConfigObject } from "../util/config-provider";
export function relationalCheck(control, config, relationalOperatorName) {
    config = getConfigObject(config, control);
    var matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
    var matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {
            var isValid = false;
            switch (relationalOperatorName) {
                case AnnotationTypes.greaterThan:
                    isValid = parseFloat(control.value) > parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.lessThan:
                    isValid = parseFloat(control.value) < parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.greaterThanEqualTo:
                    isValid = parseFloat(control.value) >= parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.lessThanEqualTo:
                    isValid = parseFloat(control.value) <= parseFloat(matchControlValue);
                    break;
            }
            if (!isValid)
                return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25hbC1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9yZWxhdGlvbmFsLWNoZWNrZXIuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRXhELE1BQU0sVUFBVSxlQUFlLENBQUMsT0FBdUIsRUFBQyxNQUFVLEVBQUMsc0JBQTZCO0lBQzVGLE1BQU0sR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzdHLElBQU0saUJBQWlCLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQztJQUM5RyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzFDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQzFGLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNwQixRQUFPLHNCQUFzQixFQUFDO2dCQUMxQixLQUFLLGVBQWUsQ0FBQyxXQUFXO29CQUNoQyxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDcEUsTUFBTTtnQkFDTixLQUFLLGVBQWUsQ0FBQyxRQUFRO29CQUM3QixPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtvQkFDbkUsTUFBTTtnQkFDTixLQUFLLGVBQWUsQ0FBQyxrQkFBa0I7b0JBQ3ZDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO29CQUNwRSxNQUFNO2dCQUNOLEtBQUssZUFBZSxDQUFDLGVBQWU7b0JBQ3BDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO29CQUNwRSxNQUFNO2FBQ1Q7WUFDRCxJQUFHLENBQUMsT0FBTztnQkFDUCxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7U0FDckc7S0FDSjtJQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tIFwiLi9hcHAtdXRpbFwiO1xyXG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tIFwiLi9mb3JtLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4vcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpb25hbENoZWNrKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sLGNvbmZpZzphbnkscmVsYXRpb25hbE9wZXJhdG9yTmFtZTpzdHJpbmcpe1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZyxjb250cm9sKTtcclxuICAgIGNvbnN0IG1hdGNoQ29udHJvbCA9IGNvbmZpZy5maWVsZE5hbWUgPyBBcHBsaWNhdGlvblV0aWwuZ2V0Rm9ybUNvbnRyb2woY29uZmlnLmZpZWxkTmFtZSxjb250cm9sKSA6IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0IG1hdGNoQ29udHJvbFZhbHVlID0gKG1hdGNoQ29udHJvbCkgPyBtYXRjaENvbnRyb2wudmFsdWUgOiBjb25maWcudmFsdWUgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy52YWx1ZSA6Jyc7XHJcbiAgICBpZiAoRm9ybVByb3ZpZGVyLlByb2Nlc3NSdWxlKGNvbnRyb2wsY29uZmlnKSkge1xyXG4gICAgICAgIGlmIChSZWdleFZhbGlkYXRvci5pc05vdEJsYW5rKGNvbnRyb2wudmFsdWUpICYmIFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsobWF0Y2hDb250cm9sVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHN3aXRjaChyZWxhdGlvbmFsT3BlcmF0b3JOYW1lKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgQW5ub3RhdGlvblR5cGVzLmdyZWF0ZXJUaGFuOlxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IHBhcnNlRmxvYXQoY29udHJvbC52YWx1ZSkgPiBwYXJzZUZsb2F0KG1hdGNoQ29udHJvbFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBbm5vdGF0aW9uVHlwZXMubGVzc1RoYW46XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gcGFyc2VGbG9hdChjb250cm9sLnZhbHVlKSA8IHBhcnNlRmxvYXQobWF0Y2hDb250cm9sVmFsdWUpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQW5ub3RhdGlvblR5cGVzLmdyZWF0ZXJUaGFuRXF1YWxUbzpcclxuICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBwYXJzZUZsb2F0KGNvbnRyb2wudmFsdWUpID49IHBhcnNlRmxvYXQobWF0Y2hDb250cm9sVmFsdWUpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQW5ub3RhdGlvblR5cGVzLmxlc3NUaGFuRXF1YWxUbzpcclxuICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBwYXJzZUZsb2F0KGNvbnRyb2wudmFsdWUpIDw9IHBhcnNlRmxvYXQobWF0Y2hDb250cm9sVmFsdWUpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighaXNWYWxpZClcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ocmVsYXRpb25hbE9wZXJhdG9yTmFtZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZSwgbWF0Y2hDb250cm9sVmFsdWVdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG59Il19