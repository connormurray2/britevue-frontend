import { Linq } from './linq';
import { ApplicationUtil } from './app-util';
import { RxFormGroup } from "../services/rx-form-group";
var FormProvider = /** @class */ (function () {
    function FormProvider() {
    }
    FormProvider.ProcessRule = function (control, config, isDynamicConfig) {
        if (isDynamicConfig === void 0) { isDynamicConfig = false; }
        var formGroupValue = ApplicationUtil.getParentObjectValue(control);
        var parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;
        var modelInstance = undefined;
        if (control.parent && control.parent instanceof RxFormGroup)
            modelInstance = control.parent.modelInstance;
        if (parentObject)
            this.updateFormControlValue(parentObject, control.parent.controls, control);
        else if (config.conditionalExpression)
            return false;
        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);
    };
    FormProvider.updateFormControlValue = function (parentObject, controls, control) {
        for (var controlName in parentObject) {
            if (!(parentObject[controlName] instanceof Object))
                if (controls[controlName] === control) {
                    parentObject[controlName] = control.value;
                    break;
                }
        }
    };
    return FormProvider;
}());
export { FormProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbInV0aWwvZm9ybS1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBR3ZEO0lBQUE7SUEwQkEsQ0FBQztJQXRCVSx3QkFBVyxHQUFsQixVQUFtQixPQUF1QixFQUFDLE1BQVUsRUFBQyxlQUErQjtRQUEvQixnQ0FBQSxFQUFBLHVCQUErQjtRQUNqRixJQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckUsSUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3JHLElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sWUFBWSxXQUFXO1lBQ3ZELGFBQWEsR0FBaUIsT0FBTyxDQUFDLE1BQU8sQ0FBQyxhQUFhLENBQUM7UUFDaEUsSUFBSSxZQUFZO1lBQ1osSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUMzRSxJQUFJLE1BQU0sQ0FBQyxxQkFBcUI7WUFDakMsT0FBTyxLQUFLLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFDLGFBQWEsRUFBQyxlQUFlLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRWMsbUNBQXNCLEdBQXJDLFVBQXNDLFlBQStCLEVBQUMsUUFBWSxFQUFDLE9BQXVCO1FBQ3RHLEtBQUksSUFBSSxXQUFXLElBQUksWUFBWSxFQUFDO1lBQ2hDLElBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsWUFBWSxNQUFNLENBQUM7Z0JBQzdDLElBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLE9BQU8sRUFBQztvQkFDakMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7b0JBQ3pDLE1BQU07aUJBQ1Q7U0FDUjtJQUNMLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUExQkQsSUEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpbnEgfSBmcm9tICcuL2xpbnEnO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tICcuL2FwcC11dGlsJztcclxuXHJcblxyXG5pbXBvcnQgeyBSeEZvcm1Hcm91cCB9IGZyb20gXCIuLi9zZXJ2aWNlcy9yeC1mb3JtLWdyb3VwXCJcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRm9ybVByb3ZpZGVye1xyXG5cclxuICAgXHJcblxyXG4gICAgc3RhdGljIFByb2Nlc3NSdWxlKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sLGNvbmZpZzphbnksaXNEeW5hbWljQ29uZmlnOmJvb2xlYW4gPSBmYWxzZSkgOiBib29sZWFuIHwge1trZXk6c3RyaW5nXTphbnl9IHtcclxuICAgICAgICBjb25zdCBmb3JtR3JvdXBWYWx1ZSA9IEFwcGxpY2F0aW9uVXRpbC5nZXRQYXJlbnRPYmplY3RWYWx1ZShjb250cm9sKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRPYmplY3QgPSAoY29udHJvbC5wYXJlbnQpID8gQXBwbGljYXRpb25VdGlsLmNsb25lVmFsdWUoY29udHJvbC5wYXJlbnQudmFsdWUpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBtb2RlbEluc3RhbmNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChjb250cm9sLnBhcmVudCAmJiBjb250cm9sLnBhcmVudCBpbnN0YW5jZW9mIFJ4Rm9ybUdyb3VwKVxyXG4gICAgICAgICAgICBtb2RlbEluc3RhbmNlID0gKDxSeEZvcm1Hcm91cD5jb250cm9sLnBhcmVudCkubW9kZWxJbnN0YW5jZTtcclxuICAgICAgICBpZiAocGFyZW50T2JqZWN0KVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvcm1Db250cm9sVmFsdWUocGFyZW50T2JqZWN0LCBjb250cm9sLnBhcmVudC5jb250cm9scywgY29udHJvbCk7XHJcbiAgICAgICAgZWxzZSBpZiAoY29uZmlnLmNvbmRpdGlvbmFsRXhwcmVzc2lvbilcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBMaW5xLmV4ZWN1dGUoZm9ybUdyb3VwVmFsdWUsIGNvbmZpZywgcGFyZW50T2JqZWN0LG1vZGVsSW5zdGFuY2UsaXNEeW5hbWljQ29uZmlnKTsgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgdXBkYXRlRm9ybUNvbnRyb2xWYWx1ZShwYXJlbnRPYmplY3Q6e1trZXk6c3RyaW5nXTphbnl9LGNvbnRyb2xzOmFueSxjb250cm9sOkFic3RyYWN0Q29udHJvbCl7XHJcbiAgICAgICAgZm9yKHZhciBjb250cm9sTmFtZSBpbiBwYXJlbnRPYmplY3Qpe1xyXG4gICAgICAgICAgICBpZighKHBhcmVudE9iamVjdFtjb250cm9sTmFtZV0gaW5zdGFuY2VvZiBPYmplY3QpKVxyXG4gICAgICAgICAgICAgICAgaWYoY29udHJvbHNbY29udHJvbE5hbWVdID09PSBjb250cm9sKXtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3RbY29udHJvbE5hbWVdPSBjb250cm9sLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=