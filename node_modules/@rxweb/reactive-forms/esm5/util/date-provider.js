import * as tslib_1 from "tslib";
import { ReactiveFormConfig } from "./reactive-form-config";
import { ApplicationUtil } from './app-util';
var ISO_DATE_REGEX = /^(\d{4}-\d{1,2}-\d{1,2})$/;
var DateProvider = /** @class */ (function () {
    function DateProvider() {
    }
    DateProvider.prototype.isDate = function (value) {
        return value instanceof Date && !isNaN(value.valueOf());
    };
    DateProvider.prototype.getRegex = function (dateFormat) {
        var regExp;
        switch (dateFormat) {
            case 'ymd':
                regExp = "^(?:[0-9]{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$";
                break;
            case 'dmy':
                regExp = "^(3[01]|[12][0-9]|0?[1-9])-(1[0-2]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$";
                break;
            case 'mdy':
                regExp = "^(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$";
                break;
        }
        return new RegExp(regExp);
    };
    DateProvider.prototype.regex = function () {
        var regExp;
        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator)
            regExp = this.getRegex(ReactiveFormConfig.json.internationalization.dateFormat);
        else
            regExp = (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat) ? this.getRegex(ReactiveFormConfig.json.baseConfig.dateFormat) : this.getRegex("mdy");
        return regExp;
    };
    DateProvider.prototype.getDate = function (value, isBaseFormat) {
        var _a, _b, _c;
        if (isBaseFormat === void 0) { isBaseFormat = false; }
        var year, month, day;
        if (!this.isDate(value)) {
            var seperator = void 0;
            var dateFormat = void 0;
            if (ISO_DATE_REGEX.test(value)) {
                seperator = "-";
                dateFormat = "ymd";
            }
            else {
                seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : "/";
                dateFormat = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : "mdy";
            }
            if (!isBaseFormat && ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {
                seperator = ReactiveFormConfig.json.internationalization.seperator;
                dateFormat = ReactiveFormConfig.json.internationalization.dateFormat;
            }
            switch (dateFormat) {
                case 'ymd':
                    _a = tslib_1.__read(value.split(seperator).map(function (val) { return +val; }), 3), year = _a[0], month = _a[1], day = _a[2];
                    break;
                case 'dmy':
                    _b = tslib_1.__read(value.split(seperator).map(function (val) { return +val; }), 3), day = _b[0], month = _b[1], year = _b[2];
                    break;
                case 'mdy':
                    _c = tslib_1.__read(value.split(seperator).map(function (val) { return +val; }), 3), month = _c[0], day = _c[1], year = _c[2];
                    break;
            }
            return new Date(year, month - 1, day);
        }
        else
            return value;
    };
    DateProvider.prototype.isValid = function (value) {
        if (typeof value == "string") {
            if (ISO_DATE_REGEX.test(value))
                return true;
            var seperator = '/';
            if (ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.seperator)
                seperator = ReactiveFormConfig.json.internationalization.seperator;
            value = value.replace(seperator, '-').replace(seperator, '-');
            return this.regex().test(value);
        }
        else
            return this.isDate(value);
    };
    DateProvider.prototype.getConfigDateValue = function (config) {
        var date = config.value;
        if (config.value && typeof config.value == "string") {
            date = this.getDate(config.value, true);
        }
        return date;
    };
    DateProvider.prototype.getCompareDate = function (config, control) {
        var date = this.getConfigDateValue(config);
        if (config.fieldName) {
            var checkControl = ApplicationUtil.getFormControl(config.fieldName, control);
            if (checkControl && checkControl.value) {
                date = this.getDate(checkControl.value);
            }
        }
        return date;
    };
    return DateProvider;
}());
export { DateProvider };
//# sourceMappingURL=data:application/json;base64,