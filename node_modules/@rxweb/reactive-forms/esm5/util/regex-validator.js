import * as tslib_1 from "tslib";
import { RegExRule } from "./regex-rules";
var ALPHABET = "alphabet";
var DIGIT = "digit";
var CONTAINS = "contains";
var LOWERCASE = "lowerCase";
var UPPERCASE = "upperCase";
var SPECIAL_CHARACTER = "specialCharacter";
var MIN_LENGTH = "minLength";
var MAX_LENGTH = "maxLength";
var RegexValidator = /** @class */ (function () {
    function RegexValidator() {
    }
    RegexValidator.isExits = function (value, regex) {
        return value.match(regex) != null;
    };
    RegexValidator.isValid = function (value, regex) {
        return regex.test(value);
    };
    RegexValidator.isNotBlank = function (value, isRemoveSpace) {
        if (isRemoveSpace === void 0) { isRemoveSpace = false; }
        return !isRemoveSpace ?
            (value === 0) || (value !== undefined && value !== null && value !== "") :
            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== "");
    };
    RegexValidator.isValidPassword = function (passwordValidation, value) {
        var e_1, _a;
        var isValid = false;
        var jObject = {};
        var keyName = "status";
        var objectProperties = Object.getOwnPropertyNames(passwordValidation);
        try {
            for (var objectProperties_1 = tslib_1.__values(objectProperties), objectProperties_1_1 = objectProperties_1.next(); !objectProperties_1_1.done; objectProperties_1_1 = objectProperties_1.next()) {
                var propertyName = objectProperties_1_1.value;
                switch (propertyName) {
                    case ALPHABET:
                        isValid = RegexValidator.isExits(value, RegExRule.alphaExits);
                        keyName = ALPHABET;
                        break;
                    case DIGIT:
                        isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);
                        keyName = DIGIT;
                        break;
                    case CONTAINS:
                        isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                        keyName = CONTAINS;
                        break;
                    case LOWERCASE:
                        isValid = RegexValidator.isValid(value, RegExRule.lowerCase);
                        keyName = LOWERCASE;
                        break;
                    case UPPERCASE:
                        isValid = RegexValidator.isValid(value, RegExRule.upperCase);
                        keyName = UPPERCASE;
                        break;
                    case SPECIAL_CHARACTER:
                        isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);
                        keyName = SPECIAL_CHARACTER;
                        break;
                    case MIN_LENGTH:
                        isValid = value.length >= passwordValidation[propertyName];
                        keyName = MIN_LENGTH;
                        break;
                    case MAX_LENGTH:
                        isValid = value.length <= passwordValidation[propertyName];
                        keyName = MAX_LENGTH;
                        break;
                }
                if (!isValid)
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (objectProperties_1_1 && !objectProperties_1_1.done && (_a = objectProperties_1.return)) _a.call(objectProperties_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { isValid: isValid, keyName: keyName };
    };
    RegexValidator.isZero = function (value) {
        return value == 0;
    };
    RegexValidator.commaRegex = function () {
        return new RegExp(",", "g");
    };
    return RegexValidator;
}());
export { RegexValidator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnZXgtdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9yZWdleC12YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsSUFBTSxRQUFRLEdBQVcsVUFBVSxDQUFDO0FBQ3BDLElBQU0sS0FBSyxHQUFXLE9BQU8sQ0FBQztBQUM5QixJQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFDcEMsSUFBTSxTQUFTLEdBQVcsV0FBVyxDQUFDO0FBQ3RDLElBQU0sU0FBUyxHQUFXLFdBQVcsQ0FBQztBQUN0QyxJQUFNLGlCQUFpQixHQUFXLGtCQUFrQixDQUFDO0FBQ3JELElBQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQztBQUN2QyxJQUFNLFVBQVUsR0FBVyxXQUFXLENBQUM7QUFHdkM7SUFBQTtJQWtFQSxDQUFDO0lBakVVLHNCQUFPLEdBQWQsVUFBZSxLQUFVLEVBQUUsS0FBYTtRQUNwQyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFDTSxzQkFBTyxHQUFkLFVBQWUsS0FBVSxFQUFFLEtBQWE7UUFDcEMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFSSx5QkFBVSxHQUFqQixVQUFrQixLQUFVLEVBQUUsYUFBOEI7UUFBOUIsOEJBQUEsRUFBQSxxQkFBOEI7UUFDMUQsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFFLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMzRixDQUFDO0lBQ1EsOEJBQWUsR0FBdEIsVUFBdUIsa0JBQXVCLEVBQUUsS0FBYTs7UUFDekQsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUEyQixFQUFFLENBQUM7UUFDekMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDO1FBQ3ZCLElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLENBQUE7O1lBQ3JFLEtBQXlCLElBQUEscUJBQUEsaUJBQUEsZ0JBQWdCLENBQUEsa0RBQUEsZ0ZBQUU7Z0JBQXRDLElBQUksWUFBWSw2QkFBQTtnQkFDakIsUUFBUSxZQUFZLEVBQUU7b0JBQ2xCLEtBQUssUUFBUTt3QkFDVCxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUM5RCxPQUFPLEdBQUcsUUFBUSxDQUFDO3dCQUNuQixNQUFNO29CQUNWLEtBQUssS0FBSzt3QkFDTixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUNoRSxPQUFPLEdBQUcsS0FBSyxDQUFDO3dCQUNoQixNQUFNO29CQUNWLEtBQUssUUFBUTt3QkFDVCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUM1RCxPQUFPLEdBQUcsUUFBUSxDQUFDO3dCQUNuQixNQUFNO29CQUNWLEtBQUssU0FBUzt3QkFDVixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUM3RCxPQUFPLEdBQUcsU0FBUyxDQUFDO3dCQUNwQixNQUFNO29CQUNWLEtBQUssU0FBUzt3QkFDVixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUM3RCxPQUFPLEdBQUcsU0FBUyxDQUFDO3dCQUNwQixNQUFNO29CQUNWLEtBQUssaUJBQWlCO3dCQUNsQixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7d0JBQ3BFLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQzt3QkFDNUIsTUFBTTtvQkFDVixLQUFLLFVBQVU7d0JBQ1gsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7d0JBQzNELE9BQU8sR0FBRyxVQUFVLENBQUM7d0JBQ3JCLE1BQU07b0JBQ1YsS0FBSyxVQUFVO3dCQUNYLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUMzRCxPQUFPLEdBQUcsVUFBVSxDQUFDO3dCQUNyQixNQUFNO2lCQUNiO2dCQUNELElBQUksQ0FBQyxPQUFPO29CQUNSLE1BQU07YUFDYjs7Ozs7Ozs7O1FBQ0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFBO0lBQ2pELENBQUM7SUFFTSxxQkFBTSxHQUFiLFVBQWMsS0FBVTtRQUNwQixPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVNLHlCQUFVLEdBQWpCO1FBQ0ksT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQWxFRCxJQWtFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhc3N3b3JkVmFsaWRhdGlvbiB9IGZyb20gXCIuLi9tb2RlbHMvcGFzc3dvcmQtdmFsaWRhdGlvbi5tb2RlbFwiO1xyXG5pbXBvcnQgeyBSZWdFeFJ1bGUgfSBmcm9tIFwiLi9yZWdleC1ydWxlc1wiO1xyXG5cclxuY29uc3QgQUxQSEFCRVQ6IHN0cmluZyA9IFwiYWxwaGFiZXRcIjtcclxuY29uc3QgRElHSVQ6IHN0cmluZyA9IFwiZGlnaXRcIjtcclxuY29uc3QgQ09OVEFJTlM6IHN0cmluZyA9IFwiY29udGFpbnNcIjtcclxuY29uc3QgTE9XRVJDQVNFOiBzdHJpbmcgPSBcImxvd2VyQ2FzZVwiO1xyXG5jb25zdCBVUFBFUkNBU0U6IHN0cmluZyA9IFwidXBwZXJDYXNlXCI7XHJcbmNvbnN0IFNQRUNJQUxfQ0hBUkFDVEVSOiBzdHJpbmcgPSBcInNwZWNpYWxDaGFyYWN0ZXJcIjtcclxuY29uc3QgTUlOX0xFTkdUSDogc3RyaW5nID0gXCJtaW5MZW5ndGhcIjtcclxuY29uc3QgTUFYX0xFTkdUSDogc3RyaW5nID0gXCJtYXhMZW5ndGhcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmVnZXhWYWxpZGF0b3Ige1xyXG4gICAgc3RhdGljIGlzRXhpdHModmFsdWU6IGFueSwgcmVnZXg6IFJlZ0V4cCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5tYXRjaChyZWdleCkgIT0gbnVsbDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpc1ZhbGlkKHZhbHVlOiBhbnksIHJlZ2V4OiBSZWdFeHApOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gcmVnZXgudGVzdCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gIHN0YXRpYyBpc05vdEJsYW5rKHZhbHVlOiBhbnksIGlzUmVtb3ZlU3BhY2U6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICFpc1JlbW92ZVNwYWNlID9cclxuICAgICAgKHZhbHVlID09PSAwKSB8fCAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gXCJcIikgOlxyXG4gICAgICAodmFsdWUgPT09IDApIHx8ICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIFN0cmluZyh2YWx1ZSkudHJpbSgpICE9PSBcIlwiKVxyXG4gIH1cclxuICAgIHN0YXRpYyBpc1ZhbGlkUGFzc3dvcmQocGFzc3dvcmRWYWxpZGF0aW9uOiBhbnksIHZhbHVlOiBzdHJpbmcpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuICAgICAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBqT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XHJcbiAgICAgICAgbGV0IGtleU5hbWUgPSBcInN0YXR1c1wiO1xyXG4gICAgICAgIGxldCBvYmplY3RQcm9wZXJ0aWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocGFzc3dvcmRWYWxpZGF0aW9uKVxyXG4gICAgICAgIGZvciAobGV0IHByb3BlcnR5TmFtZSBvZiBvYmplY3RQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFMUEhBQkVUOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc0V4aXRzKHZhbHVlLCBSZWdFeFJ1bGUuYWxwaGFFeGl0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IEFMUEhBQkVUO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBESUdJVDpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZSwgUmVnRXhSdWxlLmlzRGlnaXRFeGl0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IERJR0lUO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDT05UQUlOUzpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsdWUuaW5kZXhPZihwYXNzd29yZFZhbGlkYXRpb25bQ09OVEFJTlNdKSAhPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gQ09OVEFJTlM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExPV0VSQ0FTRTpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZSwgUmVnRXhSdWxlLmxvd2VyQ2FzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IExPV0VSQ0FTRTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVVBQRVJDQVNFOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlLCBSZWdFeFJ1bGUudXBwZXJDYXNlKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gVVBQRVJDQVNFO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBTUEVDSUFMX0NIQVJBQ1RFUjpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNFeGl0cyh2YWx1ZSwgUmVnRXhSdWxlLnNwZWNpYWxDaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBTUEVDSUFMX0NIQVJBQ1RFUjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTUlOX0xFTkdUSDpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsdWUubGVuZ3RoID49IHBhc3N3b3JkVmFsaWRhdGlvbltwcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBNSU5fTEVOR1RIO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNQVhfTEVOR1RIOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWx1ZS5sZW5ndGggPD0gcGFzc3dvcmRWYWxpZGF0aW9uW3Byb3BlcnR5TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IE1BWF9MRU5HVEg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGlzVmFsaWQsIGtleU5hbWU6IGtleU5hbWUgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc1plcm8odmFsdWU6IGFueSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb21tYVJlZ2V4KCk6IFJlZ0V4cCB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIsXCIsIFwiZ1wiKTtcclxuICAgIH1cclxufVxyXG4iXX0=