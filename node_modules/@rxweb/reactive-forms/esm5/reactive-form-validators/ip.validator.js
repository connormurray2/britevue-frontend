import { RegexValidator } from "../util/regex-validator";
import { RegExRule } from "../util/regex-rules";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
import { IpVersion } from '../enums';
import { checkIpV4, checkIpV6 } from '../util/ip-checker';
import { IP_CONFIG } from "../const/config-names.const";
export function ipValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, IP_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            var values = config.isCidr ? control.value.split('/') : [control.value];
            var isValid = (config.version == IpVersion.V4) ?
                checkIpV4(values[0]) :
                (config.version == IpVersion.V6) ?
                    checkIpV6(values[0]) :
                    (checkIpV4(values[0]) || checkIpV6(values[0]));
            if (config.isCidr && isValid) {
                isValid = (values.length > 1) ?
                    config.version == IpVersion.V4 ?
                        RegexValidator.isValid(values[1], RegExRule.cidrV4) :
                        config.version == IpVersion.V6 ?
                            RegexValidator.isValid(values[1], RegExRule.cidrV6) :
                            (RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6)) :
                    false;
            }
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXAudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2lwLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxXQUFxQjtJQUM3QyxPQUFPLFVBQUMsT0FBd0I7UUFDaEMsSUFBSSxNQUFNLEdBQUcsZUFBZSxDQUFDLFdBQVcsRUFBQyxPQUFPLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUQsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQy9DLElBQUksTUFBTSxHQUFhLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRixJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzlDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0QixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUM1QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLE1BQU0sQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUM5QixjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDckQsTUFBTSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzlCLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUNyRCxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsSCxLQUFLLENBQUM7YUFDVDtZQUNELElBQUksQ0FBQyxPQUFPO2dCQUNWLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCIuLi9hYnN0cmFjdC9hYnN0cmFjdC1jb250cm9sXCJcclxuaW1wb3J0IHsgVmFsaWRhdG9yRm4gfSBmcm9tICcuLi9tb2RlbHMvaW50ZXJmYWNlL3ZhbGlkYXRvci1mbidcclxuXHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IFJlZ0V4UnVsZSB9IGZyb20gXCIuLi91dGlsL3JlZ2V4LXJ1bGVzXCI7XHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4uL3V0aWwvb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IElwQ29uZmlnIH0gZnJvbSBcIi4uL21vZGVscy9jb25maWcvaXAtY29uZmlnXCI7XHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHsgVmFsaWRhdG9yVmFsdWVDaGVja2VyIH0gZnJvbSBcIi4uL3V0aWwvdmFsaWRhdG9yLXZhbHVlLWNoZWNrZXJcIjtcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBJcFZlcnNpb24gfSBmcm9tICcuLi9lbnVtcydcclxuaW1wb3J0IHsgY2hlY2tJcFY0LCBjaGVja0lwVjYgfSBmcm9tICcuLi91dGlsL2lwLWNoZWNrZXInXHJcbmltcG9ydCB7IElQX0NPTkZJRyB9IGZyb20gXCIuLi9jb25zdC9jb25maWctbmFtZXMuY29uc3RcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGlwVmFsaWRhdG9yKGNvbmZpZ01vZGVsOiBJcENvbmZpZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwgPT4ge1xyXG4gICAgbGV0IGNvbmZpZyA9IGdldENvbmZpZ09iamVjdChjb25maWdNb2RlbCxjb250cm9sLElQX0NPTkZJRyk7XHJcbiAgICBpZiAoVmFsaWRhdG9yVmFsdWVDaGVja2VyLnBhc3MoY29udHJvbCwgY29uZmlnKSkge1xyXG4gICAgICBsZXQgdmFsdWVzOiBzdHJpbmdbXSA9IGNvbmZpZy5pc0NpZHIgPyBjb250cm9sLnZhbHVlLnNwbGl0KCcvJykgOiBbY29udHJvbC52YWx1ZV07XHJcbiAgICAgIHZhciBpc1ZhbGlkID0gKGNvbmZpZy52ZXJzaW9uID09IElwVmVyc2lvbi5WNCkgP1xyXG4gICAgICAgIGNoZWNrSXBWNCh2YWx1ZXNbMF0pIDpcclxuICAgICAgICAoY29uZmlnLnZlcnNpb24gPT0gSXBWZXJzaW9uLlY2KSA/XHJcbiAgICAgICAgICBjaGVja0lwVjYodmFsdWVzWzBdKSA6XHJcbiAgICAgICAgICAoY2hlY2tJcFY0KHZhbHVlc1swXSkgfHwgY2hlY2tJcFY2KHZhbHVlc1swXSkpXHJcbiAgICAgIGlmIChjb25maWcuaXNDaWRyICYmIGlzVmFsaWQpIHtcclxuICAgICAgICBpc1ZhbGlkID0gKHZhbHVlcy5sZW5ndGggPiAxKSA/XHJcbiAgICAgICAgICBjb25maWcudmVyc2lvbiA9PSBJcFZlcnNpb24uVjQgP1xyXG4gICAgICAgICAgICBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlc1sxXSwgUmVnRXhSdWxlLmNpZHJWNCkgOlxyXG4gICAgICAgICAgICBjb25maWcudmVyc2lvbiA9PSBJcFZlcnNpb24uVjYgP1xyXG4gICAgICAgICAgICAgIFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWVzWzFdLCBSZWdFeFJ1bGUuY2lkclY2KSA6XHJcbiAgICAgICAgICAgICAgKFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWVzWzFdLCBSZWdFeFJ1bGUuY2lkclY0KSB8fCBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlc1sxXSwgUmVnRXhSdWxlLmNpZHJWNikpIDpcclxuICAgICAgICAgIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghaXNWYWxpZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKEFubm90YXRpb25UeXBlcy5pcCwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICB9XHJcbn1cclxuIl19