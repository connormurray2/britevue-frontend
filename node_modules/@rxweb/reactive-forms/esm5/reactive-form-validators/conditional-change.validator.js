import { ObjectMaker } from "../util/object-maker";
import { ApplicationUtil } from "../util/app-util";
export function conditionalChangeValidator(conditionalValidationProps) {
    var timeOuts = [];
    var oldValue = undefined;
    var setTimeOut = function (control) {
        var timeOut = setTimeout(function (t) {
            clearTimeout(timeOut);
            control.updateValueAndValidity();
        }, 100);
    };
    return function (control) {
        var value = control.value;
        if (control.parent && oldValue != value) {
            var rootFormGroup_1 = ApplicationUtil.getRootFormGroup(control);
            var parentFormGroup_1 = control.parent;
            oldValue = value;
            timeOuts = [];
            conditionalValidationProps.forEach(function (t) {
                var a = control;
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup_1.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(function (formGroup) {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl);
                            }
                        });
                }
                else {
                    var splitText_1 = t.split('.');
                    if (splitText_1.length > 1) {
                        var control = null;
                        t.split('.').forEach(function (name, index) { control = (index == 0) ? rootFormGroup_1.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup_1.controls[t];
                    }
                    if (control) {
                        setTimeOut(control);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbInJlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9jb25kaXRpb25hbC1jaGFuZ2UudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHbEQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLDBCQUFvQztJQUM3RSxJQUFJLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDNUIsSUFBSSxRQUFRLEdBQVEsU0FBUyxDQUFDO0lBQzlCLElBQUksVUFBVSxHQUFHLFVBQUMsT0FBd0I7UUFDeEMsSUFBSSxPQUFPLEdBQUcsVUFBVSxDQUFDLFVBQUEsQ0FBQztZQUN4QixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDbkMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ1QsQ0FBQyxDQUFBO0lBQ0MsT0FBTyxVQUFDLE9BQXdCO1FBQ2hDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDMUIsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLLEVBQUU7WUFDckMsSUFBTSxlQUFhLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hFLElBQU0saUJBQWUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBRXpDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDakIsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNkLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztnQkFDaEIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUN2QixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNoQyxJQUFJLFNBQVMsR0FBZ0IsZUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9ELElBQUksU0FBUzt3QkFDWCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7NEJBQ2xDLElBQUksZUFBZSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2xELElBQUksZUFBZSxFQUFFO2dDQUNuQixVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7NkJBQzdCO3dCQUNILENBQUMsQ0FBQyxDQUFBO2lCQUNMO3FCQUFNO29CQUVILElBQUksV0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzdCLElBQUcsV0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7d0JBQ3RCLElBQUksT0FBTyxHQUFPLElBQUksQ0FBQzt3QkFDdkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSyxJQUFPLE9BQU8sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMzSDt5QkFDRTt3QkFDSCxPQUFPLEdBQUcsaUJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3ZDO29CQUVELElBQUksT0FBTyxFQUFFO3dCQUNYLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDckI7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQTtTQUNIO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCIuLi9hYnN0cmFjdC9hYnN0cmFjdC1jb250cm9sXCJcclxuaW1wb3J0IHsgVmFsaWRhdG9yRm4gfSBmcm9tICcuLi9tb2RlbHMvaW50ZXJmYWNlL3ZhbGlkYXRvci1mbidcclxuaW1wb3J0IHsgUnhGb3JtQXJyYXkgfSBmcm9tIFwiLi4vc2VydmljZXMvcngtZm9ybS1hcnJheVwiXHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4uL3V0aWwvb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gXCIuLi91dGlsL2FwcC11dGlsXCJcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uZGl0aW9uYWxDaGFuZ2VWYWxpZGF0b3IoY29uZGl0aW9uYWxWYWxpZGF0aW9uUHJvcHM6IHN0cmluZ1tdKTogVmFsaWRhdG9yRm4ge1xyXG4gIHZhciB0aW1lT3V0czogbnVtYmVyW10gPSBbXTtcclxuICB2YXIgb2xkVmFsdWU6IGFueSA9IHVuZGVmaW5lZDtcclxuICB2YXIgc2V0VGltZU91dCA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgIHZhciB0aW1lT3V0ID0gc2V0VGltZW91dCh0ID0+IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVPdXQpO1xyXG4gICAgICBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcclxuICAgIH0sIDEwMClcclxuICB9XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsID0+IHtcclxuICAgIGxldCB2YWx1ZSA9IGNvbnRyb2wudmFsdWU7XHJcbiAgICBpZiAoY29udHJvbC5wYXJlbnQgJiYgb2xkVmFsdWUgIT0gdmFsdWUpIHtcclxuICAgICAgICBjb25zdCByb290Rm9ybUdyb3VwID0gQXBwbGljYXRpb25VdGlsLmdldFJvb3RGb3JtR3JvdXAoY29udHJvbCk7XHJcbiAgICAgICAgY29uc3QgcGFyZW50Rm9ybUdyb3VwID0gY29udHJvbC5wYXJlbnQ7XHJcblxyXG4gICAgICBvbGRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICB0aW1lT3V0cyA9IFtdO1xyXG4gICAgICBjb25kaXRpb25hbFZhbGlkYXRpb25Qcm9wcy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgIGxldCBhID0gY29udHJvbDtcclxuICAgICAgICBpZiAodC5pbmRleE9mKFwiW11cIikgIT0gLTEpIHtcclxuICAgICAgICAgICAgdmFyIHNwbGl0VGV4dCA9IHQuc3BsaXQoXCJbXVwiKTtcclxuICAgICAgICAgIHZhciBmb3JtQXJyYXkgPSA8UnhGb3JtQXJyYXk+cm9vdEZvcm1Hcm91cC5nZXQoW3NwbGl0VGV4dFswXV0pO1xyXG4gICAgICAgICAgaWYgKGZvcm1BcnJheSlcclxuICAgICAgICAgICAgZm9ybUFycmF5LmNvbnRyb2xzLmZvckVhY2goZm9ybUdyb3VwID0+IHtcclxuICAgICAgICAgICAgICB2YXIgYWJzdHJhY3RDb250cm9sID0gZm9ybUdyb3VwLmdldChzcGxpdFRleHRbMV0pO1xyXG4gICAgICAgICAgICAgIGlmIChhYnN0cmFjdENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVPdXQoYWJzdHJhY3RDb250cm9sKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBzcGxpdFRleHQgPSB0LnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIGlmKHNwbGl0VGV4dC5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgICB2YXIgY29udHJvbCA6YW55PSBudWxsO1xyXG4gICAgICAgICAgICAgIHQuc3BsaXQoJy4nKS5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4geyBjb250cm9sID0gKGluZGV4ID09IDApID8gcm9vdEZvcm1Hcm91cC5jb250cm9sc1tuYW1lXSA6IGNvbnRyb2wuY29udHJvbHNbbmFtZV07IH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb250cm9sID0gcGFyZW50Rm9ybUdyb3VwLmNvbnRyb2xzW3RdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoY29udHJvbCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lT3V0KGNvbnRyb2wpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==