import { RegexValidator } from "../util/regex-validator";
import { RegExRule } from "../util/regex-rules";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
export function cusipValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var controlValue = control.value.toUpperCase();
            var isValid = RegexValidator.isValid(controlValue, RegExRule.cusip);
            if (isValid) {
                var numericValues = controlValue.split("").map(function (value) {
                    var charCode = value.charCodeAt(0);
                    return charCode >= "A".charCodeAt(0) && charCode <= "Z".charCodeAt(0) ? charCode - "A".charCodeAt(0) + 10 : value;
                });
                var totalCount = 0;
                for (var i = 0; i < numericValues.length - 1; i++) {
                    var numericValue = parseInt(numericValues[i], 10);
                    if (i % 2 !== 0) {
                        numericValue *= 2;
                    }
                    if (numericValue > 9) {
                        numericValue -= 9;
                    }
                    totalCount += numericValue;
                }
                totalCount = (10 - (totalCount % 10)) % 10;
                isValid = totalCount == numericValues[numericValues.length - 1];
            }
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.cusip, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzaXAudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2N1c2lwLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFBO0FBRXZELE1BQU0sVUFBVSxjQUFjLENBQUMsV0FBdUI7SUFDbEQsT0FBTyxVQUFDLE9BQXdCO1FBQ2hDLElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQzdDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0MsSUFBSSxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ25FLElBQUksT0FBTyxFQUFFO2dCQUVULElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsS0FBSztvQkFDakQsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbkMsT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7Z0JBQ3JILENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztnQkFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMvQyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUNsRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNiLFlBQVksSUFBSSxDQUFDLENBQUM7cUJBQ3JCO29CQUNELElBQUksWUFBWSxHQUFHLENBQUMsRUFBRTt3QkFDbEIsWUFBWSxJQUFJLENBQUMsQ0FBQztxQkFDckI7b0JBQ0QsVUFBVSxJQUFJLFlBQVksQ0FBQztpQkFDOUI7Z0JBRUQsVUFBVSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUMzQyxPQUFPLEdBQUcsVUFBVSxJQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ25FO1lBQ0gsSUFBSSxDQUFDLE9BQU87Z0JBQ1YsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDN0U7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIi4uL2Fic3RyYWN0L2Fic3RyYWN0LWNvbnRyb2xcIlxyXG5pbXBvcnQgeyBWYWxpZGF0b3JGbiB9IGZyb20gJy4uL21vZGVscy9pbnRlcmZhY2UvdmFsaWRhdG9yLWZuJ1xyXG5cclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi4vdXRpbC9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgUmVnRXhSdWxlIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtcnVsZXNcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQmFzZUNvbmZpZyB9IGZyb20gXCIuLi9tb2RlbHMvY29uZmlnL2Jhc2UtY29uZmlnXCI7XHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHsgVmFsaWRhdG9yVmFsdWVDaGVja2VyIH0gZnJvbSBcIi4uL3V0aWwvdmFsaWRhdG9yLXZhbHVlLWNoZWNrZXJcIjtcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3VzaXBWYWxpZGF0b3IoY29uZmlnTW9kZWw6IEJhc2VDb25maWcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsID0+IHtcclxuICAgIGxldCBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnTW9kZWwsY29udHJvbCk7XHJcbiAgICBpZiAoVmFsaWRhdG9yVmFsdWVDaGVja2VyLnBhc3MoY29udHJvbCwgY29uZmlnKSkge1xyXG4gICAgICAgIHZhciBjb250cm9sVmFsdWUgPSBjb250cm9sLnZhbHVlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKGNvbnRyb2xWYWx1ZSwgUmVnRXhSdWxlLmN1c2lwKVxyXG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgbnVtZXJpY1ZhbHVlcyA9IGNvbnRyb2xWYWx1ZS5zcGxpdChcIlwiKS5tYXAoKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJDb2RlID49IFwiQVwiLmNoYXJDb2RlQXQoMCkgJiYgY2hhckNvZGUgPD0gXCJaXCIuY2hhckNvZGVBdCgwKSA/IGNoYXJDb2RlIC0gXCJBXCIuY2hhckNvZGVBdCgwKSArIDEwIDogdmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbENvdW50ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1lcmljVmFsdWVzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG51bWVyaWNWYWx1ZSA9IHBhcnNlSW50KG51bWVyaWNWYWx1ZXNbaV0sIDEwKTtcclxuICAgICAgICAgICAgICAgIGlmIChpICUgMiAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG51bWVyaWNWYWx1ZSAqPSAyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG51bWVyaWNWYWx1ZSA+IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICBudW1lcmljVmFsdWUgLT0gOTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvdGFsQ291bnQgKz0gbnVtZXJpY1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b3RhbENvdW50ID0gKDEwIC0gKHRvdGFsQ291bnQgJSAxMCkpICUgMTA7XHJcbiAgICAgICAgICAgIGlzVmFsaWQgPSB0b3RhbENvdW50ID09IG51bWVyaWNWYWx1ZXNbbnVtZXJpY1ZhbHVlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICB9ICAgICAgXHJcbiAgICAgIGlmICghaXNWYWxpZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKEFubm90YXRpb25UeXBlcy5jdXNpcCwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICB9XHJcbn1cclxuIl19