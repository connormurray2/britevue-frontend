import * as tslib_1 from "tslib";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
import { ARRAY_CONFIG } from "../const/config-names.const";
export function oneOfValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control, ARRAY_CONFIG);
        if (ValidatorValueChecker.passArrayValue(control, config)) {
            var testResult = false;
            var _loop_1 = function (value) {
                testResult = control.value.some(function (y) { return y == value; });
                if (testResult)
                    return "break";
            };
            try {
                for (var _b = tslib_1.__values(config.matchValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    var state_1 = _loop_1(value);
                    if (state_1 === "break")
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!testResult)
                return ObjectMaker.toJson(AnnotationTypes.oneOf, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25lT2YudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL29uZU9mLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE1BQU0sVUFBVSxjQUFjLENBQUMsV0FBd0I7SUFDbkQsT0FBTyxVQUFDLE9BQXdCOztRQUNoQyxJQUFJLE1BQU0sR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFDLE9BQU8sRUFBQyxZQUFZLENBQUMsQ0FBQztRQUMvRCxJQUFJLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDekQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO29DQUNkLEtBQUs7Z0JBQ1osVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxJQUFJLEtBQUssRUFBVixDQUFVLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxVQUFVO21DQUNOOzs7Z0JBSFYsS0FBa0IsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUEsZ0JBQUE7b0JBQS9CLElBQUksS0FBSyxXQUFBOzBDQUFMLEtBQUs7OztpQkFJYjs7Ozs7Ozs7O1lBQ0QsSUFBSSxDQUFDLFVBQVU7Z0JBQ2IsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDN0U7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIi4uL2Fic3RyYWN0L2Fic3RyYWN0LWNvbnRyb2xcIlxyXG5pbXBvcnQgeyBWYWxpZGF0b3JGbiB9IGZyb20gJy4uL21vZGVscy9pbnRlcmZhY2UvdmFsaWRhdG9yLWZuJ1xyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuLi91dGlsL29iamVjdC1tYWtlclwiO1xyXG5pbXBvcnQgeyBBcnJheUNvbmZpZyB9IGZyb20gXCIuLi9tb2RlbHMvY29uZmlnL2FycmF5LWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiLi4vY29yZS92YWxpZGF0b3Iuc3RhdGljXCI7XHJcbmltcG9ydCB7IFZhbGlkYXRvclZhbHVlQ2hlY2tlciB9IGZyb20gXCIuLi91dGlsL3ZhbGlkYXRvci12YWx1ZS1jaGVja2VyXCI7XHJcbmltcG9ydCB7Z2V0Q29uZmlnT2JqZWN0fSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgQVJSQVlfQ09ORklHIH0gZnJvbSBcIi4uL2NvbnN0L2NvbmZpZy1uYW1lcy5jb25zdFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gb25lT2ZWYWxpZGF0b3IoY29uZmlnTW9kZWw6IEFycmF5Q29uZmlnKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCA9PiB7XHJcbiAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZ01vZGVsLGNvbnRyb2wsQVJSQVlfQ09ORklHKTtcclxuICAgIGlmIChWYWxpZGF0b3JWYWx1ZUNoZWNrZXIucGFzc0FycmF5VmFsdWUoY29udHJvbCwgY29uZmlnKSkge1xyXG4gICAgICB2YXIgdGVzdFJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiBjb25maWcubWF0Y2hWYWx1ZXMpIHtcclxuICAgICAgICB0ZXN0UmVzdWx0ID0gY29udHJvbC52YWx1ZS5zb21lKCh5KSA9PiB5ID09IHZhbHVlKTtcclxuICAgICAgICBpZiAodGVzdFJlc3VsdClcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghdGVzdFJlc3VsdClcclxuICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKEFubm90YXRpb25UeXBlcy5vbmVPZiwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICB9XHJcbn1cclxuIl19