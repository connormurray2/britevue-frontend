import { RegexValidator } from "../util/regex-validator";
import { RegExRule } from "../util/regex-rules";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { FormProvider } from '../util/form-provider';
import { ApplicationUtil } from '../util/app-util';
import { getConfigObject } from "../util/config-provider";
export function factorValidator(configModel) {
    function positiveFactors(dividend, value) {
        var isPositive = false;
        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {
            if (dividend % index === 0) {
                if (index == value)
                    isPositive = true;
                if (dividend / index !== index)
                    if ((dividend / index) == value)
                        isPositive = true;
                if (isPositive)
                    break;
            }
        }
        return isPositive;
    }
    return function (control) {
        var config = getConfigObject(configModel, control);
        var dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
        var dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {
                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))
                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);
            }
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbInJlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9mYWN0b3IudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxNQUFNLFVBQVUsZUFBZSxDQUFDLFdBQXlCO0lBRXZELFNBQVMsZUFBZSxDQUFDLFFBQVEsRUFBRSxLQUFLO1FBQ3RDLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN2QixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUN4RSxJQUFJLFFBQVEsR0FBRyxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixJQUFJLEtBQUssSUFBSSxLQUFLO29CQUNoQixVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixJQUFJLFFBQVEsR0FBRyxLQUFLLEtBQUssS0FBSztvQkFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxLQUFLO3dCQUM3QixVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixJQUFJLFVBQVU7b0JBQ1osTUFBTTthQUNUO1NBQ0Y7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUMsT0FBTyxVQUFDLE9BQXdCO1FBQ2hDLElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsSUFBTSxhQUFhLEdBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7UUFDdkksSUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQzdGLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO2dCQUM1RCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEgsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDOUU7U0FDRjtRQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbFwiXHJcbmltcG9ydCB7IFZhbGlkYXRvckZuIH0gZnJvbSAnLi4vbW9kZWxzL2ludGVyZmFjZS92YWxpZGF0b3ItZm4nXHJcblxyXG5cclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi4vdXRpbC9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgUmVnRXhSdWxlIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtcnVsZXNcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgRmFjdG9yQ29uZmlnIH0gZnJvbSBcIi4uL21vZGVscy9jb25maWcvZmFjdG9yLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiLi4vY29yZS92YWxpZGF0b3Iuc3RhdGljXCI7XHJcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gJy4uL3V0aWwvZm9ybS1wcm92aWRlcic7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gJy4uL3V0aWwvYXBwLXV0aWwnO1xyXG5pbXBvcnQge2dldENvbmZpZ09iamVjdH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3JWYWxpZGF0b3IoY29uZmlnTW9kZWw6IEZhY3RvckNvbmZpZyk6IFZhbGlkYXRvckZuIHtcclxuXHJcbiAgZnVuY3Rpb24gcG9zaXRpdmVGYWN0b3JzKGRpdmlkZW5kLCB2YWx1ZSkge1xyXG4gICAgbGV0IGlzUG9zaXRpdmUgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPD0gTWF0aC5mbG9vcihNYXRoLnNxcnQoZGl2aWRlbmQpKTsgaW5kZXggKz0gMSkge1xyXG4gICAgICBpZiAoZGl2aWRlbmQgJSBpbmRleCA9PT0gMCkge1xyXG4gICAgICAgIGlmIChpbmRleCA9PSB2YWx1ZSlcclxuICAgICAgICAgIGlzUG9zaXRpdmUgPSB0cnVlO1xyXG4gICAgICAgIGlmIChkaXZpZGVuZCAvIGluZGV4ICE9PSBpbmRleClcclxuICAgICAgICAgIGlmICgoZGl2aWRlbmQgLyBpbmRleCkgPT0gdmFsdWUpXHJcbiAgICAgICAgICAgIGlzUG9zaXRpdmUgPSB0cnVlO1xyXG4gICAgICAgIGlmIChpc1Bvc2l0aXZlKVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpc1Bvc2l0aXZlO1xyXG4gIH1cclxuXHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsPT4ge1xyXG4gICAgbGV0IGNvbmZpZyA9IGdldENvbmZpZ09iamVjdChjb25maWdNb2RlbCxjb250cm9sKTtcclxuICAgIGNvbnN0IGRpdmlkZW5kRmllbGQ6IGFueSA9IChjb250cm9sLnBhcmVudCAmJiBjb25maWcuZmllbGROYW1lKSA/IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbChjb25maWcuZmllbGROYW1lLCBjb250cm9sKSA6IHVuZGVmaW5lZFxyXG4gICAgY29uc3QgZGl2aWRlbmQgPSAoY29uZmlnLmZpZWxkTmFtZSAmJiBkaXZpZGVuZEZpZWxkKSA/IGRpdmlkZW5kRmllbGQudmFsdWUgOiBjb25maWcuZGl2aWRlbmQ7XHJcbiAgICBpZiAoRm9ybVByb3ZpZGVyLlByb2Nlc3NSdWxlKGNvbnRyb2wsIGNvbmZpZykpIHtcclxuICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkgJiYgZGl2aWRlbmQgPiAwKSB7XHJcbiAgICAgICAgaWYgKCFSZWdleFZhbGlkYXRvci5pc1ZhbGlkKGNvbnRyb2wudmFsdWUsIFJlZ0V4UnVsZS5vbmx5RGlnaXQpIHx8ICFwb3NpdGl2ZUZhY3RvcnMoZGl2aWRlbmQsIHBhcnNlSW50KGNvbnRyb2wudmFsdWUpKSlcclxuICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24oQW5ub3RhdGlvblR5cGVzLmZhY3RvciwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG4gIH1cclxufVxyXG4iXX0=