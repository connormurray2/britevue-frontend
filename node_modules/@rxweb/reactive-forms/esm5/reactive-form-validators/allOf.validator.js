import * as tslib_1 from "tslib";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
import { ARRAY_CONFIG } from "../const/config-names.const";
export function allOfValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control, ARRAY_CONFIG);
        if (ValidatorValueChecker.passArrayValue(control, config)) {
            var testResult = false;
            var _loop_1 = function (value) {
                testResult = control.value.some(function (y) { return y == value; });
                if (!testResult)
                    return "break";
            };
            try {
                for (var _b = tslib_1.__values(config.matchValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    var state_1 = _loop_1(value);
                    if (state_1 === "break")
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!testResult)
                return ObjectMaker.toJson(AnnotationTypes.allOf, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsT2YudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2FsbE9mLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE1BQU0sVUFBVSxjQUFjLENBQUMsV0FBd0I7SUFDckQsT0FBTyxVQUFDLE9BQXdCOztRQUM5QixJQUFJLE1BQU0sR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFDLE9BQU8sRUFBQyxZQUFZLENBQUMsQ0FBQztRQUMvRCxJQUFJLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDekQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO29DQUNkLEtBQUs7Z0JBQ1osVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxJQUFJLEtBQUssRUFBVixDQUFVLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLFVBQVU7bUNBQ1A7OztnQkFIVixLQUFrQixJQUFBLEtBQUEsaUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQSxnQkFBQTtvQkFBL0IsSUFBSSxLQUFLLFdBQUE7MENBQUwsS0FBSzs7O2lCQUliOzs7Ozs7Ozs7WUFDRCxJQUFJLENBQUMsVUFBVTtnQkFDYixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUM3RTtRQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbFwiXHJcbmltcG9ydCB7IFZhbGlkYXRvckZuIH0gZnJvbSAnLi4vbW9kZWxzL2ludGVyZmFjZS92YWxpZGF0b3ItZm4nXHJcblxyXG5cclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQXJyYXlDb25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9hcnJheS1jb25maWdcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3JWYWx1ZUNoZWNrZXIgfSBmcm9tIFwiLi4vdXRpbC92YWxpZGF0b3ItdmFsdWUtY2hlY2tlclwiO1xyXG5pbXBvcnQgeyBnZXRDb25maWdPYmplY3QgfSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgQVJSQVlfQ09ORklHIH0gZnJvbSBcIi4uL2NvbnN0L2NvbmZpZy1uYW1lcy5jb25zdFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gYWxsT2ZWYWxpZGF0b3IoY29uZmlnTW9kZWw6IEFycmF5Q29uZmlnKTogVmFsaWRhdG9yRm4ge1xyXG4gIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwgPT4ge1xyXG4gICAgbGV0IGNvbmZpZyA9IGdldENvbmZpZ09iamVjdChjb25maWdNb2RlbCxjb250cm9sLEFSUkFZX0NPTkZJRyk7XHJcbiAgICBpZiAoVmFsaWRhdG9yVmFsdWVDaGVja2VyLnBhc3NBcnJheVZhbHVlKGNvbnRyb2wsIGNvbmZpZykpIHtcclxuICAgICAgdmFyIHRlc3RSZXN1bHQgPSBmYWxzZTtcclxuICAgICAgZm9yIChsZXQgdmFsdWUgb2YgY29uZmlnLm1hdGNoVmFsdWVzKSB7XHJcbiAgICAgICAgdGVzdFJlc3VsdCA9IGNvbnRyb2wudmFsdWUuc29tZSgoeSkgPT4geSA9PSB2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCF0ZXN0UmVzdWx0KVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0ZXN0UmVzdWx0KVxyXG4gICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24oQW5ub3RhdGlvblR5cGVzLmFsbE9mLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG4gIH1cclxufVxyXG4iXX0=