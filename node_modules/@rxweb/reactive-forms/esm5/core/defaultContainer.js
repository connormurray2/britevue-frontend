import * as tslib_1 from "tslib";
import { Linq } from "../util/linq";
import { AnnotationTypes } from "./validator.static";
import { PROPERTY, RXCODE, ARRAY_PROPERTY, OBJECT_PROPERTY } from "../const";
import { DECORATORS } from "../const/decorators.const";
export var defaultContainer = new (/** @class */ (function () {
    function class_1() {
        this.instances = [];
        this.modelIncrementCount = 0;
    }
    class_1.prototype.get = function (instanceFunc) {
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        return instance;
    };
    class_1.prototype.getInstance = function (target, parameterIndex, propertyKey, decoratorType) {
        var isPropertyKey = (propertyKey != undefined);
        var instanceFunc = !isPropertyKey ? target : target.constructor;
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (!instance)
            instance = this.addInstanceContainer(instanceFunc);
        return instance;
    };
    class_1.prototype.addPropsConfig = function (target, configs) {
        var e_1, _a, e_2, _b;
        var instanceContainer = this.instances.filter(function (instance) { return instance.instance == target; })[0];
        if (instanceContainer && instanceContainer.properties && configs) {
            try {
                for (var configs_1 = tslib_1.__values(configs), configs_1_1 = configs_1.next(); !configs_1_1.done; configs_1_1 = configs_1.next()) {
                    var config = configs_1_1.value;
                    var _loop_1 = function (prop) {
                        var propertyInfo = instanceContainer.properties.filter(function (t) { return t.name == prop && (t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY); })[0];
                        if (propertyInfo) {
                            this_1.addPropConfig(target, [propertyInfo], config);
                        }
                        else if (prop === ":all:")
                            this_1.addPropConfig(target, instanceContainer.properties.filter(function (t) { return t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY; }), config);
                    };
                    var this_1 = this;
                    try {
                        for (var _c = (e_2 = void 0, tslib_1.__values(config.propNames)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var prop = _d.value;
                            _loop_1(prop);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (configs_1_1 && !configs_1_1.done && (_a = configs_1.return)) _a.call(configs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (configs === undefined)
            this.addInstanceContainer(target);
    };
    class_1.prototype.addPropConfig = function (target, properties, config) {
        var e_3, _a;
        try {
            for (var properties_1 = tslib_1.__values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                var propertyInfo = properties_1_1.value;
                var excludeProp = false;
                if (config.excludePropNames)
                    excludeProp = config.excludePropNames.filter(function (t) { return t == propertyInfo.name; })[0] !== undefined;
                if (!excludeProp) {
                    if (config.validationConfig)
                        for (var typeName in config.validationConfig) {
                            this.init({ constructor: target }, 0, propertyInfo.name, typeName, config.validationConfig[typeName] === true ? undefined : config.validationConfig[typeName], false);
                        }
                    if (config.error)
                        this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.error, DECORATORS.error);
                    if (config.disable)
                        this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.disable, DECORATORS.disable);
                    if (config.elementClass)
                        this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.elementClass, DECORATORS.elementClass);
                    if (config.ignore)
                        propertyInfo.ignore = config.ignore;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    class_1.prototype.addSanitizer = function (target, parameterIndex, propertyKey, decoratorType, value) {
        var instance = this.getInstance(target, parameterIndex, propertyKey, decoratorType);
        if (instance && instance.sanitizers) {
            if (!instance.sanitizers[propertyKey])
                instance.sanitizers[propertyKey] = [];
            instance.sanitizers[propertyKey].push({ name: decoratorType, config: value });
        }
    };
    class_1.prototype.addDecoratorConfig = function (target, parameterIndex, propertyKey, config, decoratorType) {
        var isPropertyKey = (propertyKey != undefined);
        var instanceFunc = !isPropertyKey ? target : target.constructor;
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (!instance)
            instance = this.addInstanceContainer(instanceFunc);
        if (instance.nonValidationDecorators) {
            instance.nonValidationDecorators[decoratorType].conditionalExpressions[propertyKey] = config.conditionalExpression;
            var columns = Linq.expressionColumns(config.conditionalExpression, true);
            columns.forEach(function (column) {
                if (column.argumentIndex !== -1) {
                    var columnName = (!column.objectPropName) ? "" + column.propName + RXCODE + column.argumentIndex : column.objectPropName + "." + column.propName + RXCODE + column.argumentIndex;
                    if (!instance.nonValidationDecorators[decoratorType].changeDetection[columnName])
                        instance.nonValidationDecorators[decoratorType].changeDetection[columnName] = [];
                    var disabledColumns = instance.nonValidationDecorators[decoratorType].changeDetection[columnName];
                    if (disabledColumns.indexOf(columnName) === -1)
                        disabledColumns.push(propertyKey);
                }
                else {
                    if (!instance.nonValidationDecorators[decoratorType].controlProp[propertyKey])
                        instance.nonValidationDecorators[decoratorType].controlProp[propertyKey] = {};
                    instance.nonValidationDecorators[decoratorType].controlProp[propertyKey][column.propName.replace(";", "")] = true;
                }
            });
        }
    };
    class_1.prototype.init = function (target, parameterIndex, propertyKey, annotationType, config, isAsync) {
        var decoratorConfiguration = {
            propertyIndex: parameterIndex,
            propertyName: propertyKey,
            annotationType: annotationType,
            config: config,
            isAsync: isAsync
        };
        var isPropertyKey = (propertyKey != undefined);
        this.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
    };
    class_1.prototype.initPropertyObject = function (name, propertyType, entity, target, config) {
        var propertyInfo = {
            name: name,
            propertyType: propertyType,
            entity: entity,
            dataPropertyName: config ? config.name : undefined,
            entityProvider: config ? config.entityProvider : undefined
        };
        defaultContainer.addProperty(target.constructor, propertyInfo);
    };
    class_1.prototype.addInstanceContainer = function (instanceFunc) {
        var instanceContainer = {
            instance: instanceFunc,
            propertyAnnotations: [],
            properties: [],
            nonValidationDecorators: {
                disabled: {
                    conditionalExpressions: {},
                    changeDetection: {},
                    controlProp: {}
                }, error: {
                    conditionalExpressions: {},
                    changeDetection: {},
                    controlProp: {}
                }, elementClass: {
                    conditionalExpressions: {},
                    changeDetection: {},
                    controlProp: {}
                }
            },
            sanitizers: {}
        };
        this.instances.push(instanceContainer);
        return instanceContainer;
    };
    class_1.prototype.addProperty = function (instanceFunc, propertyInfo, isFromAnnotation) {
        if (isFromAnnotation === void 0) { isFromAnnotation = false; }
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (instance) {
            this.addPropertyInfo(instance, propertyInfo, !isFromAnnotation);
        }
        else {
            instance = this.addInstanceContainer(instanceFunc);
            this.addPropertyInfo(instance, propertyInfo);
        }
    };
    class_1.prototype.addPropertyInfo = function (instance, propertyInfo, isAddProperty) {
        if (isAddProperty === void 0) { isAddProperty = false; }
        var property = this.getProperty(instance, propertyInfo);
        if (!property && instance.properties)
            instance.properties.push(propertyInfo);
        else if (isAddProperty)
            this.updateProperty(property, propertyInfo);
    };
    class_1.prototype.addAnnotation = function (instanceFunc, decoratorConfiguration) {
        this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName }, true);
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (instance)
            instance.propertyAnnotations.push(decoratorConfiguration);
        else {
            instance = this.addInstanceContainer(instanceFunc);
            instance.propertyAnnotations.push(decoratorConfiguration);
        }
        if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpression) {
            var columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpression);
            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);
        }
        if (decoratorConfiguration.config && decoratorConfiguration.config.dynamicConfig) {
            var columns = Linq.dynamicConfigParser(decoratorConfiguration.config.dynamicConfig, decoratorConfiguration.propertyName);
            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);
        }
        this.setConditionalColumns(instance, decoratorConfiguration);
    };
    class_1.prototype.setConditionalColumns = function (instance, decoratorConfiguration) {
        var _this = this;
        if (instance && decoratorConfiguration.config) {
            if (decoratorConfiguration.annotationType == AnnotationTypes.and || decoratorConfiguration.annotationType == AnnotationTypes.or || decoratorConfiguration.annotationType == AnnotationTypes.not) {
                Object.keys(decoratorConfiguration.config.validation).forEach(function (t) {
                    if (typeof decoratorConfiguration.config.validation[t] !== "boolean")
                        _this.setLogicalConditional(instance, t, decoratorConfiguration.config.validation[t].fieldName, decoratorConfiguration.propertyName);
                });
            }
            else
                this.setLogicalConditional(instance, decoratorConfiguration.annotationType, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);
        }
    };
    class_1.prototype.setLogicalConditional = function (instance, annotationType, fieldName, propertyName) {
        if (instance && ((annotationType == AnnotationTypes.compare || annotationType == AnnotationTypes.greaterThan || annotationType == AnnotationTypes.greaterThanEqualTo || annotationType == AnnotationTypes.lessThan || annotationType == AnnotationTypes.lessThanEqualTo || annotationType == AnnotationTypes.different || annotationType == AnnotationTypes.factor || annotationType == AnnotationTypes.minTime || annotationType == AnnotationTypes.maxTime) || (annotationType == AnnotationTypes.creditCard && fieldName) || ((annotationType == AnnotationTypes.minDate || annotationType == AnnotationTypes.maxDate) && fieldName))) {
            this.setConditionalValueProp(instance, fieldName, propertyName);
        }
    };
    class_1.prototype.setConditionalValueProp = function (instance, propName, refPropName) {
        if (propName) {
            var splitProps = propName.split ? propName.split('.') : '';
            if (splitProps.length < 2) {
                if (!instance.conditionalValidationProps)
                    instance.conditionalValidationProps = {};
                if (!instance.conditionalValidationProps[propName])
                    instance.conditionalValidationProps[propName] = [];
                if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)
                    instance.conditionalValidationProps[propName].push(refPropName);
            }
            else
                this.addChangeValidation(instance, refPropName, [{ argumentIndex: 1, objectPropName: splitProps[0], propName: splitProps[1], referencePropName: refPropName }]);
        }
    };
    class_1.prototype.addChangeValidation = function (instance, propertyName, columns) {
        if (instance) {
            if (!instance.conditionalValidationProps)
                instance.conditionalValidationProps = {};
            columns.forEach(function (t) {
                if (t.propName && !t.objectPropName) {
                    if (instance && instance.conditionalValidationProps && !instance.conditionalValidationProps[t.propName])
                        instance.conditionalValidationProps[t.propName] = [];
                    if (instance && instance.conditionalValidationProps && instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)
                        instance.conditionalValidationProps[t.propName].push(propertyName);
                }
                else {
                    if (t.propName && t.objectPropName) {
                        if (!instance.conditionalObjectProps)
                            instance.conditionalObjectProps = [];
                        t.referencePropName = propertyName;
                        instance.conditionalObjectProps.push(t);
                    }
                }
            });
        }
    };
    class_1.prototype.clearInstance = function (instanceFunc) {
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (instance) {
            var indexOf = this.instances.indexOf(instance);
            this.instances.splice(indexOf, 1);
        }
    };
    class_1.prototype.getProperty = function (instance, propertyInfo) {
        return (instance && instance.properties) ? instance.properties.filter(function (t) { return t.name == propertyInfo.name; })[0] : undefined;
    };
    class_1.prototype.updateProperty = function (property, currentProperty) {
        property.dataPropertyName = currentProperty.dataPropertyName;
        property.defaultValue = currentProperty.defaultValue;
    };
    return class_1;
}()))();
//# sourceMappingURL=data:application/json;base64,