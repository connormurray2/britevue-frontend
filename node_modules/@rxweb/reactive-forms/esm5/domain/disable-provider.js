import * as tslib_1 from "tslib";
import { defaultContainer } from "../core/defaultContainer";
import { OBJECT_PROPERTY } from "../const/validator.const";
import { ApplicationUtil } from "../util/app-util";
import { RXCODE, MODEL_INSTANCE } from "../const/app.const";
import { instanceProvider } from "../util/instance-provider.function";
var DisableProvider = /** @class */ (function () {
    function DisableProvider(decoratorType, entityObject) {
        this.decoratorType = decoratorType;
        this.entityObject = entityObject;
    }
    DisableProvider.prototype.getFormGroupName = function (currentFormGroup) {
        var e_1, _a;
        var keyName = '';
        if (currentFormGroup.parent)
            try {
                for (var _b = tslib_1.__values(Object.keys(currentFormGroup.parent.controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var controlName = _c.value;
                    if (currentFormGroup.parent.controls[controlName] == currentFormGroup) {
                        keyName = controlName;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        return keyName;
    };
    DisableProvider.prototype.zeroArgumentProcess = function (control, columnName) {
        var disabledColumns = [];
        this.getDisabledColumns(control.parent, "" + columnName + RXCODE + "0", false).forEach(function (t) { return disabledColumns.push(t); });
        var path = this.topControlPath(control, columnName);
        var splitPath = path.split(".");
        if (splitPath.length > 1) {
            var rootFormGroup = ApplicationUtil.getRootFormGroup(control);
            this.getDisabledColumns(rootFormGroup, "" + path + RXCODE + "0", true).forEach(function (t) { return disabledColumns.push(t); });
            var controlPath = '';
            for (var i = 0; i < splitPath.length - 2; i++) {
                var controlName = splitPath[i];
                controlPath = "" + path.replace(controlName + ".", '') + RXCODE + "-0";
                if (rootFormGroup.controls[controlName]) {
                    this.getDisabledColumns(rootFormGroup.controls[controlName], controlPath, true, controlName).forEach(function (t) { return disabledColumns.push(t); });
                    rootFormGroup = rootFormGroup.controls[controlName];
                }
            }
        }
        return disabledColumns;
    };
    DisableProvider.prototype.getDisabledColumns = function (formGroup, columnName, isRoot, pathName) {
        if (pathName === void 0) { pathName = ""; }
        if (formGroup && formGroup[MODEL_INSTANCE]) {
            var instanceContainer = instanceProvider(formGroup[MODEL_INSTANCE].constructor, this.entityObject);
            return this.getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName);
        }
        return [];
    };
    DisableProvider.prototype.getChangeDetectionColumns = function (instanceContainer, columnName, isRoot, pathName) {
        var _this = this;
        if (pathName === void 0) { pathName = ""; }
        var conditionalDisableControls = [];
        var columns = instanceContainer.nonValidationDecorators[this.decoratorType].changeDetection[columnName];
        if (columns) {
            columns.forEach(function (t) {
                conditionalDisableControls.push({ controlPath: pathName ? pathName + "." + t : t, conditionalExpression: instanceContainer.nonValidationDecorators[_this.decoratorType].conditionalExpressions[t], isRoot: isRoot });
            });
        }
        return conditionalDisableControls;
    };
    DisableProvider.prototype.topControlPath = function (control, columnName) {
        if (control.parent) {
            var name_1 = this.getFormGroupName(control.parent);
            if (name_1) {
                columnName = name_1 + "." + columnName;
                return this.topControlPath(control.parent, columnName);
            }
        }
        return columnName;
    };
    DisableProvider.prototype.childControlDisabledExpression = function (formGroup, columnName, path) {
        var _this = this;
        if (path === void 0) { path = ""; }
        var disabledColumns = [];
        if (formGroup[MODEL_INSTANCE]) {
            var instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);
            if (instanceContainer && instanceContainer.properties) {
                this.getChangeDetectionColumns(instanceContainer, columnName, true, path).forEach(function (t) { return disabledColumns.push(t); });
                var props = instanceContainer.properties.filter(function (t) { return t.propertyType == OBJECT_PROPERTY; });
                props.forEach(function (t) {
                    if (formGroup.controls[t.name]) {
                        var columns = _this.getDisabledColumns(formGroup.controls[t.name], columnName, true, path ? path + "." + t.name : "" + t.name);
                        columns.forEach(function (x) { return disabledColumns.push(x); });
                        _this.childControlDisabledExpression(formGroup.controls[t.name], columnName, path ? path + "." + t.name : "" + t.name).forEach(function (y) { return disabledColumns.push(y); });
                    }
                });
            }
        }
        return disabledColumns;
    };
    DisableProvider.prototype.oneArgumentProcess = function (control, columnName) {
        var path = this.topControlPath(control, columnName);
        var rootFormGroup = ApplicationUtil.getRootFormGroup(control);
        var childColumns = this.childControlDisabledExpression(rootFormGroup, path);
        return childColumns;
    };
    return DisableProvider;
}());
export { DisableProvider };
//# sourceMappingURL=data:application/json;base64,