import * as tslib_1 from "tslib";
function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
export function clone(jsonObject) {
    var e_1, _a;
    var jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if (Array.isArray(jsonObject[columnName])) {
                jObject[columnName] = [];
                try {
                    for (var _b = (e_1 = void 0, tslib_1.__values(jsonObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var row = _c.value;
                        if (isObject(row))
                            jObject[columnName].push(clone(row));
                        else
                            jObject[columnName].push(row);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else if (typeof jsonObject[columnName] == "object")
                jObject[columnName] = clone(jsonObject[columnName]);
            else
                jObject[columnName] = jsonObject[columnName];
        }
        return jObject;
    }
    else
        return jsonObject;
}
export function merge(firstObject, secondObject) {
    var e_2, _a;
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            try {
                for (var _b = (e_2 = void 0, tslib_1.__values(secondObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    firstObject[columnName].push(clone(row));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else if (typeof firstObject[columnName] == "object")
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
export function isMatched(jsonObject, compareObject) {
    var isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object")
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybXMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9lbnRpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsU0FBUyxZQUFZLENBQUMsS0FBUztJQUMzQixPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUM7QUFDM0gsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEtBQVU7SUFDeEIsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssaUJBQWlCLENBQUM7QUFDdkUsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUMsVUFBa0M7O0lBQ3BELElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztJQUN0QixJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUMxQixLQUFLLElBQUksVUFBVSxJQUFJLFVBQVUsRUFBRTtZQUMvQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7O29CQUN6QixLQUFnQixJQUFBLG9CQUFBLGlCQUFBLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFBLGdCQUFBLDRCQUFFO3dCQUFuQyxJQUFJLEdBQUcsV0FBQTt3QkFDUixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUM7NEJBQ2IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTs7NEJBRXBDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7cUJBQ3BDOzs7Ozs7Ozs7YUFDSjtpQkFBTSxJQUFJLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVE7Z0JBQ2hELE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7O2dCQUVwRCxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQ25EO1FBQ0QsT0FBTyxPQUFPLENBQUM7S0FDbEI7O1FBRUcsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQztBQUVMLE1BQU0sVUFBVSxLQUFLLENBQUMsV0FBbUMsRUFBRSxZQUFvQzs7SUFDdkYsS0FBSyxJQUFJLFVBQVUsSUFBSSxZQUFZLEVBQUU7UUFDakMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO2dCQUN4QixXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDOztnQkFDakMsS0FBZ0IsSUFBQSxvQkFBQSxpQkFBQSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxnQkFBQTtvQkFBbkMsSUFBSSxHQUFHLFdBQUE7b0JBQ1IsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtpQkFBQTs7Ozs7Ozs7O1NBQy9DO2FBQU0sSUFBSSxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRO1lBQ2pELFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBOztZQUVsRixXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzFEO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDM0IsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsVUFBa0MsRUFBRSxhQUFxQztJQUMvRixJQUFJLFVBQVUsR0FBWSxLQUFLLENBQUM7SUFDaEMsS0FBSyxJQUFJLFVBQVUsSUFBSSxhQUFhLEVBQUU7UUFDOUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwRCxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNsRjtTQUNKO2FBQU0sSUFBSSxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRO1lBQ2hELFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDOztZQUUxRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLFVBQVU7WUFDVixNQUFNO0tBQ2pCO0lBQ0csT0FBTyxVQUFVLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzT2JqZWN0VHlwZSh2YWx1ZTphbnkpIHtcclxuICAgIHJldHVybiAhKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGpzb25PYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGxldCBqT2JqZWN0OiBhbnkgPSB7fTtcclxuICAgIGlmIChpc09iamVjdFR5cGUoanNvbk9iamVjdCkpIHtcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGpzb25PYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbk9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHJvdyBvZiBqc29uT2JqZWN0W2NvbHVtbk5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHJvdykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0ucHVzaChjbG9uZShyb3cpKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKHJvdylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YganNvbk9iamVjdFtjb2x1bW5OYW1lXSA9PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXSA9IGNsb25lKGpzb25PYmplY3RbY29sdW1uTmFtZV0pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0ganNvbk9iamVjdFtjb2x1bW5OYW1lXVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gak9iamVjdDtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4ganNvbk9iamVjdDtcclxuICAgIH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShmaXJzdE9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgc2Vjb25kT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBzZWNvbmRPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcm93IG9mIHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKGNsb25lKHJvdykpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IG1lcmdlKGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdLCBzZWNvbmRPYmplY3RbY29sdW1uTmFtZV0pXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmlyc3RPYmplY3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoZWQoanNvbk9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY29tcGFyZU9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSk6IGJvb2xlYW57XHJcbiAgICBsZXQgaXNNb2RpZmllZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBjb21wYXJlT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb25PYmplY3RbY29sdW1uTmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpzb25PYmplY3RbY29sdW1uTmFtZV0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpc01vZGlmaWVkID0gaXNNYXRjaGVkKGpzb25PYmplY3RbY29sdW1uTmFtZV1baV0sIGNvbXBhcmVPYmplY3RbY29sdW1uTmFtZV1baV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSBpc01hdGNoZWQoanNvbk9iamVjdFtjb2x1bW5OYW1lXSwgY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSAhKGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGlmIChpc01vZGlmaWVkKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzTW9kaWZpZWQ7XHJcbn1cclxuIl19