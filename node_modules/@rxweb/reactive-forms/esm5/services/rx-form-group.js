import * as tslib_1 from "tslib";
import { RxFormControl } from "./form-control";
import { clone } from './entity.service';
import { RegexValidator } from '../util/regex-validator';
import { ApplicationUtil } from '../util/app-util';
import { RxFormArray } from './rx-form-array';
import { FormDataProvider } from "../domain/form-data";
import { isResetControl, getNestedOptions } from '../util/reset-form';
import { defaultContainer } from '../core/defaultContainer';
import { AbstractControl } from "../abstract/abstract-control";
import { formGroupContainer } from "../core/form-group.state";
import { ReactiveFormConfig, ClientLibrary } from "../util/reactive-form-config";
var RxFormGroup = /** @class */ (function (_super) {
    tslib_1.__extends(RxFormGroup, _super);
    function RxFormGroup(model, entityObject, controls, formBuilderConfiguration) {
        var _this = _super.call(this, [], []) || this;
        _this.model = model;
        _this.entityObject = entityObject;
        _this.formBuilderConfiguration = formBuilderConfiguration;
        _this._submitted = false;
        _this._modified = {};
        _this._isModified = false;
        _this.props = {};
        _this.controls = controls;
        Object.keys(_this.controls).forEach(function (t) {
            if (ReactiveFormConfig.clientLib == ClientLibrary.Vue && _this.controls[t] instanceof RxFormControl)
                _this.defineProperty(t);
            _this.controls[t].parent = _this;
        });
        _this.baseObject = {};
        for (var column in _this.entityObject)
            _this.baseObject[column] = _this.entityObject[column];
        _this.formDataProvider = new FormDataProvider();
        return _this;
    }
    RxFormGroup.prototype.bindPrimaryKey = function (modelInstance, jObject) {
        var instanceContainer = defaultContainer.get(modelInstance.constructor);
        if (instanceContainer && instanceContainer.properties) {
            var primaryKeyProp = instanceContainer.properties.filter(function (x) { return x.isPrimaryKey; })[0];
            if (primaryKeyProp && this.modelInstance[primaryKeyProp.name])
                jObject[primaryKeyProp.name] = this.modelInstance[primaryKeyProp.name];
        }
    };
    Object.defineProperty(RxFormGroup.prototype, "modifiedValue", {
        get: function () {
            var jObject = {};
            if (Object.keys(this._modified).length > 0) {
                this.bindPrimaryKey(this.modelInstance, jObject);
                for (var columnName in this._modified) {
                    if (this.controls[columnName] instanceof RxFormGroup)
                        jObject[columnName] = this.controls[columnName].modifiedValue;
                    else if (this.controls[columnName] instanceof RxFormArray) {
                        var formArray = this.controls[columnName];
                        jObject[columnName] = [];
                        for (var i = 0; i < this._modified[columnName].length; i++) {
                            var modifiedValue = formArray.controls[i].modifiedValue;
                            if (Object.keys(modifiedValue).length > 0)
                                jObject[columnName].push(modifiedValue);
                        }
                        if (jObject[columnName].length == 0)
                            delete jObject[columnName];
                    }
                    else
                        jObject[columnName] = this._modified[columnName];
                }
                return jObject;
            }
            return this._modified;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    RxFormGroup.prototype.patch = function (controlName) {
        if (controlName) {
            var control = this.controls[controlName];
            this.processModified(controlName, control);
        }
        else {
            this.nestedFormsModification();
        }
        this._isModified = Object.keys(this._modified).length > 0;
        if (!this._isModified)
            this.nestedArrayIsModified();
        if (this.parent)
            this.parent.patch();
    };
    RxFormGroup.prototype.isDirty = function () {
        var e_1, _a;
        var isDirty = false;
        for (var name_1 in this.value) {
            var currentValue = this.modelInstance[name_1];
            if (!(this.controls[name_1] instanceof RxFormGroup || this.controls[name_1] instanceof RxFormArray)) {
                isDirty = ApplicationUtil.notEqualTo(this.baseObject[name_1], currentValue);
            }
            else if (this.controls[name_1] instanceof RxFormGroup)
                isDirty = this.controls[name_1].isDirty();
            else if (this.controls[name_1] instanceof RxFormArray) {
                try {
                    for (var _b = (e_1 = void 0, tslib_1.__values(this.controls[name_1].controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var formGroup = _c.value;
                        isDirty = formGroup.isDirty();
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (isDirty)
                break;
        }
        return isDirty;
    };
    ;
    RxFormGroup.prototype.resetForm = function (options) {
        for (var name_2 in this.controls) {
            if (isResetControl(name_2, this.controls[name_2], options)) {
                if (this.controls[name_2] instanceof RxFormGroup)
                    this.controls[name_2].resetForm(getNestedOptions(name_2, options));
                else if (this.controls[name_2] instanceof RxFormArray) {
                    this.controls[name_2].resetForm(options && options.value ? options.value[name_2] : undefined);
                }
                else {
                    if (options && options.value && RegexValidator.isNotBlank(options.value[name_2]))
                        this.controls[name_2].reset(options.value[name_2]);
                    else
                        this.controls[name_2].reset();
                }
            }
        }
    };
    RxFormGroup.prototype.commit = function () {
        for (var name_3 in this.controls) {
            if (this.controls[name_3] instanceof RxFormGroup)
                this.controls[name_3].commit();
            else if (this.controls[name_3] instanceof RxFormArray) {
                this.controls[name_3].commit();
            }
            else {
                this.controls[name_3].commit();
            }
        }
    };
    RxFormGroup.prototype.patchModelValue = function (value, options) {
        var e_2, _a;
        if (value) {
            for (var name_4 in this.controls) {
                if (this.controls[name_4] instanceof RxFormGroup && value[name_4])
                    this.controls[name_4].patchModelValue(value[name_4], options);
                else if (this.controls[name_4] instanceof RxFormArray && Array.isArray(value[name_4])) {
                    var index = 0;
                    try {
                        for (var _b = (e_2 = void 0, tslib_1.__values(this.controls[name_4].controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var formGroup = _c.value;
                            if (value[name_4][index])
                                formGroup.patchModelValue(value[name_4][index], options);
                            index = index + 1;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else if (value[name_4] !== undefined)
                    this.controls[name_4].patchValue(value[name_4], options);
            }
        }
    };
    RxFormGroup.prototype.getErrorSummary = function (onlyMessage) {
        var _this = this;
        var jObject = {};
        Object.keys(this.controls).forEach(function (columnName) {
            var e_3, _a;
            if (_this.controls[columnName] instanceof RxFormGroup) {
                var error = _this.controls[columnName].getErrorSummary(false);
                if (Object.keys(error).length > 0)
                    jObject[columnName] = error;
            }
            else if (_this.controls[columnName] instanceof RxFormArray) {
                var index = 0;
                try {
                    for (var _b = tslib_1.__values(_this.controls[columnName].controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var formGroup = _c.value;
                        var error = formGroup.getErrorSummary(false);
                        if (Object.keys(error).length > 0) {
                            error.index = index;
                            if (!jObject[columnName])
                                jObject[columnName] = [];
                            jObject[columnName].push(error);
                        }
                        index++;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            else {
                if (_this.controls[columnName].errors) {
                    var error = _this.controls[columnName].errors;
                    if (onlyMessage)
                        for (var validationName in error)
                            jObject[columnName] = error[validationName].message;
                    else
                        jObject[columnName] = error;
                }
            }
        });
        return jObject;
    };
    RxFormGroup.prototype.valueChangedSync = function () {
        var _this = this;
        Object.keys(this.controls).forEach(function (columnName) {
            var e_4, _a;
            if (!(_this.controls[columnName] instanceof RxFormArray) && !(_this.controls[columnName] instanceof RxFormGroup) && !(_this.entityObject[columnName] instanceof RxFormControl) && ApplicationUtil.notEqualTo(_this.controls[columnName].getControlValue(), _this.entityObject[columnName])) {
                _this.controls[columnName].setValue(_this.entityObject[columnName], { updateChanged: true });
            }
            else if ((_this.controls[columnName] instanceof RxFormArray)) {
                try {
                    for (var _b = tslib_1.__values(_this.controls[columnName].controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var formGroup = _c.value;
                        formGroup.valueChangedSync();
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            else if ((_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].valueChangedSync();
            }
        });
    };
    RxFormGroup.prototype.refreshDisable = function () {
        var _this = this;
        Object.keys(this.controls).forEach(function (columnName) {
            if (!(_this.controls[columnName] instanceof RxFormArray || _this.controls[columnName] instanceof RxFormArray) && !(_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].refresh();
            }
            else if ((_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].refreshDisable();
            }
        });
    };
    RxFormGroup.prototype.bindErrorMessages = function () {
        var _this = this;
        Object.keys(this.controls).forEach(function (columnName) {
            if (!(_this.controls[columnName] instanceof RxFormArray || _this.controls[columnName] instanceof RxFormArray) && !(_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].bindError();
            }
            else if ((_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].bindErrorMessages();
            }
        });
    };
    Object.defineProperty(RxFormGroup.prototype, "submitted", {
        get: function () {
            return this._submitted;
        },
        set: function (value) {
            var _this = this;
            this._submitted = value;
            Object.keys(this.controls).forEach(function (columnName) {
                var e_5, _a;
                if (_this.controls[columnName] instanceof RxFormArray) {
                    var formArray = _this.controls[columnName];
                    try {
                        for (var _b = tslib_1.__values(formArray.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var formGroup = _c.value;
                            formGroup.submitted = value;
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                else if (_this.controls[columnName] instanceof RxFormGroup) {
                    _this.controls[columnName].submitted = value;
                }
                else
                    _this.controls[columnName].bindError();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "value", {
        get: function () {
            return clone(this.entityObject);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "modelInstance", {
        get: function () {
            return this.entityObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "valid", {
        get: function () {
            return this.isValid();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "invalid", {
        get: function () {
            return !this.isValid();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "controlsError", {
        get: function () {
            return this.getErrorSummary(true);
        },
        enumerable: true,
        configurable: true
    });
    RxFormGroup.prototype.toFormData = function () {
        return this.formDataProvider.convertToFormData(this.value);
    };
    RxFormGroup.prototype.get = function (path) {
        if (path == null)
            return null;
        if (!(path instanceof Array)) {
            path = path.split(".");
        }
        if (path instanceof Array && (path.length === 0))
            return null;
        var control = null;
        for (var i = 0; i < path.length; i++) {
            var name_5 = path[i];
            if (this.controls.hasOwnProperty(name_5))
                control = this.controls[name_5];
            if (path.length > 1 && control instanceof RxFormGroup)
                control = control.get(path.slice(i + 1, path.length).join("."));
        }
        return control;
    };
    RxFormGroup.prototype.destroy = function () {
        formGroupContainer.destroy(this.path);
    };
    RxFormGroup.prototype.processModified = function (controlName, control) {
        if (control.isModified)
            this._modified[controlName] = control.value;
        else
            delete this._modified[controlName];
        this._isModified = Object.keys(this._modified).length > 0;
    };
    RxFormGroup.prototype.nestedArrayIsModified = function () {
        for (var controlName in this.controls) {
            if (this.controls[controlName] instanceof RxFormArray)
                this._isModified = this.controls[controlName].isModified;
            if (this._isModified)
                break;
        }
    };
    RxFormGroup.prototype.nestedFormsModification = function () {
        var e_6, _a;
        for (var controlName in this.controls) {
            if (this.controls[controlName] instanceof RxFormGroup)
                this.processModified(controlName, this.controls[controlName]);
            else if (this.controls[controlName] instanceof RxFormArray) {
                if (this.controls[controlName].isModified) {
                    var formGroups = this.controls[controlName].controls;
                    this._modified[controlName] = [];
                    try {
                        for (var formGroups_1 = (e_6 = void 0, tslib_1.__values(formGroups)), formGroups_1_1 = formGroups_1.next(); !formGroups_1_1.done; formGroups_1_1 = formGroups_1.next()) {
                            var formGroup = formGroups_1_1.value;
                            if (formGroup.isModified) {
                                if (!this._modified[controlName])
                                    this._modified[controlName] = [];
                                this._modified[controlName].push(formGroup.modifiedValue);
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (formGroups_1_1 && !formGroups_1_1.done && (_a = formGroups_1.return)) _a.call(formGroups_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    if (this._modified[controlName].length == 0)
                        delete this._modified[controlName];
                }
                else if (this._modified[controlName])
                    delete this._modified[controlName];
            }
        }
    };
    RxFormGroup.prototype.isValid = function () {
        var e_7, _a;
        var valid = true;
        var controls = Object.keys(this.controls);
        try {
            for (var controls_1 = tslib_1.__values(controls), controls_1_1 = controls_1.next(); !controls_1_1.done; controls_1_1 = controls_1.next()) {
                var controlName = controls_1_1.value;
                if (!this.controls[controlName].valid) {
                    valid = false;
                    break;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (controls_1_1 && !controls_1_1.done && (_a = controls_1.return)) _a.call(controls_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return valid;
    };
    RxFormGroup.prototype.defineProperty = function (name) {
        var _this = this;
        var value = this.controls[name].value;
        Object.defineProperty(this.props, name, {
            get: function () {
                return value;
            },
            set: function (v) {
                value = v;
                _this.controls[name].setValue(v);
            }
        });
    };
    return RxFormGroup;
}(AbstractControl));
export { RxFormGroup };
//# sourceMappingURL=data:application/json;base64,