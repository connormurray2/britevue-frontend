import { FormProvider } from "./form-provider";
import { clone } from "../services/entity.service";
import { CONFIG_REQUIRED_FIELDS } from "../const/config-required-fields.const";
export function getConfigObject(config, control, configName = '') {
    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};
}
function configProvider(control, config, configName) {
    if (config.dynamicConfig) {
        let currentConfig = FormProvider.ProcessRule(control, clone(config), true);
        if (typeof currentConfig != "boolean") {
            currentConfig.conditionalExpression = config.conditionalExpression;
            currentConfig.dynamicConfig = config.dynamicConfig;
            Object.keys(config).forEach(t => {
                if ((t != "conditionalExpression" && t != "dynamicConfig") || currentConfig[t] === undefined) {
                    currentConfig[t] = config[t];
                }
            });
            return currentConfig;
        }
        else
            return config;
    }
    return checkRequiredProps(config, configName);
}
function checkRequiredProps(config, configName) {
    let props = CONFIG_REQUIRED_FIELDS[configName];
    if (configName) {
        props.forEach(prop => {
            if (config[prop] === undefined)
                throw new Error(`Pass the property of '${prop}' with value in the ${configName}, otherwise it won't work.`);
        });
    }
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9jb25maWctcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFBO0FBQzVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUUvRSxNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQVcsRUFBQyxPQUFXLEVBQUMsYUFBb0IsRUFBRTtJQUMxRSxPQUFPLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDcEcsQ0FBQztBQUNELFNBQVMsY0FBYyxDQUFDLE9BQXVCLEVBQUMsTUFBVSxFQUFDLFVBQWlCO0lBQ3hFLElBQUcsTUFBTSxDQUFDLGFBQWEsRUFBQztRQUNwQixJQUFJLGFBQWEsR0FBTyxZQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUE7UUFDNUUsSUFBRyxPQUFPLGFBQWEsSUFBSSxTQUFTLEVBQUM7WUFDN0IsYUFBYSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztZQUNuRSxhQUFhLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLEVBQUU7Z0JBQzNCLElBQUcsQ0FBQyxDQUFDLElBQUksdUJBQXVCLElBQUksQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBTSxTQUFTLEVBQUM7b0JBQ3pGLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hDO1lBQ0wsQ0FBQyxDQUFDLENBQUE7WUFDTixPQUFPLGFBQWEsQ0FBQztTQUN4Qjs7WUFDRyxPQUFPLE1BQU0sQ0FBQztLQUNyQjtJQUNHLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFHRCxTQUFTLGtCQUFrQixDQUFDLE1BQVUsRUFBQyxVQUFpQjtJQUNwRCxJQUFJLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvQyxJQUFHLFVBQVUsRUFBQztRQUNWLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUztnQkFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSx1QkFBdUIsVUFBVSw0QkFBNEIsQ0FBQyxDQUFDO1FBQ3hILENBQUMsQ0FBQyxDQUFBO0tBQ0w7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGb3JtUHJvdmlkZXJ9IGZyb20gXCIuL2Zvcm0tcHJvdmlkZXJcIlxyXG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9lbnRpdHkuc2VydmljZVwiXHJcbmltcG9ydCB7IENPTkZJR19SRVFVSVJFRF9GSUVMRFMgfSBmcm9tIFwiLi4vY29uc3QvY29uZmlnLXJlcXVpcmVkLWZpZWxkcy5jb25zdFwiO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZzogYW55LGNvbnRyb2w6YW55LGNvbmZpZ05hbWU6c3RyaW5nID0gJycpOiBhbnkge1xyXG4gICAgcmV0dXJuIChjb25maWcgIT0gdW5kZWZpbmVkICYmIGNvbmZpZyAhPSB0cnVlKSA/IGNvbmZpZ1Byb3ZpZGVyKGNvbnRyb2wsY29uZmlnLGNvbmZpZ05hbWUpIDoge307XHJcbn1cclxuZnVuY3Rpb24gY29uZmlnUHJvdmlkZXIoY29udHJvbDpBYnN0cmFjdENvbnRyb2wsY29uZmlnOmFueSxjb25maWdOYW1lOnN0cmluZyk6YW55e1xyXG4gICAgaWYoY29uZmlnLmR5bmFtaWNDb25maWcpe1xyXG4gICAgICAgIGxldCBjdXJyZW50Q29uZmlnOmFueSA9IEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLGNsb25lKGNvbmZpZyksdHJ1ZSlcclxuICAgICAgICBpZih0eXBlb2YgY3VycmVudENvbmZpZyAhPSBcImJvb2xlYW5cIil7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29uZmlnLmNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IGNvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29uZmlnLmR5bmFtaWNDb25maWcgPSBjb25maWcuZHluYW1pY0NvbmZpZzsgXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2godD0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCh0ICE9IFwiY29uZGl0aW9uYWxFeHByZXNzaW9uXCIgJiYgdCAhPSBcImR5bmFtaWNDb25maWdcIikgfHwgY3VycmVudENvbmZpZ1t0XSAgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb25maWdbdF0gPSBjb25maWdbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkgICBcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb25maWc7XHJcbiAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICAgICAgICByZXR1cm4gY2hlY2tSZXF1aXJlZFByb3BzKGNvbmZpZyxjb25maWdOYW1lKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNoZWNrUmVxdWlyZWRQcm9wcyhjb25maWc6YW55LGNvbmZpZ05hbWU6c3RyaW5nKXtcclxuICAgIGxldCBwcm9wcyA9IENPTkZJR19SRVFVSVJFRF9GSUVMRFNbY29uZmlnTmFtZV07XHJcbiAgICBpZihjb25maWdOYW1lKXtcclxuICAgICAgICBwcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgICAgICBpZihjb25maWdbcHJvcF0gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhc3MgdGhlIHByb3BlcnR5IG9mICcke3Byb3B9JyB3aXRoIHZhbHVlIGluIHRoZSAke2NvbmZpZ05hbWV9LCBvdGhlcndpc2UgaXQgd29uJ3Qgd29yay5gKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbmZpZ1xyXG59Il19