import { defaultContainer } from '../core/defaultContainer';
import { clone, merge } from '../services/entity.service';
export function instanceProvider(instanceFunc, entityObject) {
    let instance = defaultContainer.get(instanceFunc);
    let prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;
    if (prototype.__proto__) {
        let isLoop = false;
        do {
            isLoop = prototype.__proto__.constructor != Object;
            if (isLoop) {
                let extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);
                instance = merge(clone(instance), clone(extendClassInstance));
                prototype = prototype.__proto__;
            }
        } while (isLoop);
    }
    return instance;
}
export function getInstance(model, objectArguments) {
    let classInstance = Object.create(model.prototype);
    try {
        model.apply(classInstance, objectArguments);
    }
    catch (ex) {
        ///resolution of issue https://github.com/rxweb/rxweb/issues/188
        classInstance = Reflect.construct(model, objectArguments);
    }
    return classInstance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UtcHJvdmlkZXIuZnVuY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybXMvIiwic291cmNlcyI6WyJ1dGlsL2luc3RhbmNlLXByb3ZpZGVyLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLFlBQWlCLEVBQUUsWUFBa0I7SUFDbEUsSUFBSSxRQUFRLEdBQVEsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELElBQUksU0FBUyxHQUFRLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDckcsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO1FBQ3JCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNuQixHQUFHO1lBQ0MsTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQztZQUNuRCxJQUFJLE1BQU0sRUFBRTtnQkFDUixJQUFJLG1CQUFtQixHQUFRLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNyRixRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFBO2dCQUM3RCxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQzthQUNuQztTQUNKLFFBQVEsTUFBTSxFQUFDO0tBRW5CO0lBQ0QsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUdELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBVSxFQUFFLGVBQXNCO0lBQzFELElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2xELElBQUc7UUFDQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUMvQztJQUFBLE9BQU0sRUFBRSxFQUFDO1FBQ04sZ0VBQWdFO1FBQ2hFLGFBQWEsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBQyxlQUFlLENBQUMsQ0FBQztLQUM1RDtJQUNELE9BQU8sYUFBYSxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnN0YW5jZUNvbnRhaW5lciB9IGZyb20gJy4uL2NvcmUvdmFsaWRhdG9yLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IGRlZmF1bHRDb250YWluZXIgfSBmcm9tICcuLi9jb3JlL2RlZmF1bHRDb250YWluZXInO1xyXG5pbXBvcnQgeyBjbG9uZSwgbWVyZ2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9lbnRpdHkuc2VydmljZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFuY2VQcm92aWRlcihpbnN0YW5jZUZ1bmM6IGFueSwgZW50aXR5T2JqZWN0PzogYW55KTogSW5zdGFuY2VDb250YWluZXIge1xyXG4gICAgbGV0IGluc3RhbmNlOiBhbnkgPSBkZWZhdWx0Q29udGFpbmVyLmdldChpbnN0YW5jZUZ1bmMpO1xyXG4gICAgbGV0IHByb3RvdHlwZTogYW55ID0gZW50aXR5T2JqZWN0ID8gZW50aXR5T2JqZWN0Ll9fcHJvdG9fXyA6IGdldEluc3RhbmNlKGluc3RhbmNlRnVuYywgW10pLl9fcHJvdG9fXztcclxuICAgIGlmIChwcm90b3R5cGUuX19wcm90b19fKSB7XHJcbiAgICAgICAgbGV0IGlzTG9vcCA9IGZhbHNlO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaXNMb29wID0gcHJvdG90eXBlLl9fcHJvdG9fXy5jb25zdHJ1Y3RvciAhPSBPYmplY3Q7XHJcbiAgICAgICAgICAgIGlmIChpc0xvb3ApIHtcclxuICAgICAgICAgICAgICAgIGxldCBleHRlbmRDbGFzc0luc3RhbmNlOiBhbnkgPSBkZWZhdWx0Q29udGFpbmVyLmdldChwcm90b3R5cGUuX19wcm90b19fLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbWVyZ2UoY2xvbmUoaW5zdGFuY2UpLCBjbG9uZShleHRlbmRDbGFzc0luc3RhbmNlKSlcclxuICAgICAgICAgICAgICAgIHByb3RvdHlwZSA9IHByb3RvdHlwZS5fX3Byb3RvX187XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IHdoaWxlIChpc0xvb3ApXHJcblxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluc3RhbmNlO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEluc3RhbmNlKG1vZGVsOiBhbnksIG9iamVjdEFyZ3VtZW50czogYW55W10pIHtcclxuICAgIGxldCBjbGFzc0luc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShtb2RlbC5wcm90b3R5cGUpXHJcbiAgICB0cnl7XHJcbiAgICAgICAgbW9kZWwuYXBwbHkoY2xhc3NJbnN0YW5jZSwgb2JqZWN0QXJndW1lbnRzKTtcclxuICAgIH1jYXRjaChleCl7XHJcbiAgICAgICAgLy8vcmVzb2x1dGlvbiBvZiBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vcnh3ZWIvcnh3ZWIvaXNzdWVzLzE4OFxyXG4gICAgICAgIGNsYXNzSW5zdGFuY2UgPSBSZWZsZWN0LmNvbnN0cnVjdChtb2RlbCxvYmplY3RBcmd1bWVudHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsYXNzSW5zdGFuY2U7XHJcbn0iXX0=