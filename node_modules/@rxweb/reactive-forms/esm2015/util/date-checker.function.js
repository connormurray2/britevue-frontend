import { DateProvider } from "./date-provider";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { ObjectMaker } from "./object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { OPERATORS } from "../const/operators.const";
import { getConfigObject } from "../util/config-provider";
function runCondition(leftValue, rightValue, operator) {
    let result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
export function dateChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value)) {
                let checkDate = dateProvider.getCompareDate(config, control);
                let currentControlValue = dateProvider.getDate(control.value);
                let isValid = operationType == AnnotationTypes.minDate ? runCondition(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}
export function validateDate(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value)) {
                return ObjectMaker.toJson(operationType, config, [control.value]);
            }
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9kYXRlLWNoZWNrZXIuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sMEJBQTBCLENBQUE7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRXhELFNBQVMsWUFBWSxDQUFDLFNBQWMsRUFBQyxVQUFlLEVBQUMsUUFBZTtJQUNoRSxJQUFJLE1BQU0sR0FBWSxLQUFLLENBQUM7SUFDNUIsUUFBTyxRQUFRLEVBQUM7UUFDWixLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDeEIsS0FBSyxTQUFTLENBQUMsV0FBVztZQUN6QixNQUFNLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQztZQUNqQyxNQUFNO1FBQ04sS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssU0FBUyxDQUFDLGtCQUFrQjtZQUNoQyxNQUFNLEdBQUcsU0FBUyxJQUFJLFVBQVUsQ0FBQztZQUNsQyxNQUFNO0tBQ1Q7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUF3QixFQUFDLE1BQVUsRUFBQyxhQUFvQjtJQUNoRixNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ3BDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUMsTUFBTSxDQUFDLEVBQUU7UUFDNUMsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzRSxJQUFJLFNBQVMsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBQyxPQUFPLENBQUMsQ0FBQztnQkFDNUQsSUFBSSxtQkFBbUIsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxPQUFPLEdBQUcsYUFBYSxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBQyxTQUFTLEVBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQSxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBQyxtQkFBbUIsRUFBQyxNQUFNLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQTtnQkFDOU8sSUFBSSxDQUFDLE9BQU87b0JBQ1IsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTthQUN4RTs7Z0JBQ0csT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtTQUN4RTtLQUNKO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBd0IsRUFBQyxNQUFVLEVBQUMsYUFBb0I7SUFDakYsTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsSUFBSSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUNwQyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzdFLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7YUFDeEU7U0FDSjtLQUNKO0lBQ0csT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVQcm92aWRlciB9IGZyb20gXCIuL2RhdGUtcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIH0gZnJvbSBcIi4vZm9ybS1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBSZWdleFZhbGlkYXRvciB9IGZyb20gXCIuL3JlZ2V4LXZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuL29iamVjdC1tYWtlclwiO1xyXG5pbXBvcnQgeyBBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiLi4vY29yZS92YWxpZGF0b3Iuc3RhdGljXCI7XHJcbmltcG9ydCB7T1BFUkFUT1JTfSBmcm9tIFwiLi4vY29uc3Qvb3BlcmF0b3JzLmNvbnN0XCJcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbFwiO1xyXG5mdW5jdGlvbiBydW5Db25kaXRpb24obGVmdFZhbHVlOkRhdGUscmlnaHRWYWx1ZTpEYXRlLG9wZXJhdG9yOnN0cmluZyk6Ym9vbGVhbntcclxuICAgIGxldCByZXN1bHQ6Ym9vbGVhbiAgPSBmYWxzZTtcclxuICAgIHN3aXRjaChvcGVyYXRvcil7XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMubGVzc1RoYW46XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMuZ3JlYXRlclRoYW46XHJcbiAgICAgICAgIHJlc3VsdCA9IGxlZnRWYWx1ZSA+IHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMubGVzc1RoYW5FcXVhbFRvOlxyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuRXF1YWxUbzpcclxuICAgICAgICAgcmVzdWx0ID0gbGVmdFZhbHVlID49IHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZUNoZWNrZXIoY29udHJvbDogQWJzdHJhY3RDb250cm9sLGNvbmZpZzphbnksb3BlcmF0aW9uVHlwZTpzdHJpbmcpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCB7XHJcbiAgICBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnLGNvbnRyb2wpO1xyXG4gICAgdmFyIGRhdGVQcm92aWRlciA9IG5ldyBEYXRlUHJvdmlkZXIoKTtcclxuICAgICAgaWYgKEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLGNvbmZpZykpIHtcclxuICAgICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0ZVByb3ZpZGVyLmlzRGF0ZShjb250cm9sLnZhbHVlKSB8fCBkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrRGF0ZSA9IGRhdGVQcm92aWRlci5nZXRDb21wYXJlRGF0ZShjb25maWcsY29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENvbnRyb2xWYWx1ZSA9IGRhdGVQcm92aWRlci5nZXREYXRlKGNvbnRyb2wudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzVmFsaWQgPSBvcGVyYXRpb25UeXBlID09IEFubm90YXRpb25UeXBlcy5taW5EYXRlID8gcnVuQ29uZGl0aW9uKGN1cnJlbnRDb250cm9sVmFsdWUsY2hlY2tEYXRlLGNvbmZpZy5vcGVyYXRvciB8fCBPUEVSQVRPUlMuZ3JlYXRlclRoYW5FcXVhbFRvKTogcnVuQ29uZGl0aW9uKGNoZWNrRGF0ZSxjdXJyZW50Q29udHJvbFZhbHVlLGNvbmZpZy5vcGVyYXRvciB8fCBPUEVSQVRPUlMubGVzc1RoYW5FcXVhbFRvKVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ob3BlcmF0aW9uVHlwZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pXHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihvcGVyYXRpb25UeXBlLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxjb25maWc6YW55LG9wZXJhdGlvblR5cGU6c3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwge1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZyxjb250cm9sKTtcclxuICAgIHZhciBkYXRlUHJvdmlkZXIgPSBuZXcgRGF0ZVByb3ZpZGVyKCk7XHJcbiAgICAgIGlmIChGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRlUHJvdmlkZXIuaXNEYXRlKGNvbnRyb2wudmFsdWUpICYmICFkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihvcGVyYXRpb25UeXBlLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbn0iXX0=