import { ApplicationUtil } from './app-util';
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { ObjectMaker } from "./object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { OPERATORS } from "../const/operators.const";
import { getConfigObject } from "../util/config-provider";
import { RegExRule } from "./regex-rules";
function runCondition(leftValue, rightValue, operator) {
    let result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
function isValid(control, config) {
    return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);
}
function getTime(value) {
    let splitTime = (value) ? value.split(':') : [];
    return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();
}
export function timeChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (isValid(control, config)) {
                let crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
                let crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);
                let currentControlValue = getTime(control.value);
                let isValid = operationType == AnnotationTypes.minTime ? runCondition(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC90aW1lLWNoZWNrZXIuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUM1QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDBCQUEwQixDQUFBO0FBQ2xELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzFDLFNBQVMsWUFBWSxDQUFDLFNBQWlCLEVBQUUsVUFBa0IsRUFBRSxRQUFnQjtJQUN6RSxJQUFJLE1BQU0sR0FBWSxLQUFLLENBQUM7SUFDNUIsUUFBUSxRQUFRLEVBQUU7UUFDZCxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDeEIsS0FBSyxTQUFTLENBQUMsV0FBVztZQUN0QixNQUFNLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQztZQUNoQyxNQUFNO1FBQ1YsS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssU0FBUyxDQUFDLGtCQUFrQjtZQUM3QixNQUFNLEdBQUcsU0FBUyxJQUFJLFVBQVUsQ0FBQztZQUNqQyxNQUFNO0tBQ2I7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsT0FBd0IsRUFBRSxNQUFXO0lBQ2xELE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxSixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsS0FBVTtJQUN2QixJQUFJLFNBQVMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDaEQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzdJLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQXdCLEVBQUMsTUFBVSxFQUFDLGFBQW9CO0lBQ2hGLE1BQU0sR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUMsTUFBTSxDQUFDLEVBQUU7UUFDNUMsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQ2hILElBQUksaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbkcsSUFBSSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLE9BQU8sR0FBRyxhQUFhLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQTtnQkFDblEsSUFBSSxDQUFDLE9BQU87b0JBQ1IsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTthQUN4RTs7Z0JBQ0csT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtTQUN4RTtLQUNKO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gJy4vYXBwLXV0aWwnXHJcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gXCIuL2Zvcm0tcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQge09QRVJBVE9SU30gZnJvbSBcIi4uL2NvbnN0L29wZXJhdG9ycy5jb25zdFwiXHJcbmltcG9ydCB7Z2V0Q29uZmlnT2JqZWN0fSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgUmVnRXhSdWxlIH0gZnJvbSBcIi4vcmVnZXgtcnVsZXNcIjtcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnLi4vYWJzdHJhY3QvYWJzdHJhY3QtY29udHJvbCc7XHJcblxyXG5mdW5jdGlvbiBydW5Db25kaXRpb24obGVmdFZhbHVlOiBudW1iZXIsIHJpZ2h0VmFsdWU6IG51bWJlciwgb3BlcmF0b3I6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgc3dpdGNoIChvcGVyYXRvcikge1xyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmxlc3NUaGFuOlxyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuOlxyXG4gICAgICAgICAgICByZXN1bHQgPSBsZWZ0VmFsdWUgPiByaWdodFZhbHVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5sZXNzVGhhbkVxdWFsVG86XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMuZ3JlYXRlclRoYW5FcXVhbFRvOlxyXG4gICAgICAgICAgICByZXN1bHQgPSBsZWZ0VmFsdWUgPj0gcmlnaHRWYWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgY29uZmlnOiBhbnkpIHtcclxuICAgIHJldHVybiBjb25maWcuYWxsb3dTZWNvbmRzID8gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZChjb250cm9sLnZhbHVlLCBSZWdFeFJ1bGUudGltZVdpdGhTZWNvbmRzKSA6IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQoY29udHJvbC52YWx1ZSwgUmVnRXhSdWxlLnRpbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUaW1lKHZhbHVlOiBhbnkpIHtcclxuICAgIGxldCBzcGxpdFRpbWUgPSAodmFsdWUpID8gdmFsdWUuc3BsaXQoJzonKSA6IFtdO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKDE5NzAsIDAsIDEsIHNwbGl0VGltZVswXSA/IHNwbGl0VGltZVswXSA6IDAsIHNwbGl0VGltZVsxXSA/IHNwbGl0VGltZVsxXSA6IDAsIHNwbGl0VGltZVsyXSA/IHNwbGl0VGltZVsyXSA6IDApLmdldFRpbWUoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVDaGVja2VyKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxjb25maWc6YW55LG9wZXJhdGlvblR5cGU6c3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8bnVsbCB7XHJcbiAgICBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnLCBjb250cm9sKTtcclxuICAgICAgaWYgKEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLGNvbmZpZykpIHtcclxuICAgICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNWYWxpZChjb250cm9sLGNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjcm9zc0Zvcm1Db250cm9sID0gY29uZmlnLmZpZWxkTmFtZSA/IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbChjb25maWcuZmllbGROYW1lLCBjb250cm9sKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGxldCBjcm9zc0NvbnRyb2xWYWx1ZSA9IGNyb3NzRm9ybUNvbnRyb2wgPyBnZXRUaW1lKGNyb3NzRm9ybUNvbnRyb2wudmFsdWUpIDogZ2V0VGltZShjb25maWcudmFsdWUpOyAgXHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENvbnRyb2xWYWx1ZSA9IGdldFRpbWUoY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNWYWxpZCA9IG9wZXJhdGlvblR5cGUgPT0gQW5ub3RhdGlvblR5cGVzLm1pblRpbWUgPyBydW5Db25kaXRpb24oY3VycmVudENvbnRyb2xWYWx1ZSwgY3Jvc3NDb250cm9sVmFsdWUsIGNvbmZpZy5vcGVyYXRvciB8fCBPUEVSQVRPUlMuZ3JlYXRlclRoYW5FcXVhbFRvKSA6IHJ1bkNvbmRpdGlvbihjcm9zc0NvbnRyb2xWYWx1ZSwgY3VycmVudENvbnRyb2xWYWx1ZSwgY29uZmlnLm9wZXJhdG9yIHx8IE9QRVJBVE9SUy5sZXNzVGhhbkVxdWFsVG8pXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihvcGVyYXRpb25UeXBlLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSlcclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKG9wZXJhdGlvblR5cGUsIGNvbmZpZywgW2NvbnRyb2wudmFsdWVdKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbn0iXX0=