import { THIS } from "../const/app.const";
export class Linq {
    static functionCreator(expression) {
        var functionSetter = [];
        var match = expression.match(/^\s*\(?\s*([^)]*)\s*\)?\s*=>(.*)/);
        var splitSelect = match[2].split(",");
        for (var i = 0; i < splitSelect.length; i++) {
            var equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);
            if (equalToOperator !== null) {
                functionSetter = new Function(match[1], "return " + equalToOperator.input);
            }
            else {
                equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*=(.*)/);
                if (equalToOperator === null) {
                    functionSetter = new Function(match[1], "return " + splitSelect.input);
                }
                else {
                    functionSetter = new Function(match[1], "return " + equalToOperator.input);
                }
            }
        }
        if (splitSelect.length == 0)
            functionSetter = { accessFunction: new Function(match[1], "return " + match[2]) };
        return functionSetter;
    }
    static execute(jObject, config, parentObject, modelInstance, isDynamicConfig) {
        let expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;
        let lastParam = isDynamicConfig ? config : modelInstance;
        if (parentObject && typeof expressionFunction == "string")
            expressionFunction = Linq.functionCreator(expressionFunction);
        if (parentObject && expressionFunction)
            return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);
        return true;
    }
    static getConditionPath(texts) {
        let path = "";
        for (var i = 1; i < texts.length; i++)
            path += (texts.length - 1) == i ? texts[i].trim() : `${texts[i].trim()}.`;
        return path;
    }
    static expressionParser(expression, isNonValidationExpression) {
        let splitExpressions = [];
        let columns = [];
        let expressionString = expression.toString();
        let expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
        if (expressionArguments.length > 0) {
            let splitTexts = [];
            expressionString.replace(/\s/g, '').replace(new RegExp(/{|}/, "g"), "").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(t => {
                let texts = t.replace(/\(|\)/g, "").split("||");
                for (let text of texts)
                    splitTexts.push(text);
            });
            splitTexts.forEach((t) => {
                expressionArguments.forEach((x, i) => {
                    t = t.trim();
                    if (t.startsWith(x + '.')) {
                        var splitText = t.split('.');
                        if (splitText.length == 2 || (splitText.length >= 2 && isNonValidationExpression))
                            if (!isNonValidationExpression)
                                columns.push({ propName: splitText[1].trim(), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });
                            else
                                columns.push({ propName: this.getConditionPath(splitText), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });
                        else {
                            var arrayProp = splitText[1].split('[');
                            let jObject = {
                                propName: splitText[splitText.length - 1].trim(),
                                objectPropName: arrayProp[0],
                                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined,
                                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i
                            };
                            columns.push(jObject);
                        }
                    }
                });
            });
        }
        return columns;
    }
    static extractArguments(splitTexts) {
        let expressionArguments = [THIS];
        if (splitTexts && splitTexts[0])
            splitTexts[0].split(",").forEach(t => expressionArguments.push(t.trim().replace("(", "").replace(")", "")));
        return expressionArguments;
    }
    static expressionColumns(expression, isNonValidationExpression = false) {
        var columns = [];
        let splitExpressions = [];
        if (typeof expression == "string") {
            expression.split("=>")[1].split(" && ").forEach(t => {
                t.split(" || ").forEach(x => {
                    splitExpressions.push(x.trim().split(' ')[0]);
                });
            });
            splitExpressions.forEach((t) => {
                var splitText = t.split('.');
                if (splitText.length == 2)
                    columns.push({ propName: splitText[1].trim() });
                else {
                    var arrayProp = splitText[1].split('[');
                    let jObject = {
                        propName: splitText[splitText.length - 1].trim(),
                        objectPropName: arrayProp[0],
                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined
                    };
                    columns.push(jObject);
                }
            });
        }
        else {
            columns = Linq.expressionParser(expression, isNonValidationExpression);
        }
        return columns;
    }
    static dynamicConfigParser(expression, propName) {
        let controlNames = [];
        let expressionString = expression.toString();
        let expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
        let splitString = expressionString.replace(new RegExp(/\r?\n|\r|;/g), ' ').replace(/["%()\{}=\\?ï¿½`'#<>|,;:+-]+/g, " ").split(/ /g);
        if (expressionArguments.length > 3)
            expressionArguments.splice(expressionArguments.length - 1, 1);
        expressionArguments.forEach(t => {
            splitString.filter(x => x != `${t}.${propName}` && x.startsWith(`${t}.`)).forEach(x => {
                let split = x.split('.');
                if (split.length == 2)
                    controlNames.push({ propName: x.replace(`${t}.`, '') });
                else {
                    var arrayProp = split[1].split('[');
                    let jObject = {
                        propName: split[split.length - 1].trim(),
                        objectPropName: arrayProp[0],
                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined,
                    };
                    controlNames.push(jObject);
                }
            });
        });
        return controlNames;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlucS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbInV0aWwvbGlucS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDekMsTUFBTSxPQUFPLElBQUk7SUFDYixNQUFNLENBQUMsZUFBZSxDQUFDLFVBQWM7UUFDakMsSUFBSSxjQUFjLEdBQVEsRUFBRSxDQUFDO1FBQzdCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUNqRSxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLElBQUksZUFBZSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztZQUN0RyxJQUFJLGVBQWUsS0FBSyxJQUFJLEVBQUU7Z0JBQzFCLGNBQWMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5RTtpQkFBTTtnQkFDSCxlQUFlLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO2dCQUMxRSxJQUFJLGVBQWUsS0FBSyxJQUFJLEVBQUU7b0JBQzFCLGNBQWMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDMUU7cUJBQU07b0JBQ0gsY0FBYyxHQUFHLElBQUksUUFBUSxDQUFD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QUM7UUFDSCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUSElTIH0gZnJvbSBcIi4uL2NvbnN0L2FwcC5jb25zdFwiXHJcbmV4cG9ydCBjbGFzcyBMaW5xIHtcclxuICAgIHN0YXRpYyBmdW5jdGlvbkNyZWF0b3IoZXhwcmVzc2lvbjphbnkpOiBhbnkge1xyXG4gICAgICAgIHZhciBmdW5jdGlvblNldHRlcjogYW55ID0gW107XHJcbiAgICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccypcXCg/XFxzKihbXildKilcXHMqXFwpP1xccyo9PiguKikvKTtcclxuICAgICAgICB2YXIgc3BsaXRTZWxlY3QgPSBtYXRjaFsyXS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpdFNlbGVjdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZXF1YWxUb09wZXJhdG9yID0gc3BsaXRTZWxlY3RbaV0ubWF0Y2goL15cXHMqXFwoP1xccyooW14pXSopXFxzKlxcKT9cXHMqfD09PXwhPT18PT18IT18Pj18Pnw8PXw8fCguKikvKTtcclxuICAgICAgICAgICAgaWYgKGVxdWFsVG9PcGVyYXRvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb25TZXR0ZXIgPSBuZXcgRnVuY3Rpb24obWF0Y2hbMV0sIFwicmV0dXJuIFwiICsgZXF1YWxUb09wZXJhdG9yLmlucHV0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVxdWFsVG9PcGVyYXRvciA9IHNwbGl0U2VsZWN0W2ldLm1hdGNoKC9eXFxzKlxcKD9cXHMqKFteKV0qKVxccypcXCk/XFxzKj0oLiopLyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXF1YWxUb09wZXJhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TZXR0ZXIgPSBuZXcgRnVuY3Rpb24obWF0Y2hbMV0sIFwicmV0dXJuIFwiICsgc3BsaXRTZWxlY3QuaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblNldHRlciA9IG5ldyBGdW5jdGlvbihtYXRjaFsxXSwgXCJyZXR1cm4gXCIgKyBlcXVhbFRvT3BlcmF0b3IuaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzcGxpdFNlbGVjdC5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgZnVuY3Rpb25TZXR0ZXIgPSB7IGFjY2Vzc0Z1bmN0aW9uOiBuZXcgRnVuY3Rpb24obWF0Y2hbMV0sIFwicmV0dXJuIFwiICsgbWF0Y2hbMl0pIH07XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uU2V0dGVyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGV4ZWN1dGUoak9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY29uZmlnOiBhbnksIHBhcmVudE9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgbW9kZWxJbnN0YW5jZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgaXNEeW5hbWljQ29uZmlnOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGV4cHJlc3Npb25GdW5jdGlvbjogRnVuY3Rpb24gfCBzdHJpbmcgPSBpc0R5bmFtaWNDb25maWcgPyBjb25maWcuZHluYW1pY0NvbmZpZyA6IGNvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb247XHJcbiAgICAgICAgbGV0IGxhc3RQYXJhbSA9IGlzRHluYW1pY0NvbmZpZyA/IGNvbmZpZyA6IG1vZGVsSW5zdGFuY2U7XHJcbiAgICAgICAgaWYgKHBhcmVudE9iamVjdCAmJiB0eXBlb2YgZXhwcmVzc2lvbkZ1bmN0aW9uID09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25GdW5jdGlvbiA9IExpbnEuZnVuY3Rpb25DcmVhdG9yKGV4cHJlc3Npb25GdW5jdGlvbik7XHJcbiAgICAgICAgaWYgKHBhcmVudE9iamVjdCAmJiBleHByZXNzaW9uRnVuY3Rpb24pXHJcbiAgICAgICAgICAgIHJldHVybiBtb2RlbEluc3RhbmNlICYmIG1vZGVsSW5zdGFuY2UuY29uc3RydWN0b3IgIT09IE9iamVjdCA/ICg8RnVuY3Rpb24+ZXhwcmVzc2lvbkZ1bmN0aW9uKS5jYWxsKG1vZGVsSW5zdGFuY2UsIHBhcmVudE9iamVjdCwgak9iamVjdCwgbGFzdFBhcmFtKSA6ICg8RnVuY3Rpb24+ZXhwcmVzc2lvbkZ1bmN0aW9uKShwYXJlbnRPYmplY3QsIGpPYmplY3QsIGxhc3RQYXJhbSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0Q29uZGl0aW9uUGF0aCh0ZXh0czogc3RyaW5nW10pOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBwYXRoID0gXCJcIjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRleHRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBwYXRoICs9ICh0ZXh0cy5sZW5ndGggLSAxKSA9PSBpID8gdGV4dHNbaV0udHJpbSgpIDogYCR7dGV4dHNbaV0udHJpbSgpfS5gXHJcbiAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZXhwcmVzc2lvblBhcnNlcihleHByZXNzaW9uOiBhbnksIGlzTm9uVmFsaWRhdGlvbkV4cHJlc3Npb246IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgc3BsaXRFeHByZXNzaW9ucyA9IFtdO1xyXG4gICAgICAgIGxldCBjb2x1bW5zOmFueSA9IFtdO1xyXG4gICAgICAgIGxldCBleHByZXNzaW9uU3RyaW5nID0gZXhwcmVzc2lvbi50b1N0cmluZygpO1xyXG4gICAgICAgIGxldCBleHByZXNzaW9uQXJndW1lbnRzID0gTGlucS5leHRyYWN0QXJndW1lbnRzKGV4cHJlc3Npb25TdHJpbmcubWF0Y2goL1xcKChbXildKylcXCkvZykpO1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uQXJndW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHNwbGl0VGV4dHMgOmFueT0gW107XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25TdHJpbmcucmVwbGFjZSgvXFxzL2csICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoL3t8fS8sIFwiZ1wiKSwgXCJcIikuc3BsaXQobmV3IFJlZ0V4cCgvcmV0dXJufD09PXwhPT18PT18IT18Pj18Pnw8PXw8fCYmLykpLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dHMgPSB0LnJlcGxhY2UoL1xcKHxcXCkvZywgXCJcIikuc3BsaXQoXCJ8fFwiKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRleHQgb2YgdGV4dHMpXHJcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRUZXh0cy5wdXNoKHRleHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3BsaXRUZXh0cy5mb3JFYWNoKCh0OmFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbkFyZ3VtZW50cy5mb3JFYWNoKCh4LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHQudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnN0YXJ0c1dpdGgoeCArICcuJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGl0VGV4dCA9IHQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0VGV4dC5sZW5ndGggPT0gMiB8fCAoc3BsaXRUZXh0Lmxlbmd0aCA+PSAyICYmIGlzTm9uVmFsaWRhdGlvbkV4cHJlc3Npb24pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05vblZhbGlkYXRpb25FeHByZXNzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7IHByb3BOYW1lOiBzcGxpdFRleHRbMV0udHJpbSgpLCBhcmd1bWVudEluZGV4OiBpID09IDMgPyAwIDogaSA9PSAyID8gMSA6IGkgPT0gMSA/IC0xIDogaSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goeyBwcm9wTmFtZTogdGhpcy5nZXRDb25kaXRpb25QYXRoKHNwbGl0VGV4dCksIGFyZ3VtZW50SW5kZXg6IGkgPT0gMyA/IDAgOiBpID09IDIgPyAxIDogaSA9PSAxID8gLTEgOiBpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheVByb3AgPSBzcGxpdFRleHRbMV0uc3BsaXQoJ1snKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BOYW1lOiBzcGxpdFRleHRbc3BsaXRUZXh0Lmxlbmd0aCAtIDFdLnRyaW0oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RQcm9wTmFtZTogYXJyYXlQcm9wWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5SW5kZXg6IGFycmF5UHJvcC5sZW5ndGggPiAxID8gYXJyYXlQcm9wWzFdLnJlcGxhY2UoXCJdXCIsIFwiXCIpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50SW5kZXg6IGkgPT09IDMgPyAwIDogaSA9PT0gMiA/IDEgOiBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goak9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29sdW1ucztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBleHRyYWN0QXJndW1lbnRzKHNwbGl0VGV4dHM6IHN0cmluZ1tdfG51bGwpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgbGV0IGV4cHJlc3Npb25Bcmd1bWVudHM6IHN0cmluZ1tdID0gW1RISVNdO1xyXG4gICAgICAgIGlmIChzcGxpdFRleHRzICYmIHNwbGl0VGV4dHNbMF0pXHJcbiAgICAgICAgICAgIHNwbGl0VGV4dHNbMF0uc3BsaXQoXCIsXCIpLmZvckVhY2godCA9PiBleHByZXNzaW9uQXJndW1lbnRzLnB1c2godC50cmltKCkucmVwbGFjZShcIihcIiwgXCJcIikucmVwbGFjZShcIilcIiwgXCJcIikpKTtcclxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbkFyZ3VtZW50cztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZXhwcmVzc2lvbkNvbHVtbnMoZXhwcmVzc2lvbjogYW55LCBpc05vblZhbGlkYXRpb25FeHByZXNzaW9uOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICB2YXIgY29sdW1ucyA9IFtdO1xyXG4gICAgICAgIGxldCBzcGxpdEV4cHJlc3Npb25zOmFueSA9IFtdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb24uc3BsaXQoXCI9PlwiKVsxXS5zcGxpdChcIiAmJiBcIikuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHQuc3BsaXQoXCIgfHwgXCIpLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRFeHByZXNzaW9ucy5wdXNoKHgudHJpbSgpLnNwbGl0KCcgJylbMF0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3BsaXRFeHByZXNzaW9ucy5mb3JFYWNoKCh0OmFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0VGV4dCA9IHQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgIGlmIChzcGxpdFRleHQubGVuZ3RoID09IDIpXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHsgcHJvcE5hbWU6IHNwbGl0VGV4dFsxXS50cmltKCkgfSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXlQcm9wID0gc3BsaXRUZXh0WzFdLnNwbGl0KCdbJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpPYmplY3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BOYW1lOiBzcGxpdFRleHRbc3BsaXRUZXh0Lmxlbmd0aCAtIDFdLnRyaW0oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0UHJvcE5hbWU6IGFycmF5UHJvcFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlJbmRleDogYXJyYXlQcm9wLmxlbmd0aCA+IDEgPyBhcnJheVByb3BbMV0ucmVwbGFjZShcIl1cIiwgXCJcIikgOiB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKGpPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29sdW1ucyA9IExpbnEuZXhwcmVzc2lvblBhcnNlcihleHByZXNzaW9uLCBpc05vblZhbGlkYXRpb25FeHByZXNzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbHVtbnM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGR5bmFtaWNDb25maWdQYXJzZXIoZXhwcmVzc2lvbjogRnVuY3Rpb24sIHByb3BOYW1lOiBzdHJpbmcpOiBhbnlbXSB7XHJcbiAgICAgICAgbGV0IGNvbnRyb2xOYW1lczphbnlbXSA9IFtdO1xyXG4gICAgICAgIGxldCBleHByZXNzaW9uU3RyaW5nID0gZXhwcmVzc2lvbi50b1N0cmluZygpO1xyXG4gICAgICAgIGxldCBleHByZXNzaW9uQXJndW1lbnRzID0gTGlucS5leHRyYWN0QXJndW1lbnRzKGV4cHJlc3Npb25TdHJpbmcubWF0Y2goL1xcKChbXildKylcXCkvZykpO1xyXG4gICAgICAgIGxldCBzcGxpdFN0cmluZzogc3RyaW5nW10gPSBleHByZXNzaW9uU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cCgvXFxyP1xcbnxcXHJ8Oy9nKSwgJyAnKS5yZXBsYWNlKC9bXCIlKClcXHt9PVxcXFw/77+9YCcjPD58LDs6Ky1dKy9nLCBcIiBcIikuc3BsaXQoLyAvZyk7XHJcbiAgICAgICAgaWYgKGV4cHJlc3Npb25Bcmd1bWVudHMubGVuZ3RoID4gMylcclxuICAgICAgICAgICAgZXhwcmVzc2lvbkFyZ3VtZW50cy5zcGxpY2UoZXhwcmVzc2lvbkFyZ3VtZW50cy5sZW5ndGggLSAxLCAxKVxyXG4gICAgICAgIGV4cHJlc3Npb25Bcmd1bWVudHMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgc3BsaXRTdHJpbmcuZmlsdGVyKHggPT4geCAhPSBgJHt0fS4ke3Byb3BOYW1lfWAgJiYgeC5zdGFydHNXaXRoKGAke3R9LmApKS5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwbGl0ID0geC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA9PSAyKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xOYW1lcy5wdXNoKHsgcHJvcE5hbWU6IHgucmVwbGFjZShgJHt0fS5gLCAnJykgfSlcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnJheVByb3AgPSBzcGxpdFsxXS5zcGxpdCgnWycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBqT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wTmFtZTogc3BsaXRbc3BsaXQubGVuZ3RoIC0gMV0udHJpbSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RQcm9wTmFtZTogYXJyYXlQcm9wWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheUluZGV4OiBhcnJheVByb3AubGVuZ3RoID4gMSA/IGFycmF5UHJvcFsxXS5yZXBsYWNlKFwiXVwiLCBcIlwiKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbE5hbWVzLnB1c2goak9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjb250cm9sTmFtZXM7XHJcbiAgICB9XHJcbn1cclxuIl19