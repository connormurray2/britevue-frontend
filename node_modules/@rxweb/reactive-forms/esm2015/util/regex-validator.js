import { RegExRule } from "./regex-rules";
const ALPHABET = "alphabet";
const DIGIT = "digit";
const CONTAINS = "contains";
const LOWERCASE = "lowerCase";
const UPPERCASE = "upperCase";
const SPECIAL_CHARACTER = "specialCharacter";
const MIN_LENGTH = "minLength";
const MAX_LENGTH = "maxLength";
export class RegexValidator {
    static isExits(value, regex) {
        return value.match(regex) != null;
    }
    static isValid(value, regex) {
        return regex.test(value);
    }
    static isNotBlank(value, isRemoveSpace = false) {
        return !isRemoveSpace ?
            (value === 0) || (value !== undefined && value !== null && value !== "") :
            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== "");
    }
    static isValidPassword(passwordValidation, value) {
        let isValid = false;
        let jObject = {};
        let keyName = "status";
        let objectProperties = Object.getOwnPropertyNames(passwordValidation);
        for (let propertyName of objectProperties) {
            switch (propertyName) {
                case ALPHABET:
                    isValid = RegexValidator.isExits(value, RegExRule.alphaExits);
                    keyName = ALPHABET;
                    break;
                case DIGIT:
                    isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);
                    keyName = DIGIT;
                    break;
                case CONTAINS:
                    isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                    keyName = CONTAINS;
                    break;
                case LOWERCASE:
                    isValid = RegexValidator.isValid(value, RegExRule.lowerCase);
                    keyName = LOWERCASE;
                    break;
                case UPPERCASE:
                    isValid = RegexValidator.isValid(value, RegExRule.upperCase);
                    keyName = UPPERCASE;
                    break;
                case SPECIAL_CHARACTER:
                    isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);
                    keyName = SPECIAL_CHARACTER;
                    break;
                case MIN_LENGTH:
                    isValid = value.length >= passwordValidation[propertyName];
                    keyName = MIN_LENGTH;
                    break;
                case MAX_LENGTH:
                    isValid = value.length <= passwordValidation[propertyName];
                    keyName = MAX_LENGTH;
                    break;
            }
            if (!isValid)
                break;
        }
        return { isValid: isValid, keyName: keyName };
    }
    static isZero(value) {
        return value == 0;
    }
    static commaRegex() {
        return new RegExp(",", "g");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnZXgtdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9yZWdleC12YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxNQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFDcEMsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDO0FBQzlCLE1BQU0sUUFBUSxHQUFXLFVBQVUsQ0FBQztBQUNwQyxNQUFNLFNBQVMsR0FBVyxXQUFXLENBQUM7QUFDdEMsTUFBTSxTQUFTLEdBQVcsV0FBVyxDQUFDO0FBQ3RDLE1BQU0saUJBQWlCLEdBQVcsa0JBQWtCLENBQUM7QUFDckQsTUFBTSxVQUFVLEdBQVcsV0FBVyxDQUFDO0FBQ3ZDLE1BQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQztBQUd2QyxNQUFNLE9BQU8sY0FBYztJQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQVUsRUFBRSxLQUFhO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDdEMsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBVSxFQUFFLEtBQWE7UUFDcEMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFSCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQVUsRUFBRSxnQkFBeUIsS0FBSztRQUMxRCxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDckIsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQzNGLENBQUM7SUFDQyxNQUFNLENBQUMsZUFBZSxDQUFDLGtCQUF1QixFQUFFLEtBQWE7UUFDekQsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUEyQixFQUFFLENBQUM7UUFDekMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDO1FBQ3ZCLElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDckUsS0FBSyxJQUFJLFlBQVksSUFBSSxnQkFBZ0IsRUFBRTtZQUN2QyxRQUFRLFlBQVksRUFBRTtnQkFDbEIsS0FBSyxRQUFRO29CQUNULE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzlELE9BQU8sR0FBRyxRQUFRLENBQUM7b0JBQ25CLE1BQU07Z0JBQ1YsS0FBSyxLQUFLO29CQUNOLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQ2hFLE9BQU8sR0FBRyxLQUFLLENBQUM7b0JBQ2hCLE1BQU07Z0JBQ1YsS0FBSyxRQUFRO29CQUNULE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzVELE9BQU8sR0FBRyxRQUFRLENBQUM7b0JBQ25CLE1BQU07Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzdELE9BQU8sR0FBRyxTQUFTLENBQUM7b0JBQ3BCLE1BQU07Z0JBQ1YsS0FBSyxTQUFTO29CQUNWLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQzdELE9BQU8sR0FBRyxTQUFTLENBQUM7b0JBQ3BCLE1BQU07Z0JBQ1YsS0FBSyxpQkFBaUI7b0JBQ2xCLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztvQkFDcEUsT0FBTyxHQUFHLGlCQUFpQixDQUFDO29CQUM1QixNQUFNO2dCQUNWLEtBQUssVUFBVTtvQkFDWCxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDM0QsT0FBTyxHQUFHLFVBQVUsQ0FBQztvQkFDckIsTUFBTTtnQkFDVixLQUFLLFVBQVU7b0JBQ1gsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzNELE9BQU8sR0FBRyxVQUFVLENBQUM7b0JBQ3JCLE1BQU07YUFDYjtZQUNELElBQUksQ0FBQyxPQUFPO2dCQUNSLE1BQU07U0FDYjtRQUNELE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUNqRCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFVO1FBQ3BCLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVU7UUFDYixPQUFPLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXNzd29yZFZhbGlkYXRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL3Bhc3N3b3JkLXZhbGlkYXRpb24ubW9kZWxcIjtcclxuaW1wb3J0IHsgUmVnRXhSdWxlIH0gZnJvbSBcIi4vcmVnZXgtcnVsZXNcIjtcclxuXHJcbmNvbnN0IEFMUEhBQkVUOiBzdHJpbmcgPSBcImFscGhhYmV0XCI7XHJcbmNvbnN0IERJR0lUOiBzdHJpbmcgPSBcImRpZ2l0XCI7XHJcbmNvbnN0IENPTlRBSU5TOiBzdHJpbmcgPSBcImNvbnRhaW5zXCI7XHJcbmNvbnN0IExPV0VSQ0FTRTogc3RyaW5nID0gXCJsb3dlckNhc2VcIjtcclxuY29uc3QgVVBQRVJDQVNFOiBzdHJpbmcgPSBcInVwcGVyQ2FzZVwiO1xyXG5jb25zdCBTUEVDSUFMX0NIQVJBQ1RFUjogc3RyaW5nID0gXCJzcGVjaWFsQ2hhcmFjdGVyXCI7XHJcbmNvbnN0IE1JTl9MRU5HVEg6IHN0cmluZyA9IFwibWluTGVuZ3RoXCI7XHJcbmNvbnN0IE1BWF9MRU5HVEg6IHN0cmluZyA9IFwibWF4TGVuZ3RoXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlZ2V4VmFsaWRhdG9yIHtcclxuICAgIHN0YXRpYyBpc0V4aXRzKHZhbHVlOiBhbnksIHJlZ2V4OiBSZWdFeHApOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUubWF0Y2gocmVnZXgpICE9IG51bGw7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNWYWxpZCh2YWx1ZTogYW55LCByZWdleDogUmVnRXhwKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICBzdGF0aWMgaXNOb3RCbGFuayh2YWx1ZTogYW55LCBpc1JlbW92ZVNwYWNlOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhaXNSZW1vdmVTcGFjZSA/XHJcbiAgICAgICh2YWx1ZSA9PT0gMCkgfHwgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IFwiXCIpIDpcclxuICAgICAgKHZhbHVlID09PSAwKSB8fCAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiBTdHJpbmcodmFsdWUpLnRyaW0oKSAhPT0gXCJcIilcclxuICB9XHJcbiAgICBzdGF0aWMgaXNWYWxpZFBhc3N3b3JkKHBhc3N3b3JkVmFsaWRhdGlvbjogYW55LCB2YWx1ZTogc3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICBsZXQgak9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xyXG4gICAgICAgIGxldCBrZXlOYW1lID0gXCJzdGF0dXNcIjtcclxuICAgICAgICBsZXQgb2JqZWN0UHJvcGVydGllcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHBhc3N3b3JkVmFsaWRhdGlvbilcclxuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eU5hbWUgb2Ygb2JqZWN0UHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBTFBIQUJFVDpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNFeGl0cyh2YWx1ZSwgUmVnRXhSdWxlLmFscGhhRXhpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBBTFBIQUJFVDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRElHSVQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWUsIFJlZ0V4UnVsZS5pc0RpZ2l0RXhpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBESUdJVDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQ09OVEFJTlM6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YocGFzc3dvcmRWYWxpZGF0aW9uW0NPTlRBSU5TXSkgIT0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IENPTlRBSU5TO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMT1dFUkNBU0U6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWUsIFJlZ0V4UnVsZS5sb3dlckNhc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBMT1dFUkNBU0U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFVQUEVSQ0FTRTpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZSwgUmVnRXhSdWxlLnVwcGVyQ2FzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IFVQUEVSQ0FTRTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgU1BFQ0lBTF9DSEFSQUNURVI6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IFJlZ2V4VmFsaWRhdG9yLmlzRXhpdHModmFsdWUsIFJlZ0V4UnVsZS5zcGVjaWFsQ2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gU1BFQ0lBTF9DSEFSQUNURVI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1JTl9MRU5HVEg6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbHVlLmxlbmd0aCA+PSBwYXNzd29yZFZhbGlkYXRpb25bcHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gTUlOX0xFTkdUSDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTUFYX0xFTkdUSDpcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gdmFsdWUubGVuZ3RoIDw9IHBhc3N3b3JkVmFsaWRhdGlvbltwcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBNQVhfTEVOR1RIO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaXNWYWxpZClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBpc1ZhbGlkLCBrZXlOYW1lOiBrZXlOYW1lIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNaZXJvKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29tbWFSZWdleCgpOiBSZWdFeHAge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiLFwiLCBcImdcIik7XHJcbiAgICB9XHJcbn1cclxuIl19