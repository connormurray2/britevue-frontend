import { RegexValidator } from "../util/regex-validator";
import { RegExRule } from "../util/regex-rules";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
import { IpVersion } from '../enums';
import { checkIpV4, checkIpV6 } from '../util/ip-checker';
import { IP_CONFIG } from "../const/config-names.const";
export function ipValidator(configModel) {
    return (control) => {
        let config = getConfigObject(configModel, control, IP_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            let values = config.isCidr ? control.value.split('/') : [control.value];
            var isValid = (config.version == IpVersion.V4) ?
                checkIpV4(values[0]) :
                (config.version == IpVersion.V6) ?
                    checkIpV6(values[0]) :
                    (checkIpV4(values[0]) || checkIpV6(values[0]));
            if (config.isCidr && isValid) {
                isValid = (values.length > 1) ?
                    config.version == IpVersion.V4 ?
                        RegexValidator.isValid(values[1], RegExRule.cidrV4) :
                        config.version == IpVersion.V6 ?
                            RegexValidator.isValid(values[1], RegExRule.cidrV6) :
                            (RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6)) :
                    false;
            }
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXAudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2lwLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxXQUFxQjtJQUM3QyxPQUFPLENBQUMsT0FBd0IsRUFBaUMsRUFBRTtRQUNuRSxJQUFJLE1BQU0sR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFDLE9BQU8sRUFBQyxTQUFTLENBQUMsQ0FBQztRQUM1RCxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDL0MsSUFBSSxNQUFNLEdBQWEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xGLElBQUksT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDaEMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2xELElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLEVBQUU7Z0JBQzVCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDN0IsTUFBTSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQzlCLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNyRCxNQUFNLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFDOUIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7NEJBQ3JELENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xILEtBQUssQ0FBQzthQUNUO1lBQ0QsSUFBSSxDQUFDLE9BQU87Z0JBQ1YsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDMUU7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIi4uL2Fic3RyYWN0L2Fic3RyYWN0LWNvbnRyb2xcIlxyXG5pbXBvcnQgeyBWYWxpZGF0b3JGbiB9IGZyb20gJy4uL21vZGVscy9pbnRlcmZhY2UvdmFsaWRhdG9yLWZuJ1xyXG5cclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi4vdXRpbC9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgUmVnRXhSdWxlIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtcnVsZXNcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgSXBDb25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9pcC1jb25maWdcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3JWYWx1ZUNoZWNrZXIgfSBmcm9tIFwiLi4vdXRpbC92YWxpZGF0b3ItdmFsdWUtY2hlY2tlclwiO1xyXG5pbXBvcnQge2dldENvbmZpZ09iamVjdH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IElwVmVyc2lvbiB9IGZyb20gJy4uL2VudW1zJ1xyXG5pbXBvcnQgeyBjaGVja0lwVjQsIGNoZWNrSXBWNiB9IGZyb20gJy4uL3V0aWwvaXAtY2hlY2tlcidcclxuaW1wb3J0IHsgSVBfQ09ORklHIH0gZnJvbSBcIi4uL2NvbnN0L2NvbmZpZy1uYW1lcy5jb25zdFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gaXBWYWxpZGF0b3IoY29uZmlnTW9kZWw6IElwQ29uZmlnKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCA9PiB7XHJcbiAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZ01vZGVsLGNvbnRyb2wsSVBfQ09ORklHKTtcclxuICAgIGlmIChWYWxpZGF0b3JWYWx1ZUNoZWNrZXIucGFzcyhjb250cm9sLCBjb25maWcpKSB7XHJcbiAgICAgIGxldCB2YWx1ZXM6IHN0cmluZ1tdID0gY29uZmlnLmlzQ2lkciA/IGNvbnRyb2wudmFsdWUuc3BsaXQoJy8nKSA6IFtjb250cm9sLnZhbHVlXTtcclxuICAgICAgdmFyIGlzVmFsaWQgPSAoY29uZmlnLnZlcnNpb24gPT0gSXBWZXJzaW9uLlY0KSA/XHJcbiAgICAgICAgY2hlY2tJcFY0KHZhbHVlc1swXSkgOlxyXG4gICAgICAgIChjb25maWcudmVyc2lvbiA9PSBJcFZlcnNpb24uVjYpID9cclxuICAgICAgICAgIGNoZWNrSXBWNih2YWx1ZXNbMF0pIDpcclxuICAgICAgICAgIChjaGVja0lwVjQodmFsdWVzWzBdKSB8fCBjaGVja0lwVjYodmFsdWVzWzBdKSlcclxuICAgICAgaWYgKGNvbmZpZy5pc0NpZHIgJiYgaXNWYWxpZCkge1xyXG4gICAgICAgIGlzVmFsaWQgPSAodmFsdWVzLmxlbmd0aCA+IDEpID9cclxuICAgICAgICAgIGNvbmZpZy52ZXJzaW9uID09IElwVmVyc2lvbi5WNCA/XHJcbiAgICAgICAgICAgIFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWVzWzFdLCBSZWdFeFJ1bGUuY2lkclY0KSA6XHJcbiAgICAgICAgICAgIGNvbmZpZy52ZXJzaW9uID09IElwVmVyc2lvbi5WNiA/XHJcbiAgICAgICAgICAgICAgUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZXNbMV0sIFJlZ0V4UnVsZS5jaWRyVjYpIDpcclxuICAgICAgICAgICAgICAoUmVnZXhWYWxpZGF0b3IuaXNWYWxpZCh2YWx1ZXNbMV0sIFJlZ0V4UnVsZS5jaWRyVjQpIHx8IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWVzWzFdLCBSZWdFeFJ1bGUuY2lkclY2KSkgOlxyXG4gICAgICAgICAgZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFpc1ZhbGlkKVxyXG4gICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24oQW5ub3RhdGlvblR5cGVzLmlwLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG4gIH1cclxufVxyXG4iXX0=