import { ObjectMaker } from "../util/object-maker";
import { ApplicationUtil } from "../util/app-util";
export function conditionalChangeValidator(conditionalValidationProps) {
    var timeOuts = [];
    var oldValue = undefined;
    var setTimeOut = (control) => {
        var timeOut = setTimeout(t => {
            clearTimeout(timeOut);
            control.updateValueAndValidity();
        }, 100);
    };
    return (control) => {
        let value = control.value;
        if (control.parent && oldValue != value) {
            const rootFormGroup = ApplicationUtil.getRootFormGroup(control);
            const parentFormGroup = control.parent;
            oldValue = value;
            timeOuts = [];
            conditionalValidationProps.forEach(t => {
                let a = control;
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(formGroup => {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl);
                            }
                        });
                }
                else {
                    let splitText = t.split('.');
                    if (splitText.length > 1) {
                        var control = null;
                        t.split('.').forEach((name, index) => { control = (index == 0) ? rootFormGroup.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup.controls[t];
                    }
                    if (control) {
                        setTimeOut(control);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbInJlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9jb25kaXRpb25hbC1jaGFuZ2UudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHbEQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLDBCQUFvQztJQUM3RSxJQUFJLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDNUIsSUFBSSxRQUFRLEdBQVEsU0FBUyxDQUFDO0lBQzlCLElBQUksVUFBVSxHQUFHLENBQUMsT0FBd0IsRUFBRSxFQUFFO1FBQzVDLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMzQixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDbkMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ1QsQ0FBQyxDQUFBO0lBQ0MsT0FBTyxDQUFDLE9BQXdCLEVBQWlDLEVBQUU7UUFDbkUsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMxQixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksUUFBUSxJQUFJLEtBQUssRUFBRTtZQUNyQyxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEUsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUV6QyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ2pCLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDZCwwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztnQkFDaEIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO29CQUN2QixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNoQyxJQUFJLFNBQVMsR0FBZ0IsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9ELElBQUksU0FBUzt3QkFDWCxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTs0QkFDckMsSUFBSSxlQUFlLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDbEQsSUFBSSxlQUFlLEVBQUU7Z0NBQ25CLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQzs2QkFDN0I7d0JBQ0gsQ0FBQyxDQUFDLENBQUE7aUJBQ0w7cUJBQU07b0JBRUgsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDN0IsSUFBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQzt3QkFDdEIsSUFBSSxPQUFPLEdBQU8sSUFBSSxDQUFDO3dCQUN2QixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLE9BQU8sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMzSDt5QkFDRTt3QkFDSCxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDdkM7b0JBRUQsSUFBSSxPQUFPLEVBQUU7d0JBQ1gsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUNyQjtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFBO1NBQ0g7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIi4uL2Fic3RyYWN0L2Fic3RyYWN0LWNvbnRyb2xcIlxyXG5pbXBvcnQgeyBWYWxpZGF0b3JGbiB9IGZyb20gJy4uL21vZGVscy9pbnRlcmZhY2UvdmFsaWRhdG9yLWZuJ1xyXG5pbXBvcnQgeyBSeEZvcm1BcnJheSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9yeC1mb3JtLWFycmF5XCJcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSBcIi4uL3V0aWwvYXBwLXV0aWxcIlxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25kaXRpb25hbENoYW5nZVZhbGlkYXRvcihjb25kaXRpb25hbFZhbGlkYXRpb25Qcm9wczogc3RyaW5nW10pOiBWYWxpZGF0b3JGbiB7XHJcbiAgdmFyIHRpbWVPdXRzOiBudW1iZXJbXSA9IFtdO1xyXG4gIHZhciBvbGRWYWx1ZTogYW55ID0gdW5kZWZpbmVkO1xyXG4gIHZhciBzZXRUaW1lT3V0ID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xyXG4gICAgdmFyIHRpbWVPdXQgPSBzZXRUaW1lb3V0KHQgPT4ge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZU91dCk7XHJcbiAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xyXG4gICAgfSwgMTAwKVxyXG4gIH1cclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwgPT4ge1xyXG4gICAgbGV0IHZhbHVlID0gY29udHJvbC52YWx1ZTtcclxuICAgIGlmIChjb250cm9sLnBhcmVudCAmJiBvbGRWYWx1ZSAhPSB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHJvb3RGb3JtR3JvdXAgPSBBcHBsaWNhdGlvblV0aWwuZ2V0Um9vdEZvcm1Hcm91cChjb250cm9sKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRGb3JtR3JvdXAgPSBjb250cm9sLnBhcmVudDtcclxuXHJcbiAgICAgIG9sZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgIHRpbWVPdXRzID0gW107XHJcbiAgICAgIGNvbmRpdGlvbmFsVmFsaWRhdGlvblByb3BzLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgbGV0IGEgPSBjb250cm9sO1xyXG4gICAgICAgIGlmICh0LmluZGV4T2YoXCJbXVwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICB2YXIgc3BsaXRUZXh0ID0gdC5zcGxpdChcIltdXCIpO1xyXG4gICAgICAgICAgdmFyIGZvcm1BcnJheSA9IDxSeEZvcm1BcnJheT5yb290Rm9ybUdyb3VwLmdldChbc3BsaXRUZXh0WzBdXSk7XHJcbiAgICAgICAgICBpZiAoZm9ybUFycmF5KVxyXG4gICAgICAgICAgICBmb3JtQXJyYXkuY29udHJvbHMuZm9yRWFjaChmb3JtR3JvdXAgPT4ge1xyXG4gICAgICAgICAgICAgIHZhciBhYnN0cmFjdENvbnRyb2wgPSBmb3JtR3JvdXAuZ2V0KHNwbGl0VGV4dFsxXSk7XHJcbiAgICAgICAgICAgICAgaWYgKGFic3RyYWN0Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZU91dChhYnN0cmFjdENvbnRyb2wpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHNwbGl0VGV4dCA9IHQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgaWYoc3BsaXRUZXh0Lmxlbmd0aCA+IDEpe1xyXG4gICAgICAgICAgICAgIHZhciBjb250cm9sIDphbnk9IG51bGw7XHJcbiAgICAgICAgICAgICAgdC5zcGxpdCgnLicpLmZvckVhY2goKG5hbWUsIGluZGV4KSA9PiB7IGNvbnRyb2wgPSAoaW5kZXggPT0gMCkgPyByb290Rm9ybUdyb3VwLmNvbnRyb2xzW25hbWVdIDogY29udHJvbC5jb250cm9sc1tuYW1lXTsgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wgPSBwYXJlbnRGb3JtR3JvdXAuY29udHJvbHNbdF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChjb250cm9sKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVPdXQoY29udHJvbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICB9XHJcbn1cclxuIl19