import { RegexValidator } from '../util/regex-validator';
const OBJECT = "object";
const BOOLEAN = "boolean";
export class FormDataProvider {
    convertToFormData(jObject) {
        return this.convertFormData(jObject);
    }
    convertFormData(jObject, currentFormData, parentKey) {
        let formData = currentFormData || new FormData();
        let propName = '';
        for (var columnName in jObject) {
            propName = !parentKey ? columnName : `${parentKey}[${columnName}]`;
            if (Array.isArray(jObject[columnName])) {
                jObject[columnName].forEach((row, index) => {
                    propName = `${columnName}[${index}]`;
                    if (typeof row === OBJECT)
                        this.convertFormData(row, formData, propName);
                    else
                        this.nonObjectValueBind(row, formData, propName);
                });
            }
            else if (jObject[columnName] !== null && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {
                this.convertFormData(jObject[columnName], formData, propName);
            }
            else {
                this.nonObjectValueBind(jObject[columnName], formData, propName);
            }
        }
        return formData;
    }
    nonObjectValueBind(value, formData, propName) {
        if (typeof value === BOOLEAN) {
            formData.append(propName, +value ? '1' : '0');
        }
        else if (value instanceof FileList) {
            for (var i = 0; i < value.length; i++) {
                let itemValue = value.item(i);
                formData.append(`${propName}[${i}]`, itemValue);
            }
        }
        else {
            if (RegexValidator.isNotBlank(value))
                formData.append(propName, value);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1kYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm1zLyIsInNvdXJjZXMiOlsiZG9tYWluL2Zvcm0tZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDeEQsTUFBTSxNQUFNLEdBQVcsUUFBUSxDQUFDO0FBQ2hDLE1BQU0sT0FBTyxHQUFXLFNBQVMsQ0FBQztBQUNsQyxNQUFNLE9BQU8sZ0JBQWdCO0lBRXpCLGlCQUFpQixDQUFDLE9BQTJCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQStCLEVBQUUsZUFBMEIsRUFBRSxTQUFrQjtRQUMzRixJQUFJLFFBQVEsR0FBRyxlQUFlLElBQUksSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNqRCxJQUFJLFFBQVEsR0FBVSxFQUFFLENBQUM7UUFDekIsS0FBSyxJQUFJLFVBQVUsSUFBSSxPQUFPLEVBQUU7WUFDNUIsUUFBUSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxJQUFJLFVBQVUsR0FBRyxDQUFDO1lBQ25FLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtnQkFDcEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQTRCLEVBQUUsS0FBVSxFQUFFLEVBQUU7b0JBQ3JFLFFBQVEsR0FBRyxHQUFHLFVBQVUsSUFBSSxLQUFLLEdBQUcsQ0FBQztvQkFDckMsSUFBSSxPQUFPLEdBQUcsS0FBSyxNQUFNO3dCQUNyQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7O3dCQUU5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLENBQUE7YUFDTDtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLElBQUksT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksSUFBSSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxRQUFRLENBQUMsRUFBRTtnQkFDbkssSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUMsUUFBUSxFQUFDLFFBQVEsQ0FBQyxDQUFBO2FBQzlEO2lCQUFNO2dCQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3BFO1NBQ0o7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBUyxFQUFDLFFBQWlCLEVBQUMsUUFBZTtRQUMxRCxJQUFJLE9BQU8sS0FBSyxLQUFLLE9BQU8sRUFBRTtZQUMxQixRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqRDthQUFNLElBQUksS0FBSyxZQUFZLFFBQVEsRUFBRTtZQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxTQUFTLEdBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUNuRDtTQUNKO2FBQU07WUFDSCxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNoQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSAnLi4vdXRpbC9yZWdleC12YWxpZGF0b3InXHJcbmNvbnN0IE9CSkVDVDogc3RyaW5nID0gXCJvYmplY3RcIjtcclxuY29uc3QgQk9PTEVBTjogc3RyaW5nID0gXCJib29sZWFuXCI7XHJcbmV4cG9ydCBjbGFzcyBGb3JtRGF0YVByb3ZpZGVye1xyXG5cclxuICAgIGNvbnZlcnRUb0Zvcm1EYXRhKGpPYmplY3Q6IHtba2V5OnN0cmluZ106YW55fSk6Rm9ybURhdGEge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRGb3JtRGF0YShqT2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBjb252ZXJ0Rm9ybURhdGEoak9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY3VycmVudEZvcm1EYXRhPzogRm9ybURhdGEsIHBhcmVudEtleT86IHN0cmluZyk6Rm9ybURhdGEge1xyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IGN1cnJlbnRGb3JtRGF0YSB8fCBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBsZXQgcHJvcE5hbWU6c3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBqT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHByb3BOYW1lID0gIXBhcmVudEtleSA/IGNvbHVtbk5hbWUgOiBgJHtwYXJlbnRLZXl9WyR7Y29sdW1uTmFtZX1dYDtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoak9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0uZm9yRWFjaCgocm93OiB7IFtrZXk6IHN0cmluZ106IGFueTsgfSwgaW5kZXg6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BOYW1lID0gYCR7Y29sdW1uTmFtZX1bJHtpbmRleH1dYDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJvdyA9PT0gT0JKRUNUKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRGb3JtRGF0YShyb3csIGZvcm1EYXRhLCBwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vbk9iamVjdFZhbHVlQmluZChyb3csIGZvcm1EYXRhLCBwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpPYmplY3RbY29sdW1uTmFtZV0gIT09IG51bGwgJiYgdHlwZW9mIGpPYmplY3RbY29sdW1uTmFtZV0gPT09IE9CSkVDVCAmJiAhKGpPYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBGaWxlIHx8IGpPYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBGaWxlTGlzdCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEZvcm1EYXRhKGpPYmplY3RbY29sdW1uTmFtZV0sZm9ybURhdGEscHJvcE5hbWUpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vbk9iamVjdFZhbHVlQmluZChqT2JqZWN0W2NvbHVtbk5hbWVdLCBmb3JtRGF0YSwgcHJvcE5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmb3JtRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBub25PYmplY3RWYWx1ZUJpbmQodmFsdWU6YW55LGZvcm1EYXRhOkZvcm1EYXRhLHByb3BOYW1lOnN0cmluZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IEJPT0xFQU4pIHtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByb3BOYW1lLCArdmFsdWUgPyAnMScgOiAnMCcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBGaWxlTGlzdCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbVZhbHVlOiBhbnkgPSB2YWx1ZS5pdGVtKGkpO1xyXG4gICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKGAke3Byb3BOYW1lfVske2l9XWAsIGl0ZW1WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayh2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJvcE5hbWUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19