function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
export function clone(jsonObject) {
    let jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if (Array.isArray(jsonObject[columnName])) {
                jObject[columnName] = [];
                for (let row of jsonObject[columnName]) {
                    if (isObject(row))
                        jObject[columnName].push(clone(row));
                    else
                        jObject[columnName].push(row);
                }
            }
            else if (typeof jsonObject[columnName] == "object")
                jObject[columnName] = clone(jsonObject[columnName]);
            else
                jObject[columnName] = jsonObject[columnName];
        }
        return jObject;
    }
    else
        return jsonObject;
}
export function merge(firstObject, secondObject) {
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            for (let row of secondObject[columnName])
                firstObject[columnName].push(clone(row));
        }
        else if (typeof firstObject[columnName] == "object")
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
export function isMatched(jsonObject, compareObject) {
    let isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object")
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybXMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9lbnRpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFlBQVksQ0FBQyxLQUFTO0lBQzNCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssWUFBWSxJQUFJLENBQUMsQ0FBQztBQUMzSCxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsS0FBVTtJQUN4QixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxpQkFBaUIsQ0FBQztBQUN2RSxDQUFDO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FBQyxVQUFrQztJQUNwRCxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFDdEIsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDMUIsS0FBSyxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUU7WUFDL0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUN6QixLQUFLLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDcEMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDO3dCQUNiLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7O3dCQUVwQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2lCQUNwQzthQUNKO2lCQUFNLElBQUksT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUTtnQkFDaEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs7Z0JBRXBELE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDbkQ7UUFDRCxPQUFPLE9BQU8sQ0FBQztLQUNsQjs7UUFFRyxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDO0FBRUwsTUFBTSxVQUFVLEtBQUssQ0FBQyxXQUFtQyxFQUFFLFlBQW9DO0lBQ3ZGLEtBQUssSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1FBQ2pDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQztnQkFDeEIsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNqQyxLQUFLLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQ3BDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDL0M7YUFBTSxJQUFJLE9BQU8sV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVE7WUFDakQsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7O1lBRWxGLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUQ7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxVQUFrQyxFQUFFLGFBQXFDO0lBQy9GLElBQUksVUFBVSxHQUFZLEtBQUssQ0FBQztJQUNoQyxLQUFLLElBQUksVUFBVSxJQUFJLGFBQWEsRUFBRTtRQUM5QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BELFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ2xGO1NBQ0o7YUFBTSxJQUFJLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVE7WUFDaEQsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7O1lBRTFFLFVBQVUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksVUFBVTtZQUNWLE1BQU07S0FDakI7SUFDRyxPQUFPLFVBQVUsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNPYmplY3RUeXBlKHZhbHVlOmFueSkge1xyXG4gICAgcmV0dXJuICEodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBEYXRlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoanNvbk9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgbGV0IGpPYmplY3Q6IGFueSA9IHt9O1xyXG4gICAgaWYgKGlzT2JqZWN0VHlwZShqc29uT2JqZWN0KSkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbHVtbk5hbWUgaW4ganNvbk9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcm93IG9mIGpzb25PYmplY3RbY29sdW1uTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qocm93KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKGNsb25lKHJvdykpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdLnB1c2gocm93KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uT2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0gY2xvbmUoanNvbk9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0gPSBqc29uT2JqZWN0W2NvbHVtbk5hbWVdXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqT2JqZWN0O1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBqc29uT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKGZpcnN0T2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBzZWNvbmRPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIHNlY29uZE9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWNvbmRPYmplY3RbY29sdW1uTmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgb2Ygc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdLnB1c2goY2xvbmUocm93KSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gPT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gbWVyZ2UoZmlyc3RPYmplY3RbY29sdW1uTmFtZV0sIHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gPSBzZWNvbmRPYmplY3RbY29sdW1uTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaXJzdE9iamVjdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTWF0Y2hlZChqc29uT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBjb21wYXJlT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogYm9vbGVhbntcclxuICAgIGxldCBpc01vZGlmaWVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGNvbXBhcmVPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbk9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbk9iamVjdFtjb2x1bW5OYW1lXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSBpc01hdGNoZWQoanNvbk9iamVjdFtjb2x1bW5OYW1lXVtpXSwgY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXVtpXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YganNvbk9iamVjdFtjb2x1bW5OYW1lXSA9PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgaXNNb2RpZmllZCA9IGlzTWF0Y2hlZChqc29uT2JqZWN0W2NvbHVtbk5hbWVdLCBjb21wYXJlT2JqZWN0W2NvbHVtbk5hbWVdKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgaXNNb2RpZmllZCA9ICEoanNvbk9iamVjdFtjb2x1bW5OYW1lXSA9PSBjb21wYXJlT2JqZWN0W2NvbHVtbk5hbWVdKTtcclxuICAgICAgICAgICAgaWYgKGlzTW9kaWZpZWQpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgICAgICByZXR1cm4gaXNNb2RpZmllZDtcclxufVxyXG4iXX0=