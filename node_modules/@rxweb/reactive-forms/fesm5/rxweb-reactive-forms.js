import { __values, __extends, __spread, __assign, __read } from 'tslib';

var CONTROLS_ERROR = "controlsError";
var VALUE_CHANGED_SYNC = "valueChangedSync";
var FUNCTION_STRING = "function";
var OBJECT_STRING = "object";
var RX_WEB_VALIDATOR = "rxwebValidator";
var NUMBER = "number";
var BOOLEAN = "boolean";
var VALIDATOR_CONFIG = "validatorConfig";
var THIS = "this";
var RXCODE = "-rxw-";
var MODEL = "model";
var MODEL_INSTANCE = "modelInstance";
var PATCH = "patch";
var VALID = "valid";
var DISABLED = "disabled";

var Linq = /** @class */ (function () {
    function Linq() {
    }
    Linq.functionCreator = function (expression) {
        var functionSetter = [];
        var match = expression.match(/^\s*\(?\s*([^)]*)\s*\)?\s*=>(.*)/);
        var splitSelect = match[2].split(",");
        for (var i = 0; i < splitSelect.length; i++) {
            var equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);
            if (equalToOperator !== null) {
                functionSetter = new Function(match[1], "return " + equalToOperator.input);
            }
            else {
                equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*=(.*)/);
                if (equalToOperator === null) {
                    functionSetter = new Function(match[1], "return " + splitSelect.input);
                }
                else {
                    functionSetter = new Function(match[1], "return " + equalToOperator.input);
                }
            }
        }
        if (splitSelect.length == 0)
            functionSetter = { accessFunction: new Function(match[1], "return " + match[2]) };
        return functionSetter;
    };
    Linq.execute = function (jObject, config, parentObject, modelInstance, isDynamicConfig) {
        var expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;
        var lastParam = isDynamicConfig ? config : modelInstance;
        if (parentObject && typeof expressionFunction == "string")
            expressionFunction = Linq.functionCreator(expressionFunction);
        if (parentObject && expressionFunction)
            return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);
        return true;
    };
    Linq.getConditionPath = function (texts) {
        var path = "";
        for (var i = 1; i < texts.length; i++)
            path += (texts.length - 1) == i ? texts[i].trim() : texts[i].trim() + ".";
        return path;
    };
    Linq.expressionParser = function (expression, isNonValidationExpression) {
        var _this = this;
        var columns = [];
        var expressionString = expression.toString();
        var expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
        if (expressionArguments.length > 0) {
            var splitTexts_1 = [];
            expressionString.replace(/\s/g, '').replace(new RegExp(/{|}/, "g"), "").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(function (t) {
                var e_1, _a;
                var texts = t.replace(/\(|\)/g, "").split("||");
                try {
                    for (var texts_1 = __values(texts), texts_1_1 = texts_1.next(); !texts_1_1.done; texts_1_1 = texts_1.next()) {
                        var text = texts_1_1.value;
                        splitTexts_1.push(text);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (texts_1_1 && !texts_1_1.done && (_a = texts_1.return)) _a.call(texts_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
            splitTexts_1.forEach(function (t) {
                expressionArguments.forEach(function (x, i) {
                    t = t.trim();
                    if (t.startsWith(x + '.')) {
                        var splitText = t.split('.');
                        if (splitText.length == 2 || (splitText.length >= 2 && isNonValidationExpression))
                            if (!isNonValidationExpression)
                                columns.push({ propName: splitText[1].trim(), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });
                            else
                                columns.push({ propName: _this.getConditionPath(splitText), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });
                        else {
                            var arrayProp = splitText[1].split('[');
                            var jObject = {
                                propName: splitText[splitText.length - 1].trim(),
                                objectPropName: arrayProp[0],
                                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined,
                                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i
                            };
                            columns.push(jObject);
                        }
                    }
                });
            });
        }
        return columns;
    };
    Linq.extractArguments = function (splitTexts) {
        var expressionArguments = [THIS];
        if (splitTexts && splitTexts[0])
            splitTexts[0].split(",").forEach(function (t) { return expressionArguments.push(t.trim().replace("(", "").replace(")", "")); });
        return expressionArguments;
    };
    Linq.expressionColumns = function (expression, isNonValidationExpression) {
        if (isNonValidationExpression === void 0) { isNonValidationExpression = false; }
        var columns = [];
        var splitExpressions = [];
        if (typeof expression == "string") {
            expression.split("=>")[1].split(" && ").forEach(function (t) {
                t.split(" || ").forEach(function (x) {
                    splitExpressions.push(x.trim().split(' ')[0]);
                });
            });
            splitExpressions.forEach(function (t) {
                var splitText = t.split('.');
                if (splitText.length == 2)
                    columns.push({ propName: splitText[1].trim() });
                else {
                    var arrayProp = splitText[1].split('[');
                    var jObject = {
                        propName: splitText[splitText.length - 1].trim(),
                        objectPropName: arrayProp[0],
                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined
                    };
                    columns.push(jObject);
                }
            });
        }
        else {
            columns = Linq.expressionParser(expression, isNonValidationExpression);
        }
        return columns;
    };
    Linq.dynamicConfigParser = function (expression, propName) {
        var controlNames = [];
        var expressionString = expression.toString();
        var expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
        var splitString = expressionString.replace(new RegExp(/\r?\n|\r|;/g), ' ').replace(/["%()\{}=\\?ï¿½`'#<>|,;:+-]+/g, " ").split(/ /g);
        if (expressionArguments.length > 3)
            expressionArguments.splice(expressionArguments.length - 1, 1);
        expressionArguments.forEach(function (t) {
            splitString.filter(function (x) { return x != t + "." + propName && x.startsWith(t + "."); }).forEach(function (x) {
                var split = x.split('.');
                if (split.length == 2)
                    controlNames.push({ propName: x.replace(t + ".", '') });
                else {
                    var arrayProp = split[1].split('[');
                    var jObject = {
                        propName: split[split.length - 1].trim(),
                        objectPropName: arrayProp[0],
                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined,
                    };
                    controlNames.push(jObject);
                }
            });
        });
        return controlNames;
    };
    return Linq;
}());

var AnnotationTypes = {
    numeric: 'numeric',
    required: 'required',
    minLength: 'minLength',
    maxLength: 'maxLength',
    minNumber: 'minNumber',
    maxNumber: 'maxNumber',
    pattern: 'pattern',
    password: 'password',
    compare: 'compare',
    minDate: 'minDate',
    maxDate: 'maxDate',
    alpha: 'alpha',
    alphaNumeric: 'alphaNumeric',
    email: 'email',
    hexColor: 'hexColor',
    lowerCase: 'lowerCase',
    url: 'url',
    upperCase: 'upperCase',
    nested: 'nested',
    propArray: 'propArray',
    propObject: 'propObject',
    contains: 'contains',
    range: 'range',
    custom: 'custom',
    digit: "digit",
    creditCard: "creditCard",
    time: "time",
    json: "json",
    greaterThan: "greaterThan",
    greaterThanEqualTo: "greaterThanEqualTo",
    lessThan: "lessThan",
    lessThanEqualTo: "lessThanEqualTo",
    choice: "choice",
    different: "different",
    even: "even",
    odd: "odd",
    factor: "factor",
    leapYear: "leapYear",
    allOf: "allOf",
    oneOf: "oneOf",
    noneOf: "noneOf",
    mac: "mac",
    ascii: "ascii",
    dataUri: "dataUri",
    port: "port",
    latLong: "latLong",
    extension: "extension",
    fileSize: "fileSize",
    endsWith: "endsWith",
    startsWith: "startsWith",
    primeNumber: "primeNumber",
    latitude: "latitude",
    longitude: "longitude",
    compose: "compose",
    rule: "rule",
    file: "file",
    image: "image",
    unique: "unique",
    notEmpty: "notEmpty",
    ip: "ip",
    cusip: "cusip",
    grid: "grid",
    date: 'date',
    and: 'and',
    or: 'or',
    not: 'not',
    minTime: 'minTime',
    maxTime: 'maxTime'
};

var INVALID = "invalid";
var PROPERTY = "property";
var OBJECT_PROPERTY = "objectProperty";
var ARRAY_PROPERTY = "arrayProperty";
var STRING = "string";
var MESSAGE = "message";

var DECORATORS = {
    disabled: 'disabled',
    error: 'error',
    trim: 'trim',
    ltrim: 'ltrim',
    rtrim: 'rtrim',
    blacklist: 'blacklist',
    stripLow: 'stripLow',
    toBoolean: 'toBoolean',
    toDate: 'toDate',
    toDouble: 'toDouble',
    toFloat: 'toFloat',
    toInt: 'toInt',
    string: 'toString',
    whitelist: 'whitelist',
    escape: 'escape',
    prefix: 'prefix',
    suffix: 'suffix',
    sanitize: 'sanitize',
    elementClass: 'elementClass'
};

var defaultContainer = new (/** @class */ (function () {
    function class_1() {
        this.instances = [];
        this.modelIncrementCount = 0;
    }
    class_1.prototype.get = function (instanceFunc) {
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        return instance;
    };
    class_1.prototype.getInstance = function (target, parameterIndex, propertyKey, decoratorType) {
        var isPropertyKey = (propertyKey != undefined);
        var instanceFunc = !isPropertyKey ? target : target.constructor;
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (!instance)
            instance = this.addInstanceContainer(instanceFunc);
        return instance;
    };
    class_1.prototype.addPropsConfig = function (target, configs) {
        var e_1, _a, e_2, _b;
        var instanceContainer = this.instances.filter(function (instance) { return instance.instance == target; })[0];
        if (instanceContainer && instanceContainer.properties && configs) {
            try {
                for (var configs_1 = __values(configs), configs_1_1 = configs_1.next(); !configs_1_1.done; configs_1_1 = configs_1.next()) {
                    var config = configs_1_1.value;
                    var _loop_1 = function (prop) {
                        var propertyInfo = instanceContainer.properties.filter(function (t) { return t.name == prop && (t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY); })[0];
                        if (propertyInfo) {
                            this_1.addPropConfig(target, [propertyInfo], config);
                        }
                        else if (prop === ":all:")
                            this_1.addPropConfig(target, instanceContainer.properties.filter(function (t) { return t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY; }), config);
                    };
                    var this_1 = this;
                    try {
                        for (var _c = (e_2 = void 0, __values(config.propNames)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var prop = _d.value;
                            _loop_1(prop);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (configs_1_1 && !configs_1_1.done && (_a = configs_1.return)) _a.call(configs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (configs === undefined)
            this.addInstanceContainer(target);
    };
    class_1.prototype.addPropConfig = function (target, properties, config) {
        var e_3, _a;
        try {
            for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                var propertyInfo = properties_1_1.value;
                var excludeProp = false;
                if (config.excludePropNames)
                    excludeProp = config.excludePropNames.filter(function (t) { return t == propertyInfo.name; })[0] !== undefined;
                if (!excludeProp) {
                    if (config.validationConfig)
                        for (var typeName in config.validationConfig) {
                            this.init({ constructor: target }, 0, propertyInfo.name, typeName, config.validationConfig[typeName] === true ? undefined : config.validationConfig[typeName], false);
                        }
                    if (config.error)
                        this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.error, DECORATORS.error);
                    if (config.disable)
                        this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.disable, DECORATORS.disable);
                    if (config.elementClass)
                        this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.elementClass, DECORATORS.elementClass);
                    if (config.ignore)
                        propertyInfo.ignore = config.ignore;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    class_1.prototype.addSanitizer = function (target, parameterIndex, propertyKey, decoratorType, value) {
        var instance = this.getInstance(target, parameterIndex, propertyKey, decoratorType);
        if (instance && instance.sanitizers) {
            if (!instance.sanitizers[propertyKey])
                instance.sanitizers[propertyKey] = [];
            instance.sanitizers[propertyKey].push({ name: decoratorType, config: value });
        }
    };
    class_1.prototype.addDecoratorConfig = function (target, parameterIndex, propertyKey, config, decoratorType) {
        var isPropertyKey = (propertyKey != undefined);
        var instanceFunc = !isPropertyKey ? target : target.constructor;
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (!instance)
            instance = this.addInstanceContainer(instanceFunc);
        if (instance.nonValidationDecorators) {
            instance.nonValidationDecorators[decoratorType].conditionalExpressions[propertyKey] = config.conditionalExpression;
            var columns = Linq.expressionColumns(config.conditionalExpression, true);
            columns.forEach(function (column) {
                if (column.argumentIndex !== -1) {
                    var columnName = (!column.objectPropName) ? "" + column.propName + RXCODE + column.argumentIndex : column.objectPropName + "." + column.propName + RXCODE + column.argumentIndex;
                    if (!instance.nonValidationDecorators[decoratorType].changeDetection[columnName])
                        instance.nonValidationDecorators[decoratorType].changeDetection[columnName] = [];
                    var disabledColumns = instance.nonValidationDecorators[decoratorType].changeDetection[columnName];
                    if (disabledColumns.indexOf(columnName) === -1)
                        disabledColumns.push(propertyKey);
                }
                else {
                    if (!instance.nonValidationDecorators[decoratorType].controlProp[propertyKey])
                        instance.nonValidationDecorators[decoratorType].controlProp[propertyKey] = {};
                    instance.nonValidationDecorators[decoratorType].controlProp[propertyKey][column.propName.replace(";", "")] = true;
                }
            });
        }
    };
    class_1.prototype.init = function (target, parameterIndex, propertyKey, annotationType, config, isAsync) {
        var decoratorConfiguration = {
            propertyIndex: parameterIndex,
            propertyName: propertyKey,
            annotationType: annotationType,
            config: config,
            isAsync: isAsync
        };
        var isPropertyKey = (propertyKey != undefined);
        this.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);
    };
    class_1.prototype.initPropertyObject = function (name, propertyType, entity, target, config) {
        var propertyInfo = {
            name: name,
            propertyType: propertyType,
            entity: entity,
            dataPropertyName: config ? config.name : undefined,
            entityProvider: config ? config.entityProvider : undefined
        };
        defaultContainer.addProperty(target.constructor, propertyInfo);
    };
    class_1.prototype.addInstanceContainer = function (instanceFunc) {
        var instanceContainer = {
            instance: instanceFunc,
            propertyAnnotations: [],
            properties: [],
            nonValidationDecorators: {
                disabled: {
                    conditionalExpressions: {},
                    changeDetection: {},
                    controlProp: {}
                }, error: {
                    conditionalExpressions: {},
                    changeDetection: {},
                    controlProp: {}
                }, elementClass: {
                    conditionalExpressions: {},
                    changeDetection: {},
                    controlProp: {}
                }
            },
            sanitizers: {}
        };
        this.instances.push(instanceContainer);
        return instanceContainer;
    };
    class_1.prototype.addProperty = function (instanceFunc, propertyInfo, isFromAnnotation) {
        if (isFromAnnotation === void 0) { isFromAnnotation = false; }
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (instance) {
            this.addPropertyInfo(instance, propertyInfo, !isFromAnnotation);
        }
        else {
            instance = this.addInstanceContainer(instanceFunc);
            this.addPropertyInfo(instance, propertyInfo);
        }
    };
    class_1.prototype.addPropertyInfo = function (instance, propertyInfo, isAddProperty) {
        if (isAddProperty === void 0) { isAddProperty = false; }
        var property = this.getProperty(instance, propertyInfo);
        if (!property && instance.properties)
            instance.properties.push(propertyInfo);
        else if (isAddProperty)
            this.updateProperty(property, propertyInfo);
    };
    class_1.prototype.addAnnotation = function (instanceFunc, decoratorConfiguration) {
        this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName }, true);
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (instance)
            instance.propertyAnnotations.push(decoratorConfiguration);
        else {
            instance = this.addInstanceContainer(instanceFunc);
            instance.propertyAnnotations.push(decoratorConfiguration);
        }
        if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpression) {
            var columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpression);
            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);
        }
        if (decoratorConfiguration.config && decoratorConfiguration.config.dynamicConfig) {
            var columns = Linq.dynamicConfigParser(decoratorConfiguration.config.dynamicConfig, decoratorConfiguration.propertyName);
            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);
        }
        this.setConditionalColumns(instance, decoratorConfiguration);
    };
    class_1.prototype.setConditionalColumns = function (instance, decoratorConfiguration) {
        var _this = this;
        if (instance && decoratorConfiguration.config) {
            if (decoratorConfiguration.annotationType == AnnotationTypes.and || decoratorConfiguration.annotationType == AnnotationTypes.or || decoratorConfiguration.annotationType == AnnotationTypes.not) {
                Object.keys(decoratorConfiguration.config.validation).forEach(function (t) {
                    if (typeof decoratorConfiguration.config.validation[t] !== "boolean")
                        _this.setLogicalConditional(instance, t, decoratorConfiguration.config.validation[t].fieldName, decoratorConfiguration.propertyName);
                });
            }
            else
                this.setLogicalConditional(instance, decoratorConfiguration.annotationType, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);
        }
    };
    class_1.prototype.setLogicalConditional = function (instance, annotationType, fieldName, propertyName) {
        if (instance && ((annotationType == AnnotationTypes.compare || annotationType == AnnotationTypes.greaterThan || annotationType == AnnotationTypes.greaterThanEqualTo || annotationType == AnnotationTypes.lessThan || annotationType == AnnotationTypes.lessThanEqualTo || annotationType == AnnotationTypes.different || annotationType == AnnotationTypes.factor || annotationType == AnnotationTypes.minTime || annotationType == AnnotationTypes.maxTime) || (annotationType == AnnotationTypes.creditCard && fieldName) || ((annotationType == AnnotationTypes.minDate || annotationType == AnnotationTypes.maxDate) && fieldName))) {
            this.setConditionalValueProp(instance, fieldName, propertyName);
        }
    };
    class_1.prototype.setConditionalValueProp = function (instance, propName, refPropName) {
        if (propName) {
            var splitProps = propName.split ? propName.split('.') : '';
            if (splitProps.length < 2) {
                if (!instance.conditionalValidationProps)
                    instance.conditionalValidationProps = {};
                if (!instance.conditionalValidationProps[propName])
                    instance.conditionalValidationProps[propName] = [];
                if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)
                    instance.conditionalValidationProps[propName].push(refPropName);
            }
            else
                this.addChangeValidation(instance, refPropName, [{ argumentIndex: 1, objectPropName: splitProps[0], propName: splitProps[1], referencePropName: refPropName }]);
        }
    };
    class_1.prototype.addChangeValidation = function (instance, propertyName, columns) {
        if (instance) {
            if (!instance.conditionalValidationProps)
                instance.conditionalValidationProps = {};
            columns.forEach(function (t) {
                if (t.propName && !t.objectPropName) {
                    if (instance && instance.conditionalValidationProps && !instance.conditionalValidationProps[t.propName])
                        instance.conditionalValidationProps[t.propName] = [];
                    if (instance && instance.conditionalValidationProps && instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)
                        instance.conditionalValidationProps[t.propName].push(propertyName);
                }
                else {
                    if (t.propName && t.objectPropName) {
                        if (!instance.conditionalObjectProps)
                            instance.conditionalObjectProps = [];
                        t.referencePropName = propertyName;
                        instance.conditionalObjectProps.push(t);
                    }
                }
            });
        }
    };
    class_1.prototype.clearInstance = function (instanceFunc) {
        var instance = this.instances.filter(function (instance) { return instance.instance === instanceFunc; })[0];
        if (instance) {
            var indexOf = this.instances.indexOf(instance);
            this.instances.splice(indexOf, 1);
        }
    };
    class_1.prototype.getProperty = function (instance, propertyInfo) {
        return (instance && instance.properties) ? instance.properties.filter(function (t) { return t.name == propertyInfo.name; })[0] : undefined;
    };
    class_1.prototype.updateProperty = function (property, currentProperty) {
        property.dataPropertyName = currentProperty.dataPropertyName;
        property.defaultValue = currentProperty.defaultValue;
    };
    return class_1;
}()))();

var RegExRule = {
    alpha: /^[a-zA-Z]+$/,
    alphaExits: /[a-zA-Z]/,
    alphaWithSpace: /^[a-zA-Z\s]+$/,
    macId: /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/,
    onlyDigit: /^[0-9]+$/,
    isDigitExits: /[0-9]/,
    lowerCase: /[a-z]/,
    upperCase: /[A-Z]/,
    specialCharacter: /[!@#$%^&*(),.?":{}|<>]/,
    advancedEmail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
    basicEmail: /^(([^<>()\[\]\\.,,:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    alphaNumeric: /^[0-9a-zA-Z]+$/,
    alphaNumericWithSpace: /^[0-9a-zA-Z\s]+$/,
    hexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,
    strictHexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,
    float: /^(?:[-+]?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/,
    decimal: /^[-+]?([0-9]+|\.[0-9]+|[0-9]+\.[0-9]+)$/,
    hexaDecimal: /^[0-9A-F]+$/i,
    date: /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,
    time: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,
    timeWithSeconds: /^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/,
    url: /^(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})$/,
    ascii: /^[\x00-\x7F]+$/,
    dataUri: /^data:([a-z]+\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*?)$/i,
    lat: /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/,
    long: /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/,
    ipV4: /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/,
    ipV6: /^((?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(:[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(:[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(:[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(:[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(:[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(:[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(:[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(:[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(:[a-fA-F\d]{1,4}){1,6}|:)|(?::((?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(%[0-9a-zA-Z]{1,})?$/,
    cidrV4: /^(3[0-2]|[12]?[0-9])$/,
    cidrV6: /^(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
    cusip: /^[0-9A-Z]{9}$/,
    grid: /^[GRID:]*([0-9A-Z]{2})[-\s]*([0-9A-Z]{5})[-\s]*([0-9A-Z]{10})[-\s]*([0-9A-Z]{1})$/g
};

var ALPHABET = "alphabet";
var DIGIT = "digit";
var CONTAINS = "contains";
var LOWERCASE = "lowerCase";
var UPPERCASE = "upperCase";
var SPECIAL_CHARACTER = "specialCharacter";
var MIN_LENGTH = "minLength";
var MAX_LENGTH = "maxLength";
var RegexValidator = /** @class */ (function () {
    function RegexValidator() {
    }
    RegexValidator.isExits = function (value, regex) {
        return value.match(regex) != null;
    };
    RegexValidator.isValid = function (value, regex) {
        return regex.test(value);
    };
    RegexValidator.isNotBlank = function (value, isRemoveSpace) {
        if (isRemoveSpace === void 0) { isRemoveSpace = false; }
        return !isRemoveSpace ?
            (value === 0) || (value !== undefined && value !== null && value !== "") :
            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== "");
    };
    RegexValidator.isValidPassword = function (passwordValidation, value) {
        var e_1, _a;
        var isValid = false;
        var keyName = "status";
        var objectProperties = Object.getOwnPropertyNames(passwordValidation);
        try {
            for (var objectProperties_1 = __values(objectProperties), objectProperties_1_1 = objectProperties_1.next(); !objectProperties_1_1.done; objectProperties_1_1 = objectProperties_1.next()) {
                var propertyName = objectProperties_1_1.value;
                switch (propertyName) {
                    case ALPHABET:
                        isValid = RegexValidator.isExits(value, RegExRule.alphaExits);
                        keyName = ALPHABET;
                        break;
                    case DIGIT:
                        isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);
                        keyName = DIGIT;
                        break;
                    case CONTAINS:
                        isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                        keyName = CONTAINS;
                        break;
                    case LOWERCASE:
                        isValid = RegexValidator.isValid(value, RegExRule.lowerCase);
                        keyName = LOWERCASE;
                        break;
                    case UPPERCASE:
                        isValid = RegexValidator.isValid(value, RegExRule.upperCase);
                        keyName = UPPERCASE;
                        break;
                    case SPECIAL_CHARACTER:
                        isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);
                        keyName = SPECIAL_CHARACTER;
                        break;
                    case MIN_LENGTH:
                        isValid = value.length >= passwordValidation[propertyName];
                        keyName = MIN_LENGTH;
                        break;
                    case MAX_LENGTH:
                        isValid = value.length <= passwordValidation[propertyName];
                        keyName = MAX_LENGTH;
                        break;
                }
                if (!isValid)
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (objectProperties_1_1 && !objectProperties_1_1.done && (_a = objectProperties_1.return)) _a.call(objectProperties_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { isValid: isValid, keyName: keyName };
    };
    RegexValidator.isZero = function (value) {
        return value == 0;
    };
    RegexValidator.commaRegex = function () {
        return new RegExp(",", "g");
    };
    return RegexValidator;
}());

var ClientLibrary;
(function (ClientLibrary) {
    ClientLibrary[ClientLibrary["React"] = 0] = "React";
    ClientLibrary[ClientLibrary["Vue"] = 1] = "Vue";
    ClientLibrary[ClientLibrary["Angular"] = 2] = "Angular";
    ClientLibrary[ClientLibrary["Vanilla"] = 3] = "Vanilla";
    ClientLibrary[ClientLibrary["None"] = 4] = "None";
})(ClientLibrary || (ClientLibrary = {}));
var ReactiveFormConfig = /** @class */ (function () {
    function ReactiveFormConfig() {
    }
    ReactiveFormConfig.set = function (jObject) {
        if (jObject)
            ReactiveFormConfig.json = jObject;
    };
    ReactiveFormConfig.get = function (path) {
        var e_1, _a;
        var jObject = undefined;
        if (ReactiveFormConfig.json) {
            var splitPath = path.split('.');
            try {
                for (var splitPath_1 = __values(splitPath), splitPath_1_1 = splitPath_1.next(); !splitPath_1_1.done; splitPath_1_1 = splitPath_1.next()) {
                    var columnName = splitPath_1_1.value;
                    jObject = (!jObject) ? ReactiveFormConfig.json[columnName] : jObject[columnName];
                    if (!jObject)
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (splitPath_1_1 && !splitPath_1_1.done && (_a = splitPath_1.return)) _a.call(splitPath_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return jObject;
    };
    ReactiveFormConfig.number = {};
    ReactiveFormConfig.json = {};
    ReactiveFormConfig.clientLib = ClientLibrary.None;
    return ReactiveFormConfig;
}());

function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
function clone(jsonObject) {
    var e_1, _a;
    var jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if (Array.isArray(jsonObject[columnName])) {
                jObject[columnName] = [];
                try {
                    for (var _b = (e_1 = void 0, __values(jsonObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var row = _c.value;
                        if (isObject(row))
                            jObject[columnName].push(clone(row));
                        else
                            jObject[columnName].push(row);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else if (typeof jsonObject[columnName] == "object")
                jObject[columnName] = clone(jsonObject[columnName]);
            else
                jObject[columnName] = jsonObject[columnName];
        }
        return jObject;
    }
    else
        return jsonObject;
}
function merge(firstObject, secondObject) {
    var e_2, _a;
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            try {
                for (var _b = (e_2 = void 0, __values(secondObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    firstObject[columnName].push(clone(row));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else if (typeof firstObject[columnName] == "object")
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
function isMatched(jsonObject, compareObject) {
    var isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object")
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}

var ObjectMaker = /** @class */ (function () {
    function ObjectMaker() {
    }
    ObjectMaker.toJson = function (key, config, values) {
        var message = config ? config.message : null;
        var messageKey = undefined;
        if (!message && config && config.messageKey)
            messageKey = config.messageKey;
        var messageText = (message) ? message : (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey || key]) ? ReactiveFormConfig.json.validationMessage[messageKey || key] : '';
        values.forEach(function (t, index) {
            messageText = messageText.replace("{{" + index + "}}", t);
        });
        var jObject = {};
        jObject[key] = {
            message: messageText, refValues: values
        };
        return jObject;
    };
    ObjectMaker.null = function () {
        return null;
    };
    return ObjectMaker;
}());

var AbstractControl = /** @class */ (function () {
    function AbstractControl(value, validators, asyncValidators) {
        this.validators = validators;
        this.asyncValidators = asyncValidators;
        this._errors = {};
        this.subscribers = new Array();
        this._pristine = true;
        this._value = value;
    }
    Object.defineProperty(AbstractControl.prototype, "errors", {
        get: function () {
            return this._errors;
        },
        set: function (value) {
            this._errors = value;
            this.onChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "root", {
        get: function () {
            return this._root;
        },
        set: function (value) {
            this._root = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            this.markAsDirty();
            this.updateValueAndValidity();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
        get: function () {
            return this._pristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (value) {
            this._parent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
        get: function () {
            return this.status === VALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
        get: function () {
            return this.status === INVALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "enabled", {
        get: function () {
            return this.status !== DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "disabled", {
        get: function () {
            return this.status === DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
        get: function () {
            return !this.pristine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
        get: function () {
            return this._touched;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
        get: function () {
            return !this._touched;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractControl.prototype.markAsDirty = function () {
        this._pristine = false;
        if (this.parent)
            this.parent.markAsDirty();
    };
    AbstractControl.prototype.markAsTouched = function () {
        this._touched = true;
        if (this.parent)
            this.parent.markAsTouched();
    };
    AbstractControl.prototype.markAsUnTouched = function () {
        this._touched = false;
        if (this.parent)
            this.parent.markAsUnTouched();
    };
    AbstractControl.prototype.disable = function () {
        this.status = DISABLED;
    };
    AbstractControl.prototype.enable = function () {
        this.status = VALID;
    };
    AbstractControl.prototype.updateValueAndValidity = function () {
        if (this.enabled) {
            this.runValidators();
        }
    };
    AbstractControl.prototype.runValidators = function () {
        var _this = this;
        this._errors = {};
        if (this.validators) {
            this.validators.forEach(function (validator) {
                var result = validator(_this);
                if (result)
                    _this.setErrors(result);
            });
        }
        if (Object.keys(this._errors).length == 0) {
            this.status = VALID;
            this.errors = undefined;
        }
    };
    AbstractControl.prototype.setErrors = function (errors) {
        var _this = this;
        Object.keys(errors).forEach(function (t) { return _this._errors[t] = errors[t]; });
        this.status = INVALID;
    };
    AbstractControl.prototype.setValue = function (value) {
        this.value = value;
    };
    AbstractControl.prototype.onChange = function () {
        this.subscribers.forEach(function (t) {
            t();
        });
    };
    AbstractControl.prototype.subscribe = function (func) {
        this.subscribers.push(func);
    };
    AbstractControl.prototype.destroy = function () {
        while (this.subscribers.length != 0)
            this.subscribers.splice(0, 1);
    };
    return AbstractControl;
}());

var AbstractFormArray = /** @class */ (function (_super) {
    __extends(AbstractFormArray, _super);
    function AbstractFormArray(controls) {
        var _this = _super.call(this, [], []) || this;
        _this.controls = controls;
        return _this;
    }
    AbstractFormArray.prototype.at = function (index) {
        return this.controls[index];
    };
    AbstractFormArray.prototype.push = function (control) {
        this.controls.push(control);
    };
    AbstractFormArray.prototype.removeAt = function (index) {
        if (this.controls[index])
            this.controls.splice(index, 1);
    };
    Object.defineProperty(AbstractFormArray.prototype, "length", {
        get: function () {
            return this.controls.length;
        },
        enumerable: true,
        configurable: true
    });
    return AbstractFormArray;
}(AbstractControl));

var PROP_ARRAY = "propArray";
var RxFormArray = /** @class */ (function (_super) {
    __extends(RxFormArray, _super);
    function RxFormArray(arrayObject, controls, validatorOrOpts, asyncValidator, arrayConfig) {
        var _this = _super.call(this, controls) || this;
        _this.arrayObject = arrayObject;
        _this.arrayConfig = arrayConfig;
        _this._baseValue = [];
        _this._isModified = false;
        _this._modified = [];
        _this.cloneObject(arrayObject);
        return _this;
    }
    Object.defineProperty(RxFormArray.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    RxFormArray.prototype.push = function (control) {
        var formGroup = this.root;
        if (this.arrayObject)
            if (control.modelInstance)
                this.arrayObject.push(control.modelInstance);
        _super.prototype.push.call(this, control);
        if (formGroup[VALUE_CHANGED_SYNC])
            formGroup.valueChangedSync();
        this.patch();
        this.checkValidation();
    };
    RxFormArray.prototype.patch = function () {
        this.checkModification();
        if (this.parent)
            this.parent[PATCH]();
    };
    RxFormArray.prototype.resetForm = function (options) {
        if (options && options.index >= 0 && options.groupOption) {
            this.controls[options.index].resetForm(options.groupOption);
        }
        else {
            for (var i = 0; i < this._baseValue.length; i++) {
                if (this.controls[i] !== undefined)
                    this.controls[i].resetForm({ value: this._baseValue[i] });
                else if (options && options.pushFunction) {
                    var formGroup = options.pushFunction(this._baseValue[i]);
                    this.push(formGroup);
                }
            }
        }
    };
    RxFormArray.prototype.commit = function () {
        var e_1, _a;
        this._baseValue = [];
        try {
            for (var _b = __values(this.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                var formGroup = _c.value;
                formGroup.commit();
                this._baseValue.push(clone(formGroup.value));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.patch();
    };
    RxFormArray.prototype.removeAt = function (index) {
        var formGroup = this.root;
        this.arrayObject.splice(index, 1);
        _super.prototype.removeAt.call(this, index);
        if (formGroup[VALUE_CHANGED_SYNC])
            formGroup.valueChangedSync();
        this.patch();
        this.checkValidation();
    };
    RxFormArray.prototype.checkValidation = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.arrayConfig != undefined && _this.arrayConfig.allowMaxIndex && _this.length > _this.arrayConfig.allowMaxIndex)
                _this.setErrors(ObjectMaker.toJson(PROP_ARRAY, _this.arrayConfig, [_this.length, _this.arrayConfig.allowMaxIndex]));
            else if (_this.errors && _this.errors[PROP_ARRAY])
                delete _this.errors[PROP_ARRAY];
        });
    };
    RxFormArray.prototype.checkModification = function () {
        this._isModified = !(this._baseValue.length == this.controls.length);
        if (!this._isModified)
            for (var i = 0; i < this.controls.length; i++) {
                this._isModified = isMatched(this._baseValue[i], this.controls[i].value);
                if (this._isModified)
                    break;
            }
    };
    RxFormArray.prototype.cloneObject = function (value) {
        var e_2, _a;
        this._baseValue = [];
        try {
            for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var row = value_1_1.value;
                this._baseValue.push(clone(row));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return RxFormArray;
}(AbstractFormArray));

var NumericValueType;
(function (NumericValueType) {
    NumericValueType[NumericValueType["PositiveNumber"] = 1] = "PositiveNumber";
    NumericValueType[NumericValueType["NegativeNumber"] = 2] = "NegativeNumber";
    NumericValueType[NumericValueType["Both"] = 3] = "Both";
})(NumericValueType || (NumericValueType = {}));

var IpVersion;
(function (IpVersion) {
    IpVersion[IpVersion["V4"] = 1] = "V4";
    IpVersion[IpVersion["V6"] = 2] = "V6";
    IpVersion[IpVersion["AnyOne"] = 3] = "AnyOne";
})(IpVersion || (IpVersion = {}));

var ErrorMessageBindingStrategy;
(function (ErrorMessageBindingStrategy) {
    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy["None"] = 0] = "None";
    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy["OnSubmit"] = 1] = "OnSubmit";
    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy["OnDirty"] = 2] = "OnDirty";
    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy["OnDirtyOrSubmit"] = 3] = "OnDirtyOrSubmit";
})(ErrorMessageBindingStrategy || (ErrorMessageBindingStrategy = {}));

var ResetFormType;
(function (ResetFormType) {
    ResetFormType[ResetFormType["ControlsOnly"] = 1] = "ControlsOnly";
    ResetFormType[ResetFormType["FormGroupsOnly"] = 2] = "FormGroupsOnly";
    ResetFormType[ResetFormType["FormArraysOnly"] = 3] = "FormArraysOnly";
    ResetFormType[ResetFormType["ControlsAndFormGroupsOnly"] = 4] = "ControlsAndFormGroupsOnly";
    ResetFormType[ResetFormType["DefinedPropsOnly"] = 5] = "DefinedPropsOnly";
    ResetFormType[ResetFormType["All"] = 6] = "All";
})(ResetFormType || (ResetFormType = {}));

var MODEL_INSTANCE_VALUE = "modelInstanceValue";
var ApplicationUtil = /** @class */ (function () {
    function ApplicationUtil() {
    }
    ApplicationUtil.getParentObjectValue = function (control) {
        if (control.parent) {
            var parent_1 = this.parentObjectValue(control.parent);
            return parent_1.value;
        }
        return {};
    };
    ApplicationUtil.getParentModelInstanceValue = function (control) {
        if (control.parent) {
            var parent_2 = this.parentObjectValue(control.parent);
            return parent_2[MODEL_INSTANCE_VALUE];
        }
        return {};
    };
    ApplicationUtil.getRootFormGroup = function (control) {
        if (control.parent) {
            return this.getRootFormGroup(control.parent);
        }
        return control;
    };
    ApplicationUtil.getParentControl = function (control) {
        if (control.parent) {
            var parent_3 = this.parentObjectValue(control.parent);
            return parent_3;
        }
        return control;
    };
    ApplicationUtil.getFormControlName = function (control) {
        var controlName = '';
        if (control.parent) {
            for (var formControlName in control.parent.controls) {
                if (control.parent.controls[formControlName] == control) {
                    controlName = formControlName;
                    break;
                }
            }
        }
        return controlName;
    };
    ApplicationUtil.getParentFormArray = function (control) {
        if (control.parent && !(control.parent instanceof RxFormArray || control.parent instanceof RxFormArray)) {
            var parent_4 = this.getParentFormArray(control.parent);
            return parent_4;
        }
        return control.parent;
    };
    ApplicationUtil.toLower = function (value) {
        if (value)
            return String(value).toLowerCase();
        return value;
    };
    ApplicationUtil.getControl = function (fieldName, formGroup) {
        var splitText = fieldName.split('.');
        if (splitText.length > 1) {
            var formControl = formGroup;
            splitText.forEach(function (name, index) { formControl = formControl.controls[name]; });
            return formControl;
        }
        else
            return formGroup.controls[fieldName];
    };
    ApplicationUtil.getFormControl = function (fieldName, control) {
        var splitText = fieldName.split('.');
        if (splitText.length > 1 && control.parent) {
            var formControl = this.getParentControl(control);
            splitText.forEach(function (name, index) { formControl = formControl.controls[name]; });
            return formControl;
        }
        return (control.parent) ? control.parent.get([fieldName]) : undefined;
    };
    ApplicationUtil.parentObjectValue = function (control) {
        if (!control.parent)
            return control;
        else
            control = this.parentObjectValue(control.parent);
        return control;
    };
    ApplicationUtil.isNumeric = function (value) {
        return (value - parseFloat(value) + 1) >= 0;
    };
    ApplicationUtil.notEqualTo = function (primaryValue, secondaryValue) {
        var firstValue = (primaryValue === undefined || primaryValue === null) ? "" : primaryValue;
        var secondValue = (secondaryValue === undefined || secondaryValue === null) ? "" : secondaryValue;
        if (firstValue instanceof Date && secondValue instanceof Date)
            return +firstValue != +secondValue;
        return (firstValue != secondValue);
    };
    ApplicationUtil.numericValidation = function (allowDecimal, acceptValue) {
        var decimalSymbol;
        if (ReactiveFormConfig && ReactiveFormConfig.number) {
            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;
        }
        else {
            decimalSymbol = ".";
        }
        acceptValue = (acceptValue == undefined) ? NumericValueType.PositiveNumber : acceptValue;
        var regex = /^[0-9]+$/;
        switch (acceptValue) {
            case NumericValueType.PositiveNumber:
                regex = (!allowDecimal) ? /^[0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[0-9\.]+$/ : /^[0-9\,]+$/;
                break;
            case NumericValueType.NegativeNumber:
                regex = (!allowDecimal) ? /^[-][0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[-][0-9\.]+$/ : /^[-][0-9\,]+$/;
                break;
            case NumericValueType.Both:
                regex = (!allowDecimal) ? /^[-|+]?[0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[-|+]?[0-9\.]+$/ : /^[-|+]?[0-9\,]+$/;
                break;
        }
        return regex;
    };
    ApplicationUtil.configureControl = function (control, config, type) {
        if (!control.validatorConfig) {
            var jObject = {};
            jObject[type] = config;
            Object.assign(control, { validatorConfig: jObject });
        }
        else
            control.validatorConfig[type] = config;
    };
    ApplicationUtil.lowerCaseWithTrim = function (value) {
        return typeof value === "string" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();
    };
    /** Check if a value is an object */
    ApplicationUtil.isObject = function (value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    };
    /** Check if a value is an object */
    ApplicationUtil.isArray = function (value) {
        return Array.isArray(value);
    };
    ApplicationUtil.cloneValue = function (value) {
        return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? __spread(value) : __assign({}, value) : value;
    };
    return ApplicationUtil;
}());

var ISO_DATE_REGEX = /^(\d{4}-\d{1,2}-\d{1,2})$/;
var DateProvider = /** @class */ (function () {
    function DateProvider() {
    }
    DateProvider.prototype.isDate = function (value) {
        return value instanceof Date && !isNaN(value.valueOf());
    };
    DateProvider.prototype.getRegex = function (dateFormat) {
        var regExp;
        switch (dateFormat) {
            case 'ymd':
                regExp = "^(?:[0-9]{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$";
                break;
            case 'dmy':
                regExp = "^(3[01]|[12][0-9]|0?[1-9])-(1[0-2]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$";
                break;
            case 'mdy':
                regExp = "^(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$";
                break;
        }
        return new RegExp(regExp);
    };
    DateProvider.prototype.regex = function () {
        var regExp;
        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator)
            regExp = this.getRegex(ReactiveFormConfig.json.internationalization.dateFormat);
        else
            regExp = (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat) ? this.getRegex(ReactiveFormConfig.json.baseConfig.dateFormat) : this.getRegex("mdy");
        return regExp;
    };
    DateProvider.prototype.getDate = function (value, isBaseFormat) {
        var _a, _b, _c;
        if (isBaseFormat === void 0) { isBaseFormat = false; }
        var year, month, day;
        if (!this.isDate(value)) {
            var seperator = void 0;
            var dateFormat = void 0;
            if (ISO_DATE_REGEX.test(value)) {
                seperator = "-";
                dateFormat = "ymd";
            }
            else {
                seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : "/";
                dateFormat = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : "mdy";
            }
            if (!isBaseFormat && ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {
                seperator = ReactiveFormConfig.json.internationalization.seperator;
                dateFormat = ReactiveFormConfig.json.internationalization.dateFormat;
            }
            switch (dateFormat) {
                case 'ymd':
                    _a = __read(value.split(seperator).map(function (val) { return +val; }), 3), year = _a[0], month = _a[1], day = _a[2];
                    break;
                case 'dmy':
                    _b = __read(value.split(seperator).map(function (val) { return +val; }), 3), day = _b[0], month = _b[1], year = _b[2];
                    break;
                case 'mdy':
                    _c = __read(value.split(seperator).map(function (val) { return +val; }), 3), month = _c[0], day = _c[1], year = _c[2];
                    break;
            }
            return new Date(year, month - 1, day);
        }
        else
            return value;
    };
    DateProvider.prototype.isValid = function (value) {
        if (typeof value == "string") {
            if (ISO_DATE_REGEX.test(value))
                return true;
            var seperator = '/';
            if (ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.seperator)
                seperator = ReactiveFormConfig.json.internationalization.seperator;
            value = value.replace(seperator, '-').replace(seperator, '-');
            return this.regex().test(value);
        }
        else
            return this.isDate(value);
    };
    DateProvider.prototype.getConfigDateValue = function (config) {
        var date = config.value;
        if (config.value && typeof config.value == "string") {
            date = this.getDate(config.value, true);
        }
        return date;
    };
    DateProvider.prototype.getCompareDate = function (config, control) {
        var date = this.getConfigDateValue(config);
        if (config.fieldName) {
            var checkControl = ApplicationUtil.getFormControl(config.fieldName, control);
            if (checkControl && checkControl.value) {
                date = this.getDate(checkControl.value);
            }
        }
        return date;
    };
    return DateProvider;
}());

function isNotBlank(value) {
    return (value !== undefined && value !== null && value !== "");
}
function trim(value) {
    if (isNotBlank(value))
        if (typeof value === "string")
            return value.trim();
    return value;
}
function ltrim(value) {
    if (isNotBlank(value))
        if (typeof value === "string")
            return value.replace(/^\s+/g, '');
    return value;
}
function rtrim(value) {
    if (isNotBlank(value))
        if (typeof value === "string")
            return value.replace(/\s+$/g, '');
    return value;
}
function blacklist(value, chars) {
    if (isNotBlank(value))
        if (typeof value === "string")
            return value.replace(new RegExp('[$' + chars + ']+', 'g'), '');
    return value;
}
function stripLow(value, keepNewLines) {
    var chars = keepNewLines === true ? '\x00-\x09\x0B\x0C\x0E-\x1F\x7F' : '\x00-\x1F\x7F';
    return blacklist(value, chars);
}
function toBoolean(value, strict) {
    if (isNotBlank(value)) {
        if (strict) {
            return value === '1' || value === 'true';
        }
        return value !== '0' && value !== 'false' && value !== '';
    }
    return value;
}
function toFloat(value) {
    if (isNotBlank(value))
        if (ApplicationUtil.isNumeric(value))
            return parseFloat(value);
    return null;
}
function toDouble(value) {
    return toFloat(value);
}
function toInt(value, radix) {
    if (isNotBlank(value))
        if (ApplicationUtil.isNumeric(value))
            return parseInt(value, radix || 10);
    return null;
}
function toString(value, radix) {
    if (isNotBlank(value))
        return String(value);
    return value;
}
function whitelist(value, chars) {
    if (isNotBlank(value))
        if (typeof value === "string")
            return value.replace(new RegExp("[^" + chars + "]+", 'g'), '');
    return value;
}
function toDate(value) {
    var dateProvider = new DateProvider();
    if (isNotBlank(value))
        if (typeof value === "string" && dateProvider.isValid(value)) {
            value = dateProvider.getDate(value);
            return value;
        }
    return null;
}
function escape(value) {
    if (isNotBlank(value))
        return (value.replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#x27;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\//g, '&#x2F;')
            .replace(/\\/g, '&#x5C;')
            .replace(/`/g, '&#96;'));
    return value;
}
function prefix(value, text) {
    if (isNotBlank(value))
        return "" + text + value;
    return value;
}
function suffix(value, text) {
    if (isNotBlank(value))
        return "" + value + text;
    return value;
}
function sanitize(value, config) {
    return config.custom(value);
}
var SANITIZERS = {
    trim: trim,
    ltrim: ltrim,
    rtrim: rtrim,
    blacklist: blacklist,
    stripLow: stripLow,
    toBoolean: toBoolean,
    toDouble: toDouble,
    toFloat: toFloat,
    toInt: toInt,
    'toString': toString,
    whitelist: whitelist,
    toDate: toDate,
    escape: escape,
    prefix: prefix,
    suffix: suffix,
    sanitize: sanitize
};

function instanceProvider(instanceFunc, entityObject) {
    var instance = defaultContainer.get(instanceFunc);
    var prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;
    if (prototype.__proto__) {
        var isLoop = false;
        do {
            isLoop = prototype.__proto__.constructor != Object;
            if (isLoop) {
                var extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);
                instance = merge(clone(instance), clone(extendClassInstance));
                prototype = prototype.__proto__;
            }
        } while (isLoop);
    }
    return instance;
}
function getInstance(model, objectArguments) {
    var classInstance = Object.create(model.prototype);
    try {
        model.apply(classInstance, objectArguments);
    }
    catch (ex) {
        ///resolution of issue https://github.com/rxweb/rxweb/issues/188
        classInstance = Reflect.construct(model, objectArguments);
    }
    return classInstance;
}

var BaseFormBuilder = /** @class */ (function () {
    function BaseFormBuilder() {
    }
    BaseFormBuilder.prototype.createInstance = function () {
        var instance = {};
        defaultContainer.modelIncrementCount = defaultContainer.modelIncrementCount + 1;
        var modelName = "RxWebModel" + defaultContainer.modelIncrementCount;
        instance.constructor = Function("\"use strict\";return(function " + modelName + "(){ })")();
        return instance;
    };
    BaseFormBuilder.prototype.createClassObject = function (model, formBuilderConfiguration, classInstance) {
        var _this = this;
        var instanceContainer = defaultContainer.get(model);
        var autoInstanceConfig = formBuilderConfiguration ? formBuilderConfiguration.autoInstanceConfig : undefined;
        if (!autoInstanceConfig) {
            return classInstance && typeof classInstance != "function" ? classInstance : getInstance(model, []);
        }
        else {
            classInstance = classInstance && typeof classInstance != "function" ? classInstance : getInstance(model, autoInstanceConfig.arguments || []);
            if (autoInstanceConfig.objectPropInstanceConfig && autoInstanceConfig.objectPropInstanceConfig.length > 0) {
                autoInstanceConfig.objectPropInstanceConfig.forEach(function (t) {
                    var objectProperty = instanceContainer.properties.filter(function (property) { return property.name == t.propertyName && property.propertyType == OBJECT_PROPERTY; })[0];
                    if (objectProperty) {
                        var data = classInstance[t.propertyName];
                        classInstance[t.propertyName] = getInstance(objectProperty.entity, t.arguments || []);
                        if (data)
                            _this.setObjectValue(data, classInstance[t.propertyName]);
                    }
                });
            }
            if (autoInstanceConfig.arrayPropInstanceConfig && autoInstanceConfig.arrayPropInstanceConfig.length > 0) {
                autoInstanceConfig.arrayPropInstanceConfig.forEach(function (t) {
                    var property = instanceContainer.properties.filter(function (property) { return property.name == t.propertyName && property.propertyType == ARRAY_PROPERTY; })[0];
                    if (property) {
                        var data = classInstance[t.propertyName];
                        classInstance[t.propertyName] = [];
                        for (var i = 0; i < t.rowItems; i++) {
                            var instance = getInstance(property.entity, t.arguments || []);
                            if (data && data[i])
                                _this.setObjectValue(data[i], instance);
                            classInstance[t.propertyName].push(instance);
                        }
                    }
                });
            }
            return classInstance;
        }
    };
    BaseFormBuilder.prototype.updateObject = function (model, entityObject, formBuilderConfiguration) {
        var _this = this;
        var instanceContainer = instanceProvider(model);
        var classInstance = getInstance(model, []);
        if (instanceContainer) {
            instanceContainer.properties.forEach(function (t) {
                var e_1, _a;
                var entity = ((t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY) && t.entity) ? t.entity : (formBuilderConfiguration && formBuilderConfiguration.genericEntities) ? formBuilderConfiguration.genericEntities[t.name] : undefined;
                if (!entity && t.entityProvider)
                    entity = t.entityProvider.call(entityObject);
                switch (t.propertyType) {
                    case PROPERTY:
                        classInstance[t.name] = _this.getValue(entityObject, t, formBuilderConfiguration);
                        break;
                    case OBJECT_PROPERTY:
                        var objectValue = _this.getValue(entityObject, t, formBuilderConfiguration);
                        if (objectValue)
                            classInstance[t.name] = _this.updateObject(entity, objectValue, formBuilderConfiguration);
                        break;
                    case ARRAY_PROPERTY:
                        var arrayObjectValue = _this.getValue(entityObject, t, formBuilderConfiguration);
                        if (arrayObjectValue && Array.isArray(arrayObjectValue)) {
                            classInstance[t.name] = [];
                            try {
                                for (var arrayObjectValue_1 = __values(arrayObjectValue), arrayObjectValue_1_1 = arrayObjectValue_1.next(); !arrayObjectValue_1_1.done; arrayObjectValue_1_1 = arrayObjectValue_1.next()) {
                                    var row = arrayObjectValue_1_1.value;
                                    var instanceObject = _this.updateObject(entity, row, formBuilderConfiguration);
                                    classInstance[t.name].push(instanceObject);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (arrayObjectValue_1_1 && !arrayObjectValue_1_1.done && (_a = arrayObjectValue_1.return)) _a.call(arrayObjectValue_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        break;
                }
            });
        }
        return classInstance;
    };
    BaseFormBuilder.prototype.instaceProvider = function (instanceFunc, entityObject) {
        return instanceProvider(instanceFunc, entityObject);
    };
    BaseFormBuilder.prototype.getDefaultValue = function (propertyInfo, value, formBuilderConfiguration) {
        var defaultValue = (formBuilderConfiguration && formBuilderConfiguration.propsConfig && formBuilderConfiguration.propsConfig[propertyInfo.name] && formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue && !RegexValidator.isNotBlank(value)) ? formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue : (propertyInfo.defaultValue != undefined && !RegexValidator.isNotBlank(value)) ?
            propertyInfo.defaultValue :
            value;
        return defaultValue;
    };
    BaseFormBuilder.prototype.sanitizeValue = function (instanceContainer, propertyName, value, entityObject, baseObject) {
        var e_2, _a;
        if (instanceContainer.sanitizers && instanceContainer.sanitizers[propertyName]) {
            try {
                for (var _b = __values(instanceContainer.sanitizers[propertyName]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sanitizer = _c.value;
                    value = SANITIZERS[sanitizer.name](value, sanitizer.config);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (entityObject[propertyName] !== undefined && entityObject[propertyName] !== value)
            entityObject[propertyName] = value;
        if (baseObject[propertyName] !== undefined && baseObject[propertyName] !== value)
            baseObject[propertyName] = value;
        return value;
    };
    BaseFormBuilder.prototype.getValue = function (entityObject, propertyInfo, formBuilderConfiguration) {
        var propValue = (propertyInfo.dataPropertyName) ? entityObject[propertyInfo.dataPropertyName] : entityObject[propertyInfo.name];
        return this.getDefaultValue(propertyInfo, propValue, formBuilderConfiguration);
    };
    BaseFormBuilder.prototype.setObjectValue = function (entityObject, classInstance) {
        for (var column in entityObject) {
            classInstance[column] = entityObject[column];
        }
    };
    return BaseFormBuilder;
}());

var FormBuilderConfiguration = /** @class */ (function () {
    function FormBuilderConfiguration(formBuilderConfiguration) {
        if (formBuilderConfiguration)
            for (var column in formBuilderConfiguration)
                this[column] = formBuilderConfiguration[column];
    }
    return FormBuilderConfiguration;
}());

function conditionalChangeValidator(conditionalValidationProps) {
    var oldValue = undefined;
    var setTimeOut = function (control) {
        var timeOut = setTimeout(function (t) {
            clearTimeout(timeOut);
            control.updateValueAndValidity();
        }, 100);
    };
    return function (control) {
        var value = control.value;
        if (control.parent && oldValue != value) {
            var rootFormGroup_1 = ApplicationUtil.getRootFormGroup(control);
            var parentFormGroup_1 = control.parent;
            oldValue = value;
            conditionalValidationProps.forEach(function (t) {
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup_1.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(function (formGroup) {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl);
                            }
                        });
                }
                else {
                    var splitText_1 = t.split('.');
                    if (splitText_1.length > 1) {
                        var control = null;
                        t.split('.').forEach(function (name, index) { control = (index == 0) ? rootFormGroup_1.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup_1.controls[t];
                    }
                    if (control) {
                        setTimeOut(control);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}

var DisableProvider = /** @class */ (function () {
    function DisableProvider(decoratorType, entityObject) {
        this.decoratorType = decoratorType;
        this.entityObject = entityObject;
    }
    DisableProvider.prototype.getFormGroupName = function (currentFormGroup) {
        var e_1, _a;
        var keyName = '';
        if (currentFormGroup.parent)
            try {
                for (var _b = __values(Object.keys(currentFormGroup.parent.controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var controlName = _c.value;
                    if (currentFormGroup.parent.controls[controlName] == currentFormGroup) {
                        keyName = controlName;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        return keyName;
    };
    DisableProvider.prototype.zeroArgumentProcess = function (control, columnName) {
        var disabledColumns = [];
        this.getDisabledColumns(control.parent, "" + columnName + RXCODE + "0", false).forEach(function (t) { return disabledColumns.push(t); });
        var path = this.topControlPath(control, columnName);
        var splitPath = path.split(".");
        if (splitPath.length > 1) {
            var rootFormGroup = ApplicationUtil.getRootFormGroup(control);
            this.getDisabledColumns(rootFormGroup, "" + path + RXCODE + "0", true).forEach(function (t) { return disabledColumns.push(t); });
            var controlPath = '';
            for (var i = 0; i < splitPath.length - 2; i++) {
                var controlName = splitPath[i];
                controlPath = "" + path.replace(controlName + ".", '') + RXCODE + "-0";
                if (rootFormGroup.controls[controlName]) {
                    this.getDisabledColumns(rootFormGroup.controls[controlName], controlPath, true, controlName).forEach(function (t) { return disabledColumns.push(t); });
                    rootFormGroup = rootFormGroup.controls[controlName];
                }
            }
        }
        return disabledColumns;
    };
    DisableProvider.prototype.getDisabledColumns = function (formGroup, columnName, isRoot, pathName) {
        if (pathName === void 0) { pathName = ""; }
        if (formGroup && formGroup[MODEL_INSTANCE]) {
            var instanceContainer = instanceProvider(formGroup[MODEL_INSTANCE].constructor, this.entityObject);
            return this.getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName);
        }
        return [];
    };
    DisableProvider.prototype.getChangeDetectionColumns = function (instanceContainer, columnName, isRoot, pathName) {
        var _this = this;
        if (pathName === void 0) { pathName = ""; }
        var conditionalDisableControls = [];
        var columns = instanceContainer.nonValidationDecorators[this.decoratorType].changeDetection[columnName];
        if (columns) {
            columns.forEach(function (t) {
                conditionalDisableControls.push({ controlPath: pathName ? pathName + "." + t : t, conditionalExpression: instanceContainer.nonValidationDecorators[_this.decoratorType].conditionalExpressions[t], isRoot: isRoot });
            });
        }
        return conditionalDisableControls;
    };
    DisableProvider.prototype.topControlPath = function (control, columnName) {
        if (control.parent) {
            var name_1 = this.getFormGroupName(control.parent);
            if (name_1) {
                columnName = name_1 + "." + columnName;
                return this.topControlPath(control.parent, columnName);
            }
        }
        return columnName;
    };
    DisableProvider.prototype.childControlDisabledExpression = function (formGroup, columnName, path) {
        var _this = this;
        if (path === void 0) { path = ""; }
        var disabledColumns = [];
        if (formGroup[MODEL_INSTANCE]) {
            var instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);
            if (instanceContainer && instanceContainer.properties) {
                this.getChangeDetectionColumns(instanceContainer, columnName, true, path).forEach(function (t) { return disabledColumns.push(t); });
                var props = instanceContainer.properties.filter(function (t) { return t.propertyType == OBJECT_PROPERTY; });
                props.forEach(function (t) {
                    if (formGroup.controls[t.name]) {
                        var columns = _this.getDisabledColumns(formGroup.controls[t.name], columnName, true, path ? path + "." + t.name : "" + t.name);
                        columns.forEach(function (x) { return disabledColumns.push(x); });
                        _this.childControlDisabledExpression(formGroup.controls[t.name], columnName, path ? path + "." + t.name : "" + t.name).forEach(function (y) { return disabledColumns.push(y); });
                    }
                });
            }
        }
        return disabledColumns;
    };
    DisableProvider.prototype.oneArgumentProcess = function (control, columnName) {
        var path = this.topControlPath(control, columnName);
        var rootFormGroup = ApplicationUtil.getRootFormGroup(control);
        var childColumns = this.childControlDisabledExpression(rootFormGroup, path);
        return childColumns;
    };
    return DisableProvider;
}());

var DIRTY = "dirty";
var TOUCHED = "touched";
var UNTOUCHED = "untouched";
var PRISTINE = "pristine";
var RxFormControl = /** @class */ (function (_super) {
    __extends(RxFormControl, _super);
    function RxFormControl(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {
        var _this_1 = _super.call(this, formState, validator, asyncValidator) || this;
        _this_1.entityObject = entityObject;
        _this_1.baseObject = baseObject;
        _this_1._sanitizers = _sanitizers;
        _this_1._errorMessages = [];
        _this_1._childColumns = [];
        _this_1._refDisableControls = [];
        _this_1._refMessageControls = [];
        _this_1._refClassNameControls = [];
        _this_1._isPassedExpression = false;
        _this_1._baseValue = formState === undefined ? null : _this_1.getFormState(formState);
        _this_1._isModified = false;
        _this_1.keyName = controlName;
        _this_1._errorMessageBindingStrategy = ReactiveFormConfig.get("reactiveForm.errorMessageBindingStrategy");
        _this_1.updateValueAndValidity();
        return _this_1;
    }
    Object.defineProperty(RxFormControl.prototype, "path", {
        get: function () {
            return this.parent ? this.parent.path + "." + this.keyName : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormControl.prototype, "errorMessages", {
        get: function () {
            if (!this._messageExpression) {
                if (this._errorMessages.length == 0 && this.errors)
                    this.setControlErrorMessages();
            }
            else if (this._messageExpression && !this._isPassedExpression)
                return [];
            if (!this.errors && this._errorMessages.length > 0)
                this.setControlErrorMessages();
            return this._errorMessages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormControl.prototype, "errorMessage", {
        get: function () {
            if (!this._messageExpression) {
                if (this._errorMessage == undefined && this.errors)
                    this.setControlErrorMessages();
            }
            else if (this._messageExpression && !this._isPassedExpression)
                return undefined;
            if (!this.errors && this._errorMessage)
                this.setControlErrorMessages();
            return this._errorMessage;
        },
        enumerable: true,
        configurable: true
    });
    RxFormControl.prototype.getFormState = function (value) {
        var baseValue = value;
        if (Array.isArray(value)) {
            baseValue = [];
            value.forEach(function (t) { return baseValue.push(t); });
        }
        return baseValue;
    };
    Object.defineProperty(RxFormControl.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    RxFormControl.prototype.setValue = function (value, options) {
        var parsedValue = this.getSanitizedValue(value);
        if (options && options.dirty)
            this.baseObject[this.keyName] = value;
        this.entityObject[this.keyName] = parsedValue;
        this.value = value;
        this.bindError();
        this.bindClassName();
        this.executeExpressions();
        this.callPatch();
        if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {
            this.root[VALUE_CHANGED_SYNC]();
        }
    };
    RxFormControl.prototype.getControlValue = function () {
        return this.getSanitizedValue(this.value);
    };
    RxFormControl.prototype.bindError = function () {
        if (this._messageExpression)
            this._isPassedExpression = this.executeExpression(this._messageExpression, this);
        this.setControlErrorMessages();
        this.errors = this.errors;
    };
    RxFormControl.prototype.bindClassName = function () {
        if (this.updateOnElementClass && typeof this.updateOnElementClass === "function") {
            var className = this.executeExpression(this._classNameExpression, this);
            var updateElement = this.updateOnElementClass;
            updateElement(className);
        }
    };
    RxFormControl.prototype.markAsTouched = function (opts) {
        var currentState = this.touched;
        _super.prototype.markAsTouched.call(this);
        if (currentState != this.touched)
            this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);
    };
    RxFormControl.prototype.markAsUntouched = function (opts) {
        var currentState = this.untouched;
        //super.markAsUnTouched();
        //super.markAsUnTouched();
        if (currentState != this.untouched)
            this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);
    };
    RxFormControl.prototype.markAsDirty = function (opts) {
        var currentState = this.dirty;
        _super.prototype.markAsDirty.call(this);
        if (currentState != this.dirty)
            this.runControlPropChangeExpression([DIRTY]);
    };
    RxFormControl.prototype.markAsPristine = function (opts) {
        var currentState = this.pristine;
        _super.prototype.markAsDirty.call(this);
        if (currentState != this.pristine)
            this.runControlPropChangeExpression([PRISTINE]);
    };
    RxFormControl.prototype.runControlPropChangeExpression = function (propNames) {
        var _this_1 = this;
        propNames.forEach(function (name) {
            if ((_this_1._controlProp && _this_1._messageExpression && _this_1._controlProp[name]) || (!_this_1._messageExpression && _this_1.checkErrorMessageStrategy()))
                _this_1.bindError();
            if (_this_1._classNameControlProp && _this_1._classNameControlProp[name])
                _this_1.bindClassName();
        });
    };
    RxFormControl.prototype.refresh = function () {
        this.getMessageExpression(this.parent, this.keyName);
        this.bindConditionalControls(DECORATORS.disabled, "_refDisableControls");
        this.bindConditionalControls(DECORATORS.error, "_refMessageControls");
        this.bindConditionalControls(DECORATORS.elementClass, "_refClassNameControls");
        this.executeExpressions();
        this.bindError();
    };
    RxFormControl.prototype.reset = function (value) {
        if (value !== undefined)
            this.setValue(value);
        else
            this.setValue(this.getFormState(this._baseValue));
    };
    RxFormControl.prototype.commit = function () {
        this._baseValue = this.value;
        this.callPatch();
    };
    RxFormControl.prototype.callPatch = function () {
        this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);
        if (this.parent && this.parent[PATCH])
            this.parent[PATCH](this.keyName);
    };
    RxFormControl.prototype.checkErrorMessageStrategy = function () {
        var isBind = true;
        switch (this._errorMessageBindingStrategy) {
            case ErrorMessageBindingStrategy.OnSubmit:
                isBind = this.parent.submitted;
                break;
            case ErrorMessageBindingStrategy.OnDirty:
                isBind = this.dirty;
                break;
            case ErrorMessageBindingStrategy.OnDirtyOrSubmit:
                isBind = this.dirty || this.parent.submitted;
                break;
            default:
                isBind = true;
        }
        return isBind;
    };
    RxFormControl.prototype.executeExpressions = function () {
        this.processExpression("_refDisableControls", "disabled");
        this.processExpression("_refMessageControls", "bindError");
        this.processExpression("_refClassNameControls", "bindClassName");
    };
    RxFormControl.prototype.getMessageExpression = function (formGroup, keyName) {
        if (formGroup && formGroup.modelInstance) {
            var instanceContainer = defaultContainer.get(formGroup.modelInstance.constructor);
            if (instanceContainer) {
                this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];
                this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];
                this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];
                this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];
                if (this._classNameExpression)
                    this.updateOnElementClass = true;
            }
        }
    };
    RxFormControl.prototype.getSanitizedValue = function (value) {
        var e_1, _a;
        if (this._sanitizers) {
            try {
                for (var _b = __values(this._sanitizers), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sanitizer = _c.value;
                    value = SANITIZERS[sanitizer.name](value, sanitizer.config);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return value;
    };
    RxFormControl.prototype.bindConditionalControls = function (decoratorType, refName) {
        var _this = this;
        this._disableProvider = new DisableProvider(decoratorType, this.entityObject);
        _this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);
        this._disableProvider.oneArgumentProcess(this, "" + this.keyName + RXCODE + "1").forEach(function (t) { return _this[refName].push(t); });
    };
    RxFormControl.prototype.setControlErrorMessages = function () {
        var _this_1 = this;
        if ((!this._messageExpression && this.checkErrorMessageStrategy()) || this._isPassedExpression) {
            this._errorMessages = [];
            if (this.errors) {
                Object.keys(this.errors).forEach(function (t) {
                    _this_1.parent[CONTROLS_ERROR][_this_1.keyName] = _this_1._errorMessage = _this_1.getErrorMessage(_this_1.errors, t);
                    if (!_this_1._errorMessage) {
                        var errorObject = ObjectMaker.toJson(t, undefined, [_this_1.errors[t][t]]);
                        _this_1.parent[CONTROLS_ERROR][_this_1.keyName] = _this_1._errorMessage = _this_1.getErrorMessage(errorObject, t);
                    }
                    _this_1._errorMessages.push(_this_1._errorMessage);
                });
            }
            else {
                this._errorMessage = undefined;
                this.parent[CONTROLS_ERROR][this.keyName] = undefined;
                delete this.parent[CONTROLS_ERROR][this.keyName];
            }
        }
        else {
            this._errorMessages = [];
            this._errorMessage = undefined;
        }
    };
    RxFormControl.prototype.getErrorMessage = function (errorObject, keyName) {
        if (errorObject[keyName][MESSAGE])
            return errorObject[keyName][MESSAGE];
        return;
    };
    RxFormControl.prototype.processExpression = function (propName, operationType) {
        var e_2, _a;
        var _this = this;
        if (_this[propName])
            try {
                for (var _b = __values(_this[propName]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var controlInfo = _c.value;
                    var control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);
                    if (control) {
                        if (operationType == "disabled") {
                            var result = this.executeExpression(controlInfo.conditionalExpression, control);
                            if (result)
                                control.disable();
                            else
                                control.enable();
                        }
                        else if (operationType == "bindError")
                            control.bindError();
                        else if (operationType == "bindClassName")
                            control.bindClassName();
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
    };
    RxFormControl.prototype.executeExpression = function (expression, control) {
        return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);
    };
    RxFormControl.prototype.getValue = function (value) {
        return value !== undefined && value !== null && value !== "" ? value : "";
    };
    return RxFormControl;
}(AbstractControl));

var OBJECT = "object";
var BOOLEAN$1 = "boolean";
var FormDataProvider = /** @class */ (function () {
    function FormDataProvider() {
    }
    FormDataProvider.prototype.convertToFormData = function (jObject) {
        return this.convertFormData(jObject);
    };
    FormDataProvider.prototype.convertFormData = function (jObject, currentFormData, parentKey) {
        var _this = this;
        var formData = currentFormData || new FormData();
        var propName = '';
        for (var columnName in jObject) {
            propName = !parentKey ? columnName : parentKey + "[" + columnName + "]";
            if (Array.isArray(jObject[columnName])) {
                jObject[columnName].forEach(function (row, index) {
                    propName = columnName + "[" + index + "]";
                    if (typeof row === OBJECT)
                        _this.convertFormData(row, formData, propName);
                    else
                        _this.nonObjectValueBind(row, formData, propName);
                });
            }
            else if (jObject[columnName] !== null && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {
                this.convertFormData(jObject[columnName], formData, propName);
            }
            else {
                this.nonObjectValueBind(jObject[columnName], formData, propName);
            }
        }
        return formData;
    };
    FormDataProvider.prototype.nonObjectValueBind = function (value, formData, propName) {
        if (typeof value === BOOLEAN$1) {
            formData.append(propName, +value ? '1' : '0');
        }
        else if (value instanceof FileList) {
            for (var i = 0; i < value.length; i++) {
                var itemValue = value.item(i);
                formData.append(propName + "[" + i + "]", itemValue);
            }
        }
        else {
            if (RegexValidator.isNotBlank(value))
                formData.append(propName, value);
        }
    };
    return FormDataProvider;
}());

function isResetControl(controlName, control, options) {
    var isReset = true;
    if (options) {
        isReset = false;
        if (options.resetType)
            switch (options.resetType) {
                case ResetFormType.ControlsOnly:
                    isReset = control instanceof AbstractControl;
                    break;
                case ResetFormType.ControlsAndFormGroupsOnly:
                    isReset = control instanceof AbstractControl;
                    break;
                case ResetFormType.FormGroupsOnly:
                    isReset = control instanceof RxFormGroup;
                    break;
                case ResetFormType.FormArraysOnly:
                    isReset = control instanceof AbstractFormArray;
                    break;
                case ResetFormType.DefinedPropsOnly:
                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;
                    break;
                default:
                    isReset = true;
                    break;
            }
        if (!isReset && options.with)
            isReset = options.with.filter(function (x) { return x.split('.')[0] == controlName.split('.')[0]; })[0] !== undefined;
        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))
            isReset = true;
    }
    return isReset;
}
function getNestedOptions(controlName, options) {
    if (options) {
        var jObjectOptions = {};
        if (options.resetType)
            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;
        if (options.with) {
            var nestedControls = options.with.filter(function (t) { return t.split('.')[0] == controlName; });
            var controlNames = nestedControls.map(function (x) {
                var splitControls = x.split('.');
                splitControls.splice(0, 1);
                return splitControls.join('.');
            });
            jObjectOptions.with = controlNames;
        }
        if (options.value && options.value[controlName])
            jObjectOptions.value = options.value[controlName];
        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;
        return jObjectOptions;
    }
    return undefined;
}

var CHECKBOX = 'checkbox';
var FormControlDirective = /** @class */ (function () {
    function FormControlDirective(element, formControl) {
        this.element = element;
        this.formControl = formControl;
        this.bindEvent();
        this.setValue();
        this.subscribeOnChange();
    }
    FormControlDirective.prototype.bindEvent = function () {
        this._onChange = this.onChange.bind(this);
        this._onBlur = this.onBlur.bind(this);
        this.element.addEventListener("input", this._onChange);
        this.element.addEventListener("blur", this._onBlur);
    };
    FormControlDirective.prototype.onChange = function (event) {
        this.formControl.setValue(event.target.value);
    };
    FormControlDirective.prototype.onBlur = function (event) {
        this.formControl.markAsTouched();
    };
    FormControlDirective.prototype.setValueOnControl = function () {
        this.element.value = this.formControl.value != null ? this.formControl.value : '';
    };
    FormControlDirective.prototype.setValue = function () {
        var value = this.formControl.value === "" || this.formControl.value === undefined ? "" : this.formControl.value;
        switch (this.element.type) {
            case CHECKBOX:
                this.element.checked = value !== null && value !== false;
                break;
            default:
                this.element.value = value;
                break;
        }
    };
    FormControlDirective.prototype.subscribeOnChange = function () {
        var _this = this;
        this.formControl.subscribe(function () {
            if (_this.element.value != _this.formControl.value)
                _this.setValue();
            if (_this.formControl.invalid) {
                if (!_this.element.classList.contains("rx-invalid"))
                    _this.element.classList.add("rx-invalid");
            }
            else {
                if (_this.element.classList.contains("rx-invalid"))
                    _this.element.classList.remove("rx-invalid");
            }
        });
    };
    FormControlDirective.prototype.destroy = function () {
        this.formControl.destroy();
        this.element.removeEventListener("input", this._onChange);
        this.element.removeEventListener("blur", this._onBlur);
    };
    return FormControlDirective;
}());

var FormGroupDirective = /** @class */ (function () {
    function FormGroupDirective(element, formGroup) {
        this.element = element;
        this.formGroup = formGroup;
        this._formControls = new Array();
        this._formGroups = new Array();
        this.map();
    }
    FormGroupDirective.prototype.map = function () {
        var _this = this;
        var childFormControls = this.element.querySelectorAll("[form-control-path^=\"" + this.formGroup.path + "\"]");
        if (childFormControls) {
            childFormControls.forEach(function (t) {
                var formControlName = t.getAttribute("form-control-path");
                var control = _this.formGroup.get(formControlName);
                if (control instanceof RxFormControl) {
                    var formControl = new FormControlDirective(t, control);
                    _this._formControls.push(formControl);
                }
            });
        }
    };
    FormGroupDirective.prototype.destroy = function () {
        var _this = this;
        this._formControls.forEach(function (t) {
            t.destroy();
        });
        Object.keys(this.formGroup.controls).forEach(function (t) {
            if (_this.formGroup.controls[t] instanceof RxFormGroup)
                _this.formGroup.controls[t].destroy();
        });
    };
    return FormGroupDirective;
}());

var formGroupContainer = new (/** @class */ (function () {
    function class_1() {
        this.formGroups = {};
        this.groupKeyElements = {};
        this.formGroupDirectives = {};
    }
    class_1.prototype.get = function (groupKey) {
        return this.formGroups[groupKey];
    };
    class_1.prototype.saveFormGroup = function (formGroup) {
        var groupKey = formGroup.path;
        this.formGroups[formGroup.path] = formGroup;
        this.bindIt(groupKey);
    };
    class_1.prototype.mapElement = function (groupKey, element) {
        this.groupKeyElements[groupKey] = element;
        this.bindIt(groupKey);
    };
    class_1.prototype.bindIt = function (groupKey) {
        var _this = this;
        if (this.groupKeyElements[groupKey] && this.formGroups[groupKey]) {
            setTimeout(function () {
                _this.formGroupDirectives[groupKey] = new FormGroupDirective(_this.groupKeyElements[groupKey], _this.formGroups[groupKey]);
            }, 100);
        }
    };
    class_1.prototype.destroy = function (groupKey) {
        if (this.formGroupDirectives[groupKey]) {
            this.formGroupDirectives[groupKey].destroy();
            delete this.formGroupDirectives[groupKey];
        }
    };
    return class_1;
}()))();

var RxFormGroup = /** @class */ (function (_super) {
    __extends(RxFormGroup, _super);
    function RxFormGroup(model, entityObject, controls, formBuilderConfiguration) {
        var _this = _super.call(this, [], []) || this;
        _this.model = model;
        _this.entityObject = entityObject;
        _this.formBuilderConfiguration = formBuilderConfiguration;
        _this._submitted = false;
        _this._modified = {};
        _this._isModified = false;
        _this.props = {};
        _this.controls = controls;
        Object.keys(_this.controls).forEach(function (t) {
            if (ReactiveFormConfig.clientLib == ClientLibrary.Vue && _this.controls[t] instanceof RxFormControl)
                _this.defineProperty(t);
            _this.controls[t].parent = _this;
        });
        _this.baseObject = {};
        for (var column in _this.entityObject)
            _this.baseObject[column] = _this.entityObject[column];
        _this.formDataProvider = new FormDataProvider();
        return _this;
    }
    RxFormGroup.prototype.bindPrimaryKey = function (modelInstance, jObject) {
        var instanceContainer = defaultContainer.get(modelInstance.constructor);
        if (instanceContainer && instanceContainer.properties) {
            var primaryKeyProp = instanceContainer.properties.filter(function (x) { return x.isPrimaryKey; })[0];
            if (primaryKeyProp && this.modelInstance[primaryKeyProp.name])
                jObject[primaryKeyProp.name] = this.modelInstance[primaryKeyProp.name];
        }
    };
    Object.defineProperty(RxFormGroup.prototype, "modifiedValue", {
        get: function () {
            var jObject = {};
            if (Object.keys(this._modified).length > 0) {
                this.bindPrimaryKey(this.modelInstance, jObject);
                for (var columnName in this._modified) {
                    if (this.controls[columnName] instanceof RxFormGroup)
                        jObject[columnName] = this.controls[columnName].modifiedValue;
                    else if (this.controls[columnName] instanceof RxFormArray) {
                        var formArray = this.controls[columnName];
                        jObject[columnName] = [];
                        for (var i = 0; i < this._modified[columnName].length; i++) {
                            var modifiedValue = formArray.controls[i].modifiedValue;
                            if (Object.keys(modifiedValue).length > 0)
                                jObject[columnName].push(modifiedValue);
                        }
                        if (jObject[columnName].length == 0)
                            delete jObject[columnName];
                    }
                    else
                        jObject[columnName] = this._modified[columnName];
                }
                return jObject;
            }
            return this._modified;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    RxFormGroup.prototype.patch = function (controlName) {
        if (controlName) {
            var control = this.controls[controlName];
            this.processModified(controlName, control);
        }
        else {
            this.nestedFormsModification();
        }
        this._isModified = Object.keys(this._modified).length > 0;
        if (!this._isModified)
            this.nestedArrayIsModified();
        if (this.parent)
            this.parent.patch();
    };
    RxFormGroup.prototype.isDirty = function () {
        var e_1, _a;
        var isDirty = false;
        for (var name_1 in this.value) {
            var currentValue = this.modelInstance[name_1];
            if (!(this.controls[name_1] instanceof RxFormGroup || this.controls[name_1] instanceof RxFormArray)) {
                isDirty = ApplicationUtil.notEqualTo(this.baseObject[name_1], currentValue);
            }
            else if (this.controls[name_1] instanceof RxFormGroup)
                isDirty = this.controls[name_1].isDirty();
            else if (this.controls[name_1] instanceof RxFormArray) {
                try {
                    for (var _b = (e_1 = void 0, __values(this.controls[name_1].controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var formGroup = _c.value;
                        isDirty = formGroup.isDirty();
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (isDirty)
                break;
        }
        return isDirty;
    };
    RxFormGroup.prototype.resetForm = function (options) {
        for (var name_2 in this.controls) {
            if (isResetControl(name_2, this.controls[name_2], options)) {
                if (this.controls[name_2] instanceof RxFormGroup)
                    this.controls[name_2].resetForm(getNestedOptions(name_2, options));
                else if (this.controls[name_2] instanceof RxFormArray) {
                    this.controls[name_2].resetForm(options && options.value ? options.value[name_2] : undefined);
                }
                else {
                    if (options && options.value && RegexValidator.isNotBlank(options.value[name_2]))
                        this.controls[name_2].reset(options.value[name_2]);
                    else
                        this.controls[name_2].reset();
                }
            }
        }
    };
    RxFormGroup.prototype.commit = function () {
        for (var name_3 in this.controls) {
            if (this.controls[name_3] instanceof RxFormGroup)
                this.controls[name_3].commit();
            else if (this.controls[name_3] instanceof RxFormArray) {
                this.controls[name_3].commit();
            }
            else {
                this.controls[name_3].commit();
            }
        }
    };
    RxFormGroup.prototype.patchModelValue = function (value, options) {
        var e_2, _a;
        if (value) {
            for (var name_4 in this.controls) {
                if (this.controls[name_4] instanceof RxFormGroup && value[name_4])
                    this.controls[name_4].patchModelValue(value[name_4], options);
                else if (this.controls[name_4] instanceof RxFormArray && Array.isArray(value[name_4])) {
                    var index = 0;
                    try {
                        for (var _b = (e_2 = void 0, __values(this.controls[name_4].controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var formGroup = _c.value;
                            if (value[name_4][index])
                                formGroup.patchModelValue(value[name_4][index], options);
                            index = index + 1;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else if (value[name_4] !== undefined)
                    this.controls[name_4].patchValue(value[name_4], options);
            }
        }
    };
    RxFormGroup.prototype.getErrorSummary = function (onlyMessage) {
        var _this = this;
        var jObject = {};
        Object.keys(this.controls).forEach(function (columnName) {
            var e_3, _a;
            if (_this.controls[columnName] instanceof RxFormGroup) {
                var error = _this.controls[columnName].getErrorSummary(false);
                if (Object.keys(error).length > 0)
                    jObject[columnName] = error;
            }
            else if (_this.controls[columnName] instanceof RxFormArray) {
                var index = 0;
                try {
                    for (var _b = __values(_this.controls[columnName].controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var formGroup = _c.value;
                        var error = formGroup.getErrorSummary(false);
                        if (Object.keys(error).length > 0) {
                            error.index = index;
                            if (!jObject[columnName])
                                jObject[columnName] = [];
                            jObject[columnName].push(error);
                        }
                        index++;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            else {
                if (_this.controls[columnName].errors) {
                    var error = _this.controls[columnName].errors;
                    if (onlyMessage)
                        for (var validationName in error)
                            jObject[columnName] = error[validationName].message;
                    else
                        jObject[columnName] = error;
                }
            }
        });
        return jObject;
    };
    RxFormGroup.prototype.valueChangedSync = function () {
        var _this = this;
        Object.keys(this.controls).forEach(function (columnName) {
            var e_4, _a;
            if (!(_this.controls[columnName] instanceof RxFormArray) && !(_this.controls[columnName] instanceof RxFormGroup) && !(_this.entityObject[columnName] instanceof RxFormControl) && ApplicationUtil.notEqualTo(_this.controls[columnName].getControlValue(), _this.entityObject[columnName])) {
                _this.controls[columnName].setValue(_this.entityObject[columnName], { updateChanged: true });
            }
            else if ((_this.controls[columnName] instanceof RxFormArray)) {
                try {
                    for (var _b = __values(_this.controls[columnName].controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var formGroup = _c.value;
                        formGroup.valueChangedSync();
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            else if ((_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].valueChangedSync();
            }
        });
    };
    RxFormGroup.prototype.refreshDisable = function () {
        var _this = this;
        Object.keys(this.controls).forEach(function (columnName) {
            if (!(_this.controls[columnName] instanceof RxFormArray || _this.controls[columnName] instanceof RxFormArray) && !(_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].refresh();
            }
            else if ((_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].refreshDisable();
            }
        });
    };
    RxFormGroup.prototype.bindErrorMessages = function () {
        var _this = this;
        Object.keys(this.controls).forEach(function (columnName) {
            if (!(_this.controls[columnName] instanceof RxFormArray || _this.controls[columnName] instanceof RxFormArray) && !(_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].bindError();
            }
            else if ((_this.controls[columnName] instanceof RxFormGroup)) {
                _this.controls[columnName].bindErrorMessages();
            }
        });
    };
    Object.defineProperty(RxFormGroup.prototype, "submitted", {
        get: function () {
            return this._submitted;
        },
        set: function (value) {
            var _this = this;
            this._submitted = value;
            Object.keys(this.controls).forEach(function (columnName) {
                var e_5, _a;
                if (_this.controls[columnName] instanceof RxFormArray) {
                    var formArray = _this.controls[columnName];
                    try {
                        for (var _b = __values(formArray.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var formGroup = _c.value;
                            formGroup.submitted = value;
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                else if (_this.controls[columnName] instanceof RxFormGroup) {
                    _this.controls[columnName].submitted = value;
                }
                else
                    _this.controls[columnName].bindError();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "value", {
        get: function () {
            return clone(this.entityObject);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "modelInstance", {
        get: function () {
            return this.entityObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "valid", {
        get: function () {
            return this.isValid();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "invalid", {
        get: function () {
            return !this.isValid();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RxFormGroup.prototype, "controlsError", {
        get: function () {
            return this.getErrorSummary(true);
        },
        enumerable: true,
        configurable: true
    });
    RxFormGroup.prototype.toFormData = function () {
        return this.formDataProvider.convertToFormData(this.value);
    };
    RxFormGroup.prototype.get = function (path) {
        if (path == null)
            return null;
        if (!(path instanceof Array)) {
            path = path.split(".");
        }
        if (path instanceof Array && (path.length === 0))
            return null;
        var control = null;
        for (var i = 0; i < path.length; i++) {
            var name_5 = path[i];
            if (this.controls.hasOwnProperty(name_5))
                control = this.controls[name_5];
            if (path.length > 1 && control instanceof RxFormGroup)
                control = control.get(path.slice(i + 1, path.length).join("."));
        }
        return control;
    };
    RxFormGroup.prototype.destroy = function () {
        formGroupContainer.destroy(this.path);
    };
    RxFormGroup.prototype.processModified = function (controlName, control) {
        if (control.isModified)
            this._modified[controlName] = control.value;
        else
            delete this._modified[controlName];
        this._isModified = Object.keys(this._modified).length > 0;
    };
    RxFormGroup.prototype.nestedArrayIsModified = function () {
        for (var controlName in this.controls) {
            if (this.controls[controlName] instanceof RxFormArray)
                this._isModified = this.controls[controlName].isModified;
            if (this._isModified)
                break;
        }
    };
    RxFormGroup.prototype.nestedFormsModification = function () {
        var e_6, _a;
        for (var controlName in this.controls) {
            if (this.controls[controlName] instanceof RxFormGroup)
                this.processModified(controlName, this.controls[controlName]);
            else if (this.controls[controlName] instanceof RxFormArray) {
                if (this.controls[controlName].isModified) {
                    var formGroups = this.controls[controlName].controls;
                    this._modified[controlName] = [];
                    try {
                        for (var formGroups_1 = (e_6 = void 0, __values(formGroups)), formGroups_1_1 = formGroups_1.next(); !formGroups_1_1.done; formGroups_1_1 = formGroups_1.next()) {
                            var formGroup = formGroups_1_1.value;
                            if (formGroup.isModified) {
                                if (!this._modified[controlName])
                                    this._modified[controlName] = [];
                                this._modified[controlName].push(formGroup.modifiedValue);
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (formGroups_1_1 && !formGroups_1_1.done && (_a = formGroups_1.return)) _a.call(formGroups_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    if (this._modified[controlName].length == 0)
                        delete this._modified[controlName];
                }
                else if (this._modified[controlName])
                    delete this._modified[controlName];
            }
        }
    };
    RxFormGroup.prototype.isValid = function () {
        var e_7, _a;
        var valid = true;
        var controls = Object.keys(this.controls);
        try {
            for (var controls_1 = __values(controls), controls_1_1 = controls_1.next(); !controls_1_1.done; controls_1_1 = controls_1.next()) {
                var controlName = controls_1_1.value;
                if (!this.controls[controlName].valid) {
                    valid = false;
                    break;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (controls_1_1 && !controls_1_1.done && (_a = controls_1.return)) _a.call(controls_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return valid;
    };
    RxFormGroup.prototype.defineProperty = function (name) {
        var _this = this;
        var value = this.controls[name].value;
        Object.defineProperty(this.props, name, {
            get: function () {
                return value;
            },
            set: function (v) {
                value = v;
                _this.controls[name].setValue(v);
            }
        });
    };
    return RxFormGroup;
}(AbstractControl));

var FormProvider = /** @class */ (function () {
    function FormProvider() {
    }
    FormProvider.ProcessRule = function (control, config, isDynamicConfig) {
        if (isDynamicConfig === void 0) { isDynamicConfig = false; }
        var formGroupValue = ApplicationUtil.getParentObjectValue(control);
        var parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;
        var modelInstance = undefined;
        if (control.parent && control.parent instanceof RxFormGroup)
            modelInstance = control.parent.modelInstance;
        if (parentObject)
            this.updateFormControlValue(parentObject, control.parent.controls, control);
        else if (config.conditionalExpression)
            return false;
        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);
    };
    FormProvider.updateFormControlValue = function (parentObject, controls, control) {
        for (var controlName in parentObject) {
            if (!(parentObject[controlName] instanceof Object))
                if (controls[controlName] === control) {
                    parentObject[controlName] = control.value;
                    break;
                }
        }
    };
    return FormProvider;
}());

var ValidatorValueChecker = /** @class */ (function () {
    function ValidatorValueChecker() {
    }
    ValidatorValueChecker.pass = function (control, config) {
        if (FormProvider.ProcessRule(control, config))
            return RegexValidator.isNotBlank(control.value);
        else
            return false;
    };
    ValidatorValueChecker.passArrayValue = function (control, config) {
        if (FormProvider.ProcessRule(control, config))
            return control.value instanceof Array;
        else
            return false;
    };
    return ValidatorValueChecker;
}());

var ARRAY_CONFIG = "ArrayConfig";
var FIELD_CONFIG = "FieldConfig";
var IP_CONFIG = "IpConfig";
var NUMBER_CONFIG = "NumberConfig";
var PASSWORD_CONFIG = "PasswordConfig";
var PATTERN_CONFIG = "PatternConfig";
var RANGE_CONFIG = "RangeConfig";

var _a;
var CONFIG_REQUIRED_FIELDS = (_a = {},
    _a[ARRAY_CONFIG] = ["matchValues"],
    _a[FIELD_CONFIG] = ["fieldName"],
    _a[IP_CONFIG] = ["version"],
    _a[PASSWORD_CONFIG] = ["validation"],
    _a[NUMBER_CONFIG] = ["value"],
    _a[PATTERN_CONFIG] = ["expression"],
    _a[RANGE_CONFIG] = ["minimumNumber", "maximumNumber"],
    _a);

function getConfigObject(config, control, configName) {
    if (configName === void 0) { configName = ''; }
    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};
}
function configProvider(control, config, configName) {
    if (config.dynamicConfig) {
        var currentConfig_1 = FormProvider.ProcessRule(control, clone(config), true);
        if (typeof currentConfig_1 != "boolean") {
            currentConfig_1.conditionalExpression = config.conditionalExpression;
            currentConfig_1.dynamicConfig = config.dynamicConfig;
            Object.keys(config).forEach(function (t) {
                if ((t != "conditionalExpression" && t != "dynamicConfig") || currentConfig_1[t] === undefined) {
                    currentConfig_1[t] = config[t];
                }
            });
            return currentConfig_1;
        }
        else
            return config;
    }
    return checkRequiredProps(config, configName);
}
function checkRequiredProps(config, configName) {
    var props = CONFIG_REQUIRED_FIELDS[configName];
    if (configName) {
        props.forEach(function (prop) {
            if (config[prop] === undefined)
                throw new Error("Pass the property of '" + prop + "' with value in the " + configName + ", otherwise it won't work.");
        });
    }
    return config;
}

function alphaValidation(configModel, control, regExps, key) {
    var config = getConfigObject(configModel, control);
    if (ValidatorValueChecker.pass(control, config)) {
        var isValid = (!config || !config.allowWhiteSpace) ?
            RegexValidator.isValid(control.value, regExps[0]) :
            RegexValidator.isValid(control.value, regExps[1]);
        if (!isValid)
            return ObjectMaker.toJson(key, config, [control.value]);
    }
    return ObjectMaker.null();
}

function alphaValidator(configModel) {
    return function (control) {
        return alphaValidation(configModel, control, [RegExRule.alpha, RegExRule.alphaWithSpace], AnnotationTypes.alpha);
    };
}

function alphaNumericValidator(configModel) {
    return function (control) {
        return alphaValidation(configModel, control, [RegExRule.alphaNumeric, RegExRule.alphaNumericWithSpace], AnnotationTypes.alphaNumeric);
    };
}

function compareValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, FIELD_CONFIG);
        var compareControl = ApplicationUtil.getFormControl(config.fieldName, control);
        var controlValue = control.value;
        var compareControlValue = (compareControl) ? compareControl.value : '';
        if (RegexValidator.isNotBlank(controlValue) || RegexValidator.isNotBlank(compareControlValue)) {
            if (!(compareControl && compareControl.value === controlValue))
                return ObjectMaker.toJson(AnnotationTypes.compare, config, [controlValue, compareControlValue]);
        }
        return ObjectMaker.null();
    };
}

function containsValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (control.value.indexOf(config.value) == -1)
                return ObjectMaker.toJson(AnnotationTypes.contains, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function checkLength(length, checks) {
    var e_1, _a;
    var isPassed = false;
    try {
        for (var checks_1 = __values(checks), checks_1_1 = checks_1.next(); !checks_1_1.done; checks_1_1 = checks_1.next()) {
            var check = checks_1_1.value;
            isPassed = (check == length);
            if (isPassed)
                break;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (checks_1_1 && !checks_1_1.done && (_a = checks_1.return)) _a.call(checks_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return isPassed;
}

function calculate(numbers) {
    var numberSum = 0;
    for (var i = 0; i < numbers.length; i++)
        numberSum += parseInt(numbers.substring(i, i + 1));
    var deltas = new Array(0, 1, 2, 3, 4, -4, -3, -2, -1, 0);
    for (var i = numbers.length - 1; i >= 0; i -= 2) {
        numberSum += deltas[parseInt(numbers.substring(i, i + 1))];
    }
    var mod = numberSum % 10;
    mod = 10 - mod;
    if (mod == 10)
        mod = 0;
    return mod;
}

function creditCardValidator(configModel) {
    var cardDigits = {
        AmericanExpress: [15],
        DinersClub: [14, 16, 19],
        Discover: [16, 19],
        JCB: [16, 19],
        Maestro: [12, 16, 19],
        MasterCard: [16],
        Visa: [13, 16, 19]
    };
    function validate(creditCardNumber) {
        var digit = parseInt(creditCardNumber.substring(creditCardNumber.length - 1, creditCardNumber.length));
        return calculate(creditCardNumber.substring(0, creditCardNumber.length - 1)) == parseInt(String(digit)) ? !0 : !1;
    }
    function getCardProviderName(cardNumber) {
        var cardProviderName = "";
        return /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\d+$/.test(cardNumber) ? cardProviderName = "Maestro" : /^5[1-5]/.test(cardNumber) ? cardProviderName = "MasterCard" : /^4/.test(cardNumber) ? cardProviderName = "Visa" : /^3[47]/.test(cardNumber) ? cardProviderName = "AmericanExpress" : /^(?:2131|1800|35)/.test(cardNumber) ? cardProviderName = "JCB" : /^3(?:0[0-5]|[68])/.test(cardNumber) ? cardProviderName = "DinersClub" : /^6(?:011|5)/.test(cardNumber) && (cardProviderName = "Discover"), cardProviderName;
    }
    return function (control) {
        var e_1, _a;
        var controlValue = control.value;
        var config = getConfigObject(configModel, control);
        var parentObject = (control.parent) ? control.parent.value : undefined;
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(controlValue)) {
                var isValid = false;
                var cardTypes = config.fieldName && parentObject[config.fieldName] ? [parentObject[config.fieldName]] : config.creditCardTypes;
                var cardType = '';
                try {
                    for (var cardTypes_1 = __values(cardTypes), cardTypes_1_1 = cardTypes_1.next(); !cardTypes_1_1.done; cardTypes_1_1 = cardTypes_1.next()) {
                        var creditCardType = cardTypes_1_1.value;
                        isValid = checkLength(controlValue.length, cardDigits[creditCardType]) && getCardProviderName(controlValue) == creditCardType && validate(controlValue);
                        cardType = creditCardType;
                        if (isValid)
                            break;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (cardTypes_1_1 && !cardTypes_1_1.done && (_a = cardTypes_1.return)) _a.call(cardTypes_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (!isValid)
                    return ObjectMaker.toJson(AnnotationTypes.creditCard, config, [controlValue, cardType]);
            }
        }
        return ObjectMaker.null();
    };
}

function regexValidation(configModel, control, regExp, key) {
    var config = getConfigObject(configModel, control);
    if (ValidatorValueChecker.pass(control, config)) {
        if (!RegexValidator.isValid(control.value, regExp))
            return ObjectMaker.toJson(key, config, [control.value]);
    }
    return ObjectMaker.null();
}

function digitValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.onlyDigit, AnnotationTypes.digit);
    };
}

function emailValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.basicEmail, AnnotationTypes.email);
    };
}

function hexColorValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.strictHexColor, AnnotationTypes.hexColor);
    };
}

function lowercaseValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(control.value === control.value.toLowerCase()))
                return ObjectMaker.toJson(AnnotationTypes.lowerCase, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

var OPERATORS = {
    lessThan: "<",
    greaterThan: ">",
    lessThanEqualTo: "<=",
    greaterThanEqualTo: ">="
};

function runCondition(leftValue, rightValue, operator) {
    var result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
function dateChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value)) {
                var checkDate = dateProvider.getCompareDate(config, control);
                var currentControlValue = dateProvider.getDate(control.value);
                var isValid = operationType == AnnotationTypes.minDate ? runCondition(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}
function validateDate(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value)) {
                return ObjectMaker.toJson(operationType, config, [control.value]);
            }
        }
    }
    return ObjectMaker.null();
}

function maxDateValidator(configModel) {
    return function (control) {
        return dateChecker(control, configModel, AnnotationTypes.maxDate);
    };
}

function maxLengthValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, NUMBER_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(control.value.length <= config.value))
                return ObjectMaker.toJson(AnnotationTypes.maxLength, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function maxNumberValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, NUMBER_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(parseFloat(control.value) <= config.value))
                return ObjectMaker.toJson(AnnotationTypes.maxNumber, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function minDateValidator(configModel) {
    return function (control) {
        return dateChecker(control, configModel, AnnotationTypes.minDate);
    };
}

function minLengthValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, NUMBER_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(String(control.value).length >= config.value))
                return ObjectMaker.toJson(AnnotationTypes.minLength, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function minNumberValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, NUMBER_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(parseFloat(control.value) >= config.value))
                return ObjectMaker.toJson(AnnotationTypes.minNumber, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function passwordValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, PASSWORD_CONFIG);
        var controlValue = control.value;
        if (RegexValidator.isNotBlank(controlValue)) {
            var validation = RegexValidator.isValidPassword(config.validation, controlValue);
            if (!validation.isValid)
                return ObjectMaker.toJson(AnnotationTypes.password, config, [controlValue]);
        }
        return ObjectMaker.null();
    };
}

function rangeValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, RANGE_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(String(control.value).indexOf(".") == -1 && parseInt(control.value) >= config.minimumNumber && parseInt(control.value) <= config.maximumNumber))
                return ObjectMaker.toJson(AnnotationTypes.range, config, [control.value, config.minimumNumber, config.maximumNumber]);
        }
        return ObjectMaker.null();
    };
}

function uppercaseValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(control.value === control.value.toUpperCase()))
                return ObjectMaker.toJson(AnnotationTypes.upperCase, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function requiredValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            if (!RegexValidator.isNotBlank(control.value)) {
                return ObjectMaker.toJson(AnnotationTypes.required, config, []);
            }
        }
        return ObjectMaker.null();
    };
}

function patternValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, PATTERN_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            for (var pattern in config.expression)
                if (!(RegexValidator.isValid(control.value, config.expression[pattern])))
                    return ObjectMaker.toJson(pattern, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function timeValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var isValid = config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.time, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function urlValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.url, AnnotationTypes.url);
    };
}

function jsonValidator(configModel) {
    function process(value) {
        var result = false;
        try {
            var json = JSON.parse(value);
            result = !!json && typeof json === 'object';
        }
        catch (ex) {
            result = false;
        }
        return result;
    }
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (process(control.value))
                return ObjectMaker.toJson(AnnotationTypes.json, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function relationalCheck(control, config, relationalOperatorName) {
    config = getConfigObject(config, control);
    var matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
    var matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {
            var isValid = false;
            switch (relationalOperatorName) {
                case AnnotationTypes.greaterThan:
                    isValid = parseFloat(control.value) > parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.lessThan:
                    isValid = parseFloat(control.value) < parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.greaterThanEqualTo:
                    isValid = parseFloat(control.value) >= parseFloat(matchControlValue);
                    break;
                case AnnotationTypes.lessThanEqualTo:
                    isValid = parseFloat(control.value) <= parseFloat(matchControlValue);
                    break;
            }
            if (!isValid)
                return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);
        }
    }
    return ObjectMaker.null();
}

function greaterThanValidator(configModel) {
    return function (control) {
        return relationalCheck(control, configModel, AnnotationTypes.greaterThan);
    };
}

function greaterThanEqualToValidator(configModel) {
    return function (control) {
        return relationalCheck(control, configModel, AnnotationTypes.greaterThanEqualTo);
    };
}

function lessThanEqualToValidator(configModel) {
    return function (control) {
        return relationalCheck(control, configModel, AnnotationTypes.lessThanEqualTo);
    };
}

function lessThanValidator(configModel) {
    return function (control) {
        return relationalCheck(control, configModel, AnnotationTypes.lessThan);
    };
}

function choiceValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            if (control.value instanceof Array) {
                config.minLength = (config.minLength == undefined) ? 0 : config.minLength;
                config.maxLength = (config.maxLength == undefined) ? 0 : config.maxLength;
                if ((((control.value.length) < config.minLength) || (config.maxLength !== 0 && control.value.length > config.maxLength)))
                    return ObjectMaker.toJson(AnnotationTypes.choice, config, [control.value]);
            }
        }
        return ObjectMaker.null();
    };
}

function differentValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, FIELD_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            var differentControl = ApplicationUtil.getFormControl(config.fieldName, control);
            var differentControlValue = (differentControl) ? differentControl.value : '';
            if (!(differentControl && differentControl.value != control.value))
                return ObjectMaker.toJson(AnnotationTypes.different, config, [control.value, differentControlValue]);
        }
        return ObjectMaker.null();
    };
}

function numericValidator(configModel) {
    return function (control) {
        if (configModel && (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.numeric]))
            ApplicationUtil.configureControl(control, configModel, AnnotationTypes.numeric);
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!RegexValidator.isValid(control.value, ApplicationUtil.numericValidation(config.allowDecimal, config.acceptValue)))
                return ObjectMaker.toJson(AnnotationTypes.numeric, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function evenValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(control.value % 2 == 0))
                return ObjectMaker.toJson(AnnotationTypes.even, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function oddValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(!(control.value % 2 == 0)) || !ApplicationUtil.isNumeric(control.value))
                return ObjectMaker.toJson(AnnotationTypes.odd, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function factorValidator(configModel) {
    function positiveFactors(dividend, value) {
        var isPositive = false;
        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {
            if (dividend % index === 0) {
                if (index == value)
                    isPositive = true;
                if (dividend / index !== index)
                    if ((dividend / index) == value)
                        isPositive = true;
                if (isPositive)
                    break;
            }
        }
        return isPositive;
    }
    return function (control) {
        var config = getConfigObject(configModel, control);
        var dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
        var dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {
                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))
                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);
            }
        }
        return ObjectMaker.null();
    };
}

function leapYearValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var isValid = (control.value % 100 === 0) ? (control.value % 400 === 0) : (control.value % 4 === 0);
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.leapYear, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function allOfValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control, ARRAY_CONFIG);
        if (ValidatorValueChecker.passArrayValue(control, config)) {
            var testResult = false;
            var _loop_1 = function (value) {
                testResult = control.value.some(function (y) { return y == value; });
                if (!testResult)
                    return "break";
            };
            try {
                for (var _b = __values(config.matchValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    var state_1 = _loop_1(value);
                    if (state_1 === "break")
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!testResult)
                return ObjectMaker.toJson(AnnotationTypes.allOf, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function oneOfValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control, ARRAY_CONFIG);
        if (ValidatorValueChecker.passArrayValue(control, config)) {
            var testResult = false;
            var _loop_1 = function (value) {
                testResult = control.value.some(function (y) { return y == value; });
                if (testResult)
                    return "break";
            };
            try {
                for (var _b = __values(config.matchValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    var state_1 = _loop_1(value);
                    if (state_1 === "break")
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!testResult)
                return ObjectMaker.toJson(AnnotationTypes.oneOf, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function noneOfValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control, ARRAY_CONFIG);
        if (FormProvider.ProcessRule(control, config)) {
            var testResult = false;
            var _loop_1 = function (value) {
                var matchValue = ApplicationUtil.lowerCaseWithTrim(value);
                testResult = Array.isArray(control.value) ? control.value.some(function (y) { return ApplicationUtil.lowerCaseWithTrim(y) === matchValue; }) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;
                if (testResult)
                    return "break";
            };
            try {
                for (var _b = __values(config.matchValues), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    var state_1 = _loop_1(value);
                    if (state_1 === "break")
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (testResult)
                return ObjectMaker.toJson(AnnotationTypes.noneOf, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function macValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.macId, AnnotationTypes.mac);
    };
}

function asciiValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.ascii, AnnotationTypes.ascii);
    };
}

function dataUriValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.dataUri, AnnotationTypes.dataUri);
    };
}

function portValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var isValid = RegexValidator.isValid(control.value, RegExRule.onlyDigit) && (control.value >= 0 && control.value <= 65535);
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.port, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function latLongValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var splitText = control.value.split(',');
            if (!(splitText.length > 1 && RegexValidator.isValid(splitText[0], RegExRule.lat) && RegexValidator.isValid(splitText[1], RegExRule.long)))
                return ObjectMaker.toJson(AnnotationTypes.latLong, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function extensionValidator(configModel) {
    return function (control, files) {
        var config = getConfigObject(configModel, control);
        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.extension])
            ApplicationUtil.configureControl(control, config, AnnotationTypes.extension);
        if (files && FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value)) {
                var testResult = true;
                var extension_1 = '';
                for (var i = 0; i < files.length; i++) {
                    var file = files.item(i);
                    var splitText = file.name.split(".");
                    extension_1 = splitText[splitText.length - 1];
                    var result = config.extensions.filter(function (t) { return extension_1.toLowerCase() == t.toLowerCase(); })[0];
                    if (!result) {
                        testResult = false;
                        break;
                    }
                }
                if (!testResult)
                    return ObjectMaker.toJson(AnnotationTypes.extension, config, [extension_1, config.extensions.join(",")]);
            }
        }
        return ObjectMaker.null();
    };
}

function fileSizeValidator(configModel) {
    return function (control, files) {
        var config = getConfigObject(configModel, control);
        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.fileSize])
            ApplicationUtil.configureControl(control, config, AnnotationTypes.fileSize);
        if (files && FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value)) {
                var minFileSize = config.minSize ? config.minSize : 0;
                var testResult = false;
                var fileSize = 0;
                for (var i = 0; i < files.length; i++) {
                    var file = files.item(i);
                    fileSize = file.size;
                    testResult = (!(fileSize >= minFileSize && fileSize <= config.maxSize));
                    if (testResult)
                        break;
                }
                if (testResult)
                    return ObjectMaker.toJson(AnnotationTypes.fileSize, config, [fileSize, config.maxSize]);
            }
        }
        return ObjectMaker.null();
    };
}

function endsWithValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var endString = String(control.value).substr(control.value.length - config.value.length, config.value.length);
            if (endString != config.value)
                return ObjectMaker.toJson(AnnotationTypes.endsWith, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function startsWithValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var startString = String(control.value).substr(0, config.value.length);
            if (startString != config.value)
                return ObjectMaker.toJson(AnnotationTypes.startsWith, config, [control.value, config.value]);
        }
        return ObjectMaker.null();
    };
}

function primeNumberValidator(configModel) {
    function isPrime(value) {
        var isPrimeNumber = value != 1;
        for (var i = 2; i < value; i++) {
            if (value % i == 0) {
                isPrimeNumber = false;
                break;
            }
        }
        return isPrimeNumber;
    }
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!ApplicationUtil.isNumeric(control.value) || !isPrime(control.value))
                return ObjectMaker.toJson(AnnotationTypes.primeNumber, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function latitudeValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.lat, AnnotationTypes.latitude);
    };
}

function longitudeValidator(configModel) {
    return function (control) {
        return regexValidation(configModel, control, RegExRule.long, AnnotationTypes.longitude);
    };
}

function composeValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            if (config.validators) {
                var result = undefined;
                try {
                    for (var _b = __values(config.validators), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var validator = _c.value;
                        result = validator(control);
                        if (result)
                            break;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (result)
                    return (config.messageKey || config.message) ? ObjectMaker.toJson(config.messageKey || AnnotationTypes.compose, config, [control.value]) : result;
            }
        }
        return ObjectMaker.null();
    };
}

function ruleValidator(configModel, entity) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            var result = null;
            try {
                for (var _b = __values(config.customRules), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var rule = _c.value;
                    result = rule(entity);
                    if (result)
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (result)
                return result;
        }
        return ObjectMaker.null();
    };
}

function fileValidator(configModel) {
    return function (control, files) {
        var config = getConfigObject(configModel, control);
        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.file])
            ApplicationUtil.configureControl(control, config, AnnotationTypes.file);
        if (files) {
            if (FormProvider.ProcessRule(control, config)) {
                if (RegexValidator.isNotBlank(control.value)) {
                    var minFiles = config.minFiles ? config.minFiles : 0;
                    var maxFiles = config.maxFiles ? config.maxFiles : files.length;
                    if (!(files.length > 0 && files[0] instanceof File && files.length >= minFiles && files.length <= maxFiles))
                        return ObjectMaker.toJson(AnnotationTypes.file, config, [files.length, minFiles, maxFiles]);
                }
            }
        }
        return ObjectMaker.null();
    };
}

function uniqueValidator(configModel) {
    var setTimeoutFunc = function (invalidateControls, controlValues) {
        var timeOut = setTimeout(function () {
            invalidateControls.forEach(function (t) {
                var isMatched = controlValues.filter(function (x) { return x == t.value; })[0];
                if (!isMatched)
                    t.updateValueAndValidity();
            });
            clearTimeout(timeOut);
        }, 200);
    };
    var additionalValidation = function (config, fieldName, formGroup, formArray, currentValue) {
        var indexOf = formArray.controls.indexOf(formGroup);
        var formArrayValue = [];
        if (indexOf != -1) {
            formArray.value.forEach(function (t, i) {
                if (indexOf != i)
                    formArrayValue.push(t);
            });
            return config.additionalValidation(currentValue, indexOf, fieldName, formGroup.value, formArrayValue);
        }
        return false;
    };
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value)) {
                var formArray = ApplicationUtil.getParentFormArray(control);
                var parentFormGroup = control.parent ? control.parent : undefined;
                var invalidateControls = [];
                var controlValues = [];
                if (formArray && parentFormGroup) {
                    var currentValue = control.value;
                    var fieldName_1 = ApplicationUtil.getFormControlName(control);
                    var isMatched = false;
                    var _loop_1 = function (formGroup) {
                        if (formGroup != parentFormGroup) {
                            isMatched = (ApplicationUtil.toLower(formGroup.controls[fieldName_1].value) == ApplicationUtil.toLower(currentValue) && !(formGroup.controls[fieldName_1].errors && formGroup.controls[fieldName_1].errors[AnnotationTypes.unique]));
                            if (formGroup.controls[fieldName_1].errors && formGroup.controls[fieldName_1].errors[AnnotationTypes.unique]) {
                                matchedControl = formArray.controls.filter(function (t) { return t.controls[fieldName_1] != formGroup.controls[fieldName_1] && ApplicationUtil.toLower(t.controls[fieldName_1].value) == ApplicationUtil.toLower(formGroup.controls[fieldName_1].value); })[0];
                                if (!matchedControl)
                                    invalidateControls.push(formGroup.controls[fieldName_1]);
                            }
                            else
                                controlValues.push(formGroup.controls[fieldName_1].value);
                        }
                        if (isMatched)
                            return "break";
                    };
                    var matchedControl;
                    try {
                        for (var _b = __values(formArray.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var formGroup = _c.value;
                            var state_1 = _loop_1(formGroup);
                            if (state_1 === "break")
                                break;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (invalidateControls.length > 0)
                        setTimeoutFunc(invalidateControls, controlValues);
                    var validation = false;
                    if (config.additionalValidation) {
                        validation = additionalValidation(config, fieldName_1, parentFormGroup, formArray, currentValue);
                    }
                    if (isMatched && !validation)
                        return ObjectMaker.toJson(AnnotationTypes.unique, config, [control.value]);
                }
            }
        }
        return ObjectMaker.null();
    };
}

function imageValidator(configModel) {
    return function (control, files) {
        var config = getConfigObject(configModel, control);
        if (!control[VALIDATOR_CONFIG] || !control[VALIDATOR_CONFIG][AnnotationTypes.image])
            ApplicationUtil.configureControl(control, config, AnnotationTypes.image);
        if (!files)
            return ObjectMaker.null();
        return new Promise(function (resolve, reject) {
            if (FormProvider.ProcessRule(control, config)) {
                if (RegexValidator.isNotBlank(control.value)) {
                    var testResult_1 = false;
                    var _loop_1 = function () {
                        var file = files.item(i);
                        var type = file.type ? file.type.split('/') : [];
                        testResult_1 = type.length > 1 && type[0] == "image";
                        if (!testResult_1)
                            return "break";
                        var image = new Image();
                        config.minWidth = config.minWidth ? config.minWidth : 0;
                        config.minHeight = config.minHeight ? config.minHeight : 0;
                        image.onload = function () {
                            testResult_1 = (image.width >= config.minWidth && image.height >= config.minHeight) && (image.width <= config.maxWidth && image.height <= config.maxHeight);
                            if (!testResult_1)
                                resolve(ObjectMaker.toJson(AnnotationTypes.image, config, [image.width, image.height]));
                            else
                                resolve(ObjectMaker.null());
                        };
                        image.onerror = function () {
                            resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));
                        };
                        image.src = URL.createObjectURL(file);
                    };
                    for (var i = 0; i < files.length; i++) {
                        var state_1 = _loop_1();
                        if (state_1 === "break")
                            break;
                    }
                    if (!testResult_1)
                        resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));
                }
            }
            return ObjectMaker.null();
        });
    };
}

function notEmptyValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            if (!RegexValidator.isNotBlank(control.value, true)) {
                return ObjectMaker.toJson(AnnotationTypes.notEmpty, config, []);
            }
        }
        return ObjectMaker.null();
    };
}

function checkIpV4(value) {
    var e_1, _a;
    var isValid = RegexValidator.isValid(value, RegExRule.ipV4);
    if (isValid) {
        var splitDots = value.split('.');
        try {
            for (var splitDots_1 = __values(splitDots), splitDots_1_1 = splitDots_1.next(); !splitDots_1_1.done; splitDots_1_1 = splitDots_1.next()) {
                var ipNum = splitDots_1_1.value;
                isValid = ipNum <= 255;
                if (!isValid)
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (splitDots_1_1 && !splitDots_1_1.done && (_a = splitDots_1.return)) _a.call(splitDots_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return isValid;
}
function checkIpV6(value) {
    return RegexValidator.isValid(value, RegExRule.ipV6);
}

function ipValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control, IP_CONFIG);
        if (ValidatorValueChecker.pass(control, config)) {
            var values = config.isCidr ? control.value.split('/') : [control.value];
            var isValid = (config.version == IpVersion.V4) ?
                checkIpV4(values[0]) :
                (config.version == IpVersion.V6) ?
                    checkIpV6(values[0]) :
                    (checkIpV4(values[0]) || checkIpV6(values[0]));
            if (config.isCidr && isValid) {
                isValid = (values.length > 1) ?
                    config.version == IpVersion.V4 ?
                        RegexValidator.isValid(values[1], RegExRule.cidrV4) :
                        config.version == IpVersion.V6 ?
                            RegexValidator.isValid(values[1], RegExRule.cidrV6) :
                            (RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6)) :
                    false;
            }
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function cusipValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var controlValue = control.value.toUpperCase();
            var isValid = RegexValidator.isValid(controlValue, RegExRule.cusip);
            if (isValid) {
                var numericValues = controlValue.split("").map(function (value) {
                    var charCode = value.charCodeAt(0);
                    return charCode >= "A".charCodeAt(0) && charCode <= "Z".charCodeAt(0) ? charCode - "A".charCodeAt(0) + 10 : value;
                });
                var totalCount = 0;
                for (var i = 0; i < numericValues.length - 1; i++) {
                    var numericValue = parseInt(numericValues[i], 10);
                    if (i % 2 !== 0) {
                        numericValue *= 2;
                    }
                    if (numericValue > 9) {
                        numericValue -= 9;
                    }
                    totalCount += numericValue;
                }
                totalCount = (10 - (totalCount % 10)) % 10;
                isValid = totalCount == numericValues[numericValues.length - 1];
            }
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.cusip, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function gridValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var controlValue = control.value.toUpperCase();
            var isValid = RegexValidator.isValid(controlValue, RegExRule.grid);
            if (isValid) {
                controlValue = controlValue.replace(/\s/g, '').replace(/-/g, '');
                if ('GRID:' === controlValue.substr(0, 5)) {
                    controlValue = controlValue.substr(5);
                }
                var alphaNums = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                var alphaNumLength = alphaNums.length, length = controlValue.length, check = Math.floor(alphaNumLength / 2);
                for (var i = 0; i < length; i++) {
                    check = (((check || alphaNumLength) * 2) % (alphaNumLength + 1) + alphaNums.indexOf(controlValue.charAt(i))) % alphaNumLength;
                }
                isValid = (check === 1);
            }
            if (!isValid)
                return ObjectMaker.toJson(AnnotationTypes.grid, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function dateValidator(configModel) {
    return function (control) {
        return validateDate(control, configModel, AnnotationTypes.date);
    };
}

function runCondition$1(leftValue, rightValue, operator) {
    var result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
function isValid(control, config) {
    return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);
}
function getTime(value) {
    var splitTime = (value) ? value.split(':') : [];
    return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();
}
function timeChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (isValid(control, config)) {
                var crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
                var crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);
                var currentControlValue = getTime(control.value);
                var isValid_1 = operationType == AnnotationTypes.minTime ? runCondition$1(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition$1(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid_1)
                    return ObjectMaker.toJson(operationType, config, [control.value]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}

function minTimeValidator(configModel) {
    return function (control) {
        return timeChecker(control, configModel, AnnotationTypes.minTime);
    };
}

function maxTimeValidator(configModel) {
    return function (control) {
        return timeChecker(control, configModel, AnnotationTypes.maxTime);
    };
}

var APP_VALIDATORS = {
    "alphaNumeric": alphaNumericValidator,
    "alpha": alphaValidator,
    "compare": compareValidator,
    "email": emailValidator,
    "hexColor": hexColorValidator,
    "lowerCase": lowercaseValidator,
    "maxDate": maxDateValidator,
    "maxNumber": maxNumberValidator,
    "minDate": minDateValidator,
    "minNumber": minNumberValidator,
    "contains": containsValidator,
    "upperCase": uppercaseValidator,
    "maxLength": maxLengthValidator,
    "minLength": minLengthValidator,
    "password": passwordValidator,
    "range": rangeValidator,
    "required": requiredValidator,
    "creditCard": creditCardValidator,
    "digit": digitValidator,
    "pattern": patternValidator,
    "time": timeValidator,
    "url": urlValidator,
    "json": jsonValidator,
    "greaterThan": greaterThanValidator,
    "greaterThanEqualTo": greaterThanEqualToValidator,
    "lessThan": lessThanValidator,
    "lessThanEqualTo": lessThanEqualToValidator,
    "choice": choiceValidator,
    "different": differentValidator,
    "numeric": numericValidator,
    "even": evenValidator,
    "odd": oddValidator,
    "factor": factorValidator,
    "leapYear": leapYearValidator,
    "allOf": allOfValidator,
    "oneOf": oneOfValidator,
    "noneOf": noneOfValidator,
    "mac": macValidator,
    "ascii": asciiValidator,
    "dataUri": dataUriValidator,
    "port": portValidator,
    "latLong": latLongValidator,
    "extension": extensionValidator,
    "fileSize": fileSizeValidator,
    "endsWith": endsWithValidator,
    "startsWith": startsWithValidator,
    "primeNumber": primeNumberValidator,
    "latitude": latitudeValidator,
    "longitude": longitudeValidator,
    "compose": composeValidator,
    "rule": ruleValidator,
    "file": fileValidator,
    "unique": uniqueValidator,
    "image": imageValidator,
    "notEmpty": notEmptyValidator,
    "ip": ipValidator,
    "cusip": cusipValidator,
    "grid": gridValidator,
    "date": dateValidator,
    "minTime": minTimeValidator,
    "maxTime": maxTimeValidator
};

function andValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var validatorNames = Object.keys(config.validation);
            var failed = false;
            try {
                for (var validatorNames_1 = __values(validatorNames), validatorNames_1_1 = validatorNames_1.next(); !validatorNames_1_1.done; validatorNames_1_1 = validatorNames_1.next()) {
                    var validatorName = validatorNames_1_1.value;
                    failed = typeof config.validation[validatorName] == "boolean" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);
                    if (failed)
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (validatorNames_1_1 && !validatorNames_1_1.done && (_a = validatorNames_1.return)) _a.call(validatorNames_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (failed)
                return ObjectMaker.toJson(AnnotationTypes.and, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function orValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var validatorNames = Object.keys(config.validation);
            var failed = false;
            try {
                for (var validatorNames_1 = __values(validatorNames), validatorNames_1_1 = validatorNames_1.next(); !validatorNames_1_1.done; validatorNames_1_1 = validatorNames_1.next()) {
                    var validatorName = validatorNames_1_1.value;
                    failed = typeof config.validation[validatorName] == "boolean" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);
                    if (!failed)
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (validatorNames_1_1 && !validatorNames_1_1.done && (_a = validatorNames_1.return)) _a.call(validatorNames_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (failed)
                return ObjectMaker.toJson(AnnotationTypes.or, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

function notValidator(configModel) {
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            var validatorNames = Object.keys(config.validation);
            var failed = false;
            try {
                for (var validatorNames_1 = __values(validatorNames), validatorNames_1_1 = validatorNames_1.next(); !validatorNames_1_1.done; validatorNames_1_1 = validatorNames_1.next()) {
                    var validatorName = validatorNames_1_1.value;
                    failed = typeof config.validation[validatorName] == "boolean" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);
                    if (!failed)
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (validatorNames_1_1 && !validatorNames_1_1.done && (_a = validatorNames_1.return)) _a.call(validatorNames_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!failed)
                return ObjectMaker.toJson(AnnotationTypes.not, config, [control.value]);
        }
        return ObjectMaker.null();
    };
}

var RootKeyProvider = /** @class */ (function () {
    function RootKeyProvider() {
    }
    RootKeyProvider.rootId = 1;
    return RootKeyProvider;
}());

var LOGICAL_VALIDATORS = { and: andValidator, or: orValidator, not: notValidator };
var ASYNC = "async";
var ENTITY_OBJECT = "entityObject";
var RxFormBuilder = /** @class */ (function (_super) {
    __extends(RxFormBuilder, _super);
    function RxFormBuilder() {
        var _this = _super.call(this) || this;
        _this.conditionalObjectProps = [];
        _this.conditionalValidationInstance = {};
        _this.builderConfigurationConditionalObjectProps = [];
        _this.formGroupPropOtherValidator = {};
        _this.currentFormGroupPropOtherValidator = {};
        _this.isNested = false;
        _this.isGroupCalled = false;
        _this.isNestedBinding = false;
        return _this;
    }
    RxFormBuilder.prototype.getInstanceContainer = function (instanceFunc, entityObject) {
        return this.instaceProvider(instanceFunc, entityObject);
    };
    RxFormBuilder.prototype.setValue = function (formGroup, object) {
        for (var col in object) {
            var control = formGroup.get([col]);
            control.setValue(object[col]);
            control.updateValueAndValidity();
        }
    };
    RxFormBuilder.prototype.extractExpressions = function (fomrBuilderConfiguration) {
        if (fomrBuilderConfiguration && fomrBuilderConfiguration.dynamicValidation) {
            for (var property in fomrBuilderConfiguration.dynamicValidation) {
                for (var decorator in fomrBuilderConfiguration.dynamicValidation[property]) {
                    if (fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression) {
                        var columns = Linq.expressionColumns(fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression);
                        defaultContainer.addChangeValidation(this.conditionalValidationInstance, property, columns);
                    }
                }
            }
        }
        return null;
    };
    RxFormBuilder.prototype.addAsyncValidation = function (property, propertyValidators, propValidationConfig) {
        var e_1, _a;
        var asyncValidators = [];
        if (propertyValidators) {
            try {
                for (var propertyValidators_1 = __values(propertyValidators), propertyValidators_1_1 = propertyValidators_1.next(); !propertyValidators_1_1.done; propertyValidators_1_1 = propertyValidators_1.next()) {
                    var propertyValidator = propertyValidators_1_1.value;
                    if (propertyValidator.isAsync)
                        propertyValidator.config.forEach(function (t) { asyncValidators.push(t); });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (propertyValidators_1_1 && !propertyValidators_1_1.done && (_a = propertyValidators_1.return)) _a.call(propertyValidators_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (propValidationConfig && propValidationConfig[ASYNC]) {
            propValidationConfig[ASYNC].forEach(function (t) { asyncValidators.push(t); });
        }
        return asyncValidators;
    };
    RxFormBuilder.prototype.addFormControl = function (property, propertyValidators, propValidationConfig, instance, entity) {
        var e_2, _a;
        var validators = [];
        var columns = [];
        if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]) || (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])) {
            var props_1 = [];
            if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]))
                instance.conditionalValidationProps[property.name].forEach(function (t) { return props_1.push(t); });
            if (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])
                this.conditionalValidationInstance.conditionalValidationProps[property.name].forEach(function (t) { return props_1.push(t); });
            validators.push(conditionalChangeValidator(props_1));
        }
        if (this.conditionalObjectProps.length > 0 || this.builderConfigurationConditionalObjectProps.length > 0) {
            var propConditions_1 = [];
            if (this.conditionalObjectProps)
                propConditions_1 = this.conditionalObjectProps.filter(function (t) { return t.propName == property.name; });
            if (this.builderConfigurationConditionalObjectProps)
                this.builderConfigurationConditionalObjectProps.filter(function (t) { return t.propName == property.name; }).forEach(function (t) { return propConditions_1.push(t); });
            propConditions_1.forEach(function (t) {
                if (t.referencePropName && columns.indexOf(t.referencePropName) == -1)
                    columns.push(t.referencePropName);
            });
            if (columns.length > 0)
                validators.push(conditionalChangeValidator(columns));
        }
        try {
            for (var propertyValidators_2 = __values(propertyValidators), propertyValidators_2_1 = propertyValidators_2.next(); !propertyValidators_2_1.done; propertyValidators_2_1 = propertyValidators_2.next()) {
                var propertyValidator = propertyValidators_2_1.value;
                if (!propertyValidator.isAsync)
                    switch (propertyValidator.annotationType) {
                        case AnnotationTypes.rule:
                            validators.push(APP_VALIDATORS[propertyValidator.annotationType](propertyValidator.config, entity));
                            break;
                        case AnnotationTypes.and:
                        case AnnotationTypes.or:
                        case AnnotationTypes.not:
                            validators.push(LOGICAL_VALIDATORS[propertyValidator.annotationType](propertyValidator.config));
                            break;
                        default:
                            validators.push(APP_VALIDATORS[propertyValidator.annotationType](propertyValidator.config));
                            break;
                    }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (propertyValidators_2_1 && !propertyValidators_2_1.done && (_a = propertyValidators_2.return)) _a.call(propertyValidators_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (propValidationConfig)
            this.additionalValidation(validators, propValidationConfig);
        if (this.currentFormGroupPropOtherValidator[property.name])
            this.currentFormGroupPropOtherValidator[property.name].forEach(function (t) { validators.push(t); });
        return validators;
    };
    RxFormBuilder.prototype.additionalValidation = function (validations, propValidationConfig) {
        for (var col in AnnotationTypes) {
            if (propValidationConfig[AnnotationTypes[col]] && col != "custom") {
                validations.push(APP_VALIDATORS[AnnotationTypes[col]](propValidationConfig[AnnotationTypes[col]]));
            }
            else if (col == AnnotationTypes.custom && propValidationConfig[AnnotationTypes[col]])
                validations.push(propValidationConfig[col]);
        }
    };
    RxFormBuilder.prototype.getEntity = function (object, formBuilderConfiguration, propertyName, isSameObjectConstructor) {
        if (isSameObjectConstructor === void 0) { isSameObjectConstructor = false; }
        if (formBuilderConfiguration && formBuilderConfiguration.genericEntities && formBuilderConfiguration.genericEntities[propertyName])
            return formBuilderConfiguration.genericEntities[propertyName];
        return isSameObjectConstructor ? object.constructor : undefined;
    };
    RxFormBuilder.prototype.getObjectPropertyInstance = function (object, propertyInfo, formBuilderConfiguration) {
        if (propertyInfo.propertyType == OBJECT_PROPERTY && object[propertyInfo.name])
            return object[propertyInfo.name].constructor;
        else if (propertyInfo.propertyType == ARRAY_PROPERTY && object[propertyInfo.name] && object[propertyInfo.name].length > 0)
            return object[propertyInfo.name][0].constructor;
        return this.getEntity(object, formBuilderConfiguration, propertyInfo.name);
    };
    RxFormBuilder.prototype.checkObjectPropAdditionalValidation = function (instanceContainer, object, formBuilderConfiguration) {
        var _this = this;
        var props = instanceContainer.properties.filter(function (t) { return t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY; });
        props.forEach(function (t) {
            var entity = t.entity;
            if (!t.entity)
                entity = _this.getObjectPropertyInstance(object, t, formBuilderConfiguration);
            if (entity) {
                var instance = _this.getInstanceContainer(entity, null);
                if (instance.conditionalValidationProps) {
                    for (var key in instance.conditionalValidationProps) {
                        var prop = instanceContainer.properties.filter(function (t) { return t.name == key; })[0];
                        if (prop) {
                            if (!instanceContainer.conditionalValidationProps)
                                instanceContainer.conditionalValidationProps = {};
                            if (!instanceContainer.conditionalValidationProps[key])
                                instanceContainer.conditionalValidationProps[key] = [];
                            instance.conditionalValidationProps[key].forEach(function (x) {
                                if (t.propertyType != ARRAY_PROPERTY)
                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('.'));
                                else
                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('[]'));
                            });
                        }
                    }
                }
            }
        });
    };
    RxFormBuilder.prototype.getObject = function (model, entityObject, formBuilderConfiguration) {
        var json = {};
        if (typeof model == FUNCTION_STRING)
            json.model = model;
        if (typeof model == FUNCTION_STRING && (entityObject instanceof FormBuilderConfiguration)) {
            json.entityObject = this.createClassObject(json.model, entityObject);
        }
        if (entityObject && !(entityObject instanceof FormBuilderConfiguration))
            json.entityObject = entityObject;
        if (entityObject instanceof FormBuilderConfiguration && !formBuilderConfiguration)
            json.formBuilderConfiguration = entityObject;
        else if (!(entityObject instanceof FormBuilderConfiguration) && formBuilderConfiguration) {
            json.formBuilderConfiguration = formBuilderConfiguration;
            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, json.entityObject);
        }
        if (!entityObject) {
            if (typeof model == OBJECT_STRING)
                json.model = model.constructor;
            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, model);
        }
        else if (model && (entityObject instanceof FormBuilderConfiguration) && (typeof model == OBJECT_STRING)) {
            json[MODEL] = model.constructor;
            json[ENTITY_OBJECT] = this.createClassObject(json.model, json.formBuilderConfiguration, model);
        }
        return json;
    };
    RxFormBuilder.prototype.group = function (groupObject, validatorConfig) {
        var modelInstance = _super.prototype.createInstance.call(this);
        var entityObject = {};
        this.formGroupPropOtherValidator = {};
        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;
        this.createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig);
        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;
        this.isGroupCalled = true;
        var formGroup = this.formGroup(modelInstance.constructor, entityObject, validatorConfig);
        this.isGroupCalled = false;
        this.formGroupPropOtherValidator = {};
        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;
        this.formGroupPropOtherValidator = {};
        return formGroup;
    };
    RxFormBuilder.prototype.applyAllPropValidator = function (propName, validatorConfig, modelInstance) {
        var _this = this;
        if (validatorConfig && validatorConfig.applyAllProps) {
            if (!(validatorConfig.excludeProps && validatorConfig.excludeProps.length > 0 && validatorConfig.excludeProps.indexOf(propName) == -1)) {
                validatorConfig.applyAllProps.forEach(function (t) {
                    if (t.name == RX_WEB_VALIDATOR) {
                        t(propName, modelInstance);
                    }
                    else {
                        if (!_this.currentFormGroupPropOtherValidator[propName])
                            _this.currentFormGroupPropOtherValidator[propName] = [];
                        _this.currentFormGroupPropOtherValidator[propName].push(t);
                    }
                });
            }
        }
    };
    RxFormBuilder.prototype.dynamicValidationPropCheck = function (propName, validatorConfig) {
        return (validatorConfig == undefined) ? true : (!validatorConfig.dynamicValidationConfigurationPropertyName) ? true : validatorConfig.dynamicValidationConfigurationPropertyName == propName ? false : true;
    };
    RxFormBuilder.prototype.createValidatorFormGroup = function (groupObject, entityObject, modelInstance, validatorConfig) {
        var e_3, _a;
        for (var propName in groupObject) {
            var prop = groupObject[propName];
            if (prop instanceof Array && prop.length > 0 && typeof prop[0] != OBJECT_STRING) {
                var propValidators = (prop.length > 1 && prop[1] instanceof Array) ? prop[1] : (prop.length == 2) ? [prop[1]] : [];
                var propertyAdded = false;
                for (var i = 0; i < propValidators.length; i++) {
                    if (propValidators[i].name == RX_WEB_VALIDATOR) {
                        propValidators[i](propName, modelInstance);
                        propertyAdded = true;
                    }
                    else {
                        if (!this.currentFormGroupPropOtherValidator[propName])
                            this.currentFormGroupPropOtherValidator[propName] = [];
                        this.currentFormGroupPropOtherValidator[propName].push(propValidators[i]);
                    }
                }
                if (!propertyAdded)
                    defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });
                this.applyAllPropValidator(propName, validatorConfig, modelInstance);
            }
            else if (typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN || prop instanceof Date) {
                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });
                this.applyAllPropValidator(propName, validatorConfig, modelInstance);
            }
            else if (prop instanceof Array) {
                if (prop instanceof RxFormArray) {
                    entityObject[propName] = prop;
                }
                else {
                    var propModelInstance = _super.prototype.createInstance.call(this);
                    if (typeof modelInstance == "function")
                        modelInstance.constructor = modelInstance;
                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, propModelInstance.constructor, modelInstance);
                    entityObject[propName] = [];
                    try {
                        for (var prop_1 = (e_3 = void 0, __values(prop)), prop_1_1 = prop_1.next(); !prop_1_1.done; prop_1_1 = prop_1.next()) {
                            var row = prop_1_1.value;
                            var jObject = {};
                            entityObject[propName].push(jObject);
                            this.createValidatorFormGroup(row, jObject, propModelInstance.constructor, validatorConfig);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (prop_1_1 && !prop_1_1.done && (_a = prop_1.return)) _a.call(prop_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            else if (typeof prop == OBJECT_STRING && !(prop instanceof RxFormControl)) {
                var formGroup = (prop instanceof RxFormArray) ? prop.controls[0] : prop;
                if (!formGroup.model && (prop instanceof RxFormGroup)) {
                    formGroup = this.group(formGroup.controls);
                }
                if (prop instanceof RxFormGroup) {
                    entityObject[propName] = prop;
                    defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, formGroup.model, modelInstance);
                }
                else if (prop instanceof RxFormArray) {
                    entityObject[propName] = prop;
                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, formGroup.model, modelInstance);
                }
                else {
                    if (this.dynamicValidationPropCheck(propName, validatorConfig)) {
                        this.formGroupPropOtherValidator[propName] = {};
                        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[propName];
                        var propModelInstance = _super.prototype.createInstance.call(this);
                        entityObject[propName] = {};
                        entityObject[propName].constructor = propModelInstance.constructor;
                        defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, entityObject[propName].constructor, modelInstance);
                        var objectValidationConfig = this.getValidatorConfig(validatorConfig, groupObject, propName + ".");
                        this.createValidatorFormGroup(groupObject[propName], entityObject[propName], entityObject[propName].constructor, objectValidationConfig);
                    }
                    else
                        entityObject[propName] = groupObject[propName];
                }
            }
            if (typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN || prop instanceof Date) {
                entityObject[propName] = prop;
            }
            else if ((prop && prop.length > 0 && (typeof prop[0] != OBJECT_STRING) && !(prop instanceof RxFormControl || prop instanceof RxFormControl) && !(prop instanceof RxFormArray))) {
                entityObject[propName] = prop[0];
            }
            else if (prop instanceof RxFormArray) {
                entityObject[propName] = prop;
            }
            else if (prop instanceof RxFormControl || prop instanceof RxFormControl) {
                entityObject[propName] = prop;
                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, modelInstance.constructor ? modelInstance : { constructor: modelInstance });
            }
        }
    };
    RxFormBuilder.prototype.getValidatorConfig = function (validatorConfig, entityObject, rootPropertyName, arrayPropertyName) {
        var validationProps = {};
        var excludeProps = [];
        var includeProps = [];
        var ignoreUndefinedProps = [];
        if (validatorConfig) {
            for (var propName in validatorConfig.dynamicValidation) {
                if (propName.indexOf(rootPropertyName) != -1 || (arrayPropertyName && propName.indexOf(arrayPropertyName) != -1)) {
                    var splitProp = propName.split(".")[1];
                    if (splitProp)
                        validationProps[splitProp] = validatorConfig.dynamicValidation[propName];
                }
            }
            if (validatorConfig.excludeProps)
                excludeProps = this.getProps(validatorConfig.excludeProps, rootPropertyName);
            if (validatorConfig.includeProps)
                includeProps = this.getProps(validatorConfig.includeProps, rootPropertyName);
            if (validatorConfig.ignoreUndefinedProps)
                ignoreUndefinedProps = this.getProps(validatorConfig.ignoreUndefinedProps, rootPropertyName, true);
            return { ignoreUndefinedProps: ignoreUndefinedProps, includeProps: includeProps, dynamicValidation: (validatorConfig.dynamicValidationConfigurationPropertyName && entityObject[validatorConfig.dynamicValidationConfigurationPropertyName]) ? entityObject[validatorConfig.dynamicValidationConfigurationPropertyName] : validationProps, excludeProps: excludeProps };
        }
        return {};
    };
    RxFormBuilder.prototype.getProps = function (properties, rootPropertyName, isIgnoreProp) {
        var e_4, _a;
        if (isIgnoreProp === void 0) { isIgnoreProp = false; }
        var props = [];
        try {
            for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                var prop = properties_1_1.value;
                if (prop.indexOf(rootPropertyName) != -1) {
                    var splitProps = prop.split(".");
                    if (splitProps.length == 2) {
                        props.push(splitProps[1]);
                    }
                    else if (splitProps.length > 2) {
                        splitProps.splice(0, 1);
                        props.push(splitProps.join("."));
                    }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (isIgnoreProp && properties.filter(function (x) { return x == rootPropertyName.replace('.', ''); }).length == 1)
            props.push(':self:');
        return props;
    };
    RxFormBuilder.prototype.formGroup = function (model, entityObject, formBuilderConfiguration) {
        var _this = this;
        var json = this.getObject(model, entityObject, formBuilderConfiguration);
        model = json.model;
        entityObject = json.entityObject;
        if (entityObject.constructor != model && !this.isGroupCalled) {
            entityObject = json.entityObject = this.updateObject(model, json.entityObject, formBuilderConfiguration);
        }
        formBuilderConfiguration = json.formBuilderConfiguration;
        if (formBuilderConfiguration)
            this.extractExpressions(formBuilderConfiguration);
        var instanceContainer = this.getInstanceContainer(model, entityObject);
        this.checkObjectPropAdditionalValidation(instanceContainer, entityObject, formBuilderConfiguration);
        var formGroupObject = {};
        var additionalValidations = {};
        instanceContainer.properties.forEach(function (property) {
            var e_5, _a;
            var isIncludeProp = true;
            if (formBuilderConfiguration) {
                if (formBuilderConfiguration.excludeProps && formBuilderConfiguration.excludeProps.length > 0)
                    isIncludeProp = formBuilderConfiguration.excludeProps.indexOf(property.name) == -1;
                if (formBuilderConfiguration.dynamicValidation)
                    additionalValidations = formBuilderConfiguration.dynamicValidation;
                if (formBuilderConfiguration.includeProps && formBuilderConfiguration.includeProps.length > 0)
                    isIncludeProp = formBuilderConfiguration.includeProps.indexOf(property.name) != -1;
                if (formBuilderConfiguration.ignoreUndefinedProps && formBuilderConfiguration.ignoreUndefinedProps.length > 0) {
                    isIncludeProp = !(property.propertyType == PROPERTY && !RegexValidator.isNotBlank(json.entityObject[property.name]) && (formBuilderConfiguration.ignoreUndefinedProps.indexOf(property.name) !== -1 || formBuilderConfiguration.ignoreUndefinedProps.indexOf(":self:") !== -1));
                }
            }
            if (property.ignore)
                isIncludeProp = !property.ignore.call(json.entityObject, json.entityObject);
            if (isIncludeProp) {
                switch (property.propertyType) {
                    case PROPERTY:
                        if (!(entityObject[property.name] instanceof RxFormControl)) {
                            var propertyValidators = instanceContainer.propertyAnnotations.filter(function (t) { return t.propertyName == property.name; });
                            formGroupObject[property.name] = new RxFormControl(_super.prototype.sanitizeValue.call(_this, instanceContainer, property.name, _super.prototype.getDefaultValue.call(_this, property, entityObject[property.name], formBuilderConfiguration), json.entityObject, Object.assign({}, json.entityObject)), _this.addFormControl(property, propertyValidators, additionalValidations[property.name], instanceContainer, entityObject), _this.addAsyncValidation(property, propertyValidators, additionalValidations[property.name]), json.entityObject, Object.assign({}, json.entityObject), property.name, instanceContainer.sanitizers[property.name]);
                            _this.isNested = false;
                        }
                        else
                            formGroupObject[property.name] = _super.prototype.getDefaultValue.call(_this, property, entityObject[property.name], formBuilderConfiguration);
                        break;
                    case OBJECT_PROPERTY:
                        var objectValue = entityObject[property.name];
                        if (objectValue && objectValue instanceof Object && !(objectValue instanceof RxFormGroup)) {
                            _this.isNestedBinding = _this.isNested = true;
                            if (instanceContainer && instanceContainer.conditionalObjectProps)
                                _this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(function (t) { return t.objectPropName == property.name; });
                            if (_this.conditionalValidationInstance && _this.conditionalValidationInstance.conditionalObjectProps)
                                _this.builderConfigurationConditionalObjectProps = _this.conditionalValidationInstance.conditionalObjectProps.filter(function (t) { return t.objectPropName == property.name; });
                            if (_this.formGroupPropOtherValidator[property.name])
                                _this.currentFormGroupPropOtherValidator = _this.formGroupPropOtherValidator[property.name];
                            var objectValidationConfig = _this.getValidatorConfig(formBuilderConfiguration, objectValue, property.name + ".");
                            var entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;
                            formGroupObject[property.name] = _this.formGroup(entity || property.entity || _this.getEntity(objectValue, formBuilderConfiguration, property.name, true), objectValue, objectValidationConfig);
                            _this.conditionalObjectProps = [];
                            _this.builderConfigurationConditionalObjectProps = [];
                            _this.isNestedBinding = _this.isNested = false;
                        }
                        else if (objectValue instanceof RxFormGroup)
                            formGroupObject[property.name] = objectValue;
                        break;
                    case ARRAY_PROPERTY:
                        var arrayObjectValue = entityObject[property.name];
                        if (arrayObjectValue && arrayObjectValue instanceof Array && !(arrayObjectValue instanceof RxFormArray)) {
                            _this.isNestedBinding = _this.isNested = true;
                            var formArrayGroup = [];
                            var index_1 = 0;
                            var entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;
                            try {
                                for (var arrayObjectValue_1 = __values(arrayObjectValue), arrayObjectValue_1_1 = arrayObjectValue_1.next(); !arrayObjectValue_1_1.done; arrayObjectValue_1_1 = arrayObjectValue_1.next()) {
                                    var subObject = arrayObjectValue_1_1.value;
                                    if (instanceContainer && instanceContainer.conditionalObjectProps)
                                        _this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(function (t) { return t.objectPropName == property.name && t.arrayIndex == index_1; });
                                    if (_this.conditionalValidationInstance && _this.conditionalValidationInstance.conditionalObjectProps)
                                        _this.builderConfigurationConditionalObjectProps = _this.conditionalValidationInstance.conditionalObjectProps.filter(function (t) { return t.objectPropName == property.name && t.arrayIndex == index_1; });
                                    if (_this.formGroupPropOtherValidator[property.name])
                                        _this.currentFormGroupPropOtherValidator = _this.formGroupPropOtherValidator[property.name];
                                    var objectValidationConfig = _this.getValidatorConfig(formBuilderConfiguration, subObject, property.name + ".", property.name + "[" + index_1 + "].");
                                    formArrayGroup.push(_this.formGroup(entity || property.entity || _this.getEntity(subObject, formBuilderConfiguration, property.name, true), subObject, objectValidationConfig));
                                    index_1++;
                                    _this.conditionalObjectProps = [];
                                    _this.builderConfigurationConditionalObjectProps = [];
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (arrayObjectValue_1_1 && !arrayObjectValue_1_1.done && (_a = arrayObjectValue_1.return)) _a.call(arrayObjectValue_1);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                            formGroupObject[property.name] = new RxFormArray(arrayObjectValue, formArrayGroup, null, null, property.arrayConfig);
                            _this.isNestedBinding = _this.isNested = false;
                        }
                        else if (arrayObjectValue instanceof RxFormArray)
                            formGroupObject[property.name] = arrayObjectValue;
                        break;
                }
            }
        });
        if (!this.isNested) {
            this.conditionalValidationInstance = {};
            this.builderConfigurationConditionalObjectProps = [];
        }
        var formGroup = new RxFormGroup(json.model, json.entityObject, formGroupObject, formBuilderConfiguration);
        if (ReactiveFormConfig.clientLib == ClientLibrary.React) {
            formGroup.path = String(RootKeyProvider.rootId++);
            formGroupContainer.saveFormGroup(formGroup);
        }
        if (!this.isNestedBinding && !this.isGroupCalled) {
            formGroup.refreshDisable();
        }
        return formGroup;
    };
    return RxFormBuilder;
}(BaseFormBuilder));

function baseDecoratorFunction(annotationType, config, isAsync) {
    if (isAsync === void 0) { isAsync = false; }
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.init(target, parameterIndex, propertyKey, annotationType, config, isAsync);
    };
}

function alpha(config) {
    return baseDecoratorFunction(AnnotationTypes.alpha, config);
}

function alphaNumeric(config) {
    return baseDecoratorFunction(AnnotationTypes.alphaNumeric, config);
}

function compare(config) {
    return baseDecoratorFunction(AnnotationTypes.compare, config);
}

function contains(config) {
    return baseDecoratorFunction(AnnotationTypes.contains, config);
}

function creditCard(config) {
    return baseDecoratorFunction(AnnotationTypes.creditCard, config);
}

function digit(config) {
    return baseDecoratorFunction(AnnotationTypes.digit, config);
}

function email(config) {
    return baseDecoratorFunction(AnnotationTypes.email, config);
}

function hexColor(config) {
    return baseDecoratorFunction(AnnotationTypes.hexColor, config);
}

function lowerCase(config) {
    return baseDecoratorFunction(AnnotationTypes.lowerCase, config);
}

function maxDate(config) {
    return baseDecoratorFunction(AnnotationTypes.maxDate, config);
}

function maxLength(config) {
    return baseDecoratorFunction(AnnotationTypes.maxLength, config);
}

function minDate(config) {
    return baseDecoratorFunction(AnnotationTypes.minDate, config);
}

function maxNumber(config) {
    return baseDecoratorFunction(AnnotationTypes.maxNumber, config);
}

function minLength(config) {
    return baseDecoratorFunction(AnnotationTypes.minLength, config);
}

function minNumber(config) {
    return baseDecoratorFunction(AnnotationTypes.minNumber, config);
}

function password(config) {
    return baseDecoratorFunction(AnnotationTypes.password, config);
}

function pattern(config) {
    return baseDecoratorFunction(AnnotationTypes.pattern, config);
}

function propArray(entity, config) {
    return function (target, propertyKey, parameterIndex) {
        var propertyInfo = {
            name: propertyKey,
            propertyType: ARRAY_PROPERTY,
            entity: entity,
            dataPropertyName: config ? config.name : undefined,
            entityProvider: config ? config.entityProvider : undefined,
            arrayConfig: config ? {
                allowMaxIndex: config.allowMaxIndex, messageKey: config.messageKey
            } : undefined
        };
        defaultContainer.addProperty(target.constructor, propertyInfo);
    };
}

function propObject(entity, config) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.initPropertyObject(propertyKey, OBJECT_PROPERTY, entity, target, config);
    };
}

function prop(config) {
    return function (target, propertyKey, parameterIndex) {
        var propertyInfo = {
            name: propertyKey,
            propertyType: PROPERTY,
            dataPropertyName: config ? config.name : undefined,
            defaultValue: config ? config.defaultValue : undefined,
            ignore: config ? config.ignore : undefined,
            isPrimaryKey: config ? config.isPrimaryKey : undefined
        };
        defaultContainer.addProperty(target.constructor, propertyInfo);
    };
}

function range(config) {
    return baseDecoratorFunction(AnnotationTypes.range, config);
}

function required(config) {
    return baseDecoratorFunction(AnnotationTypes.required, config);
}

function upperCase(config) {
    return baseDecoratorFunction(AnnotationTypes.upperCase, config);
}

function time(config) {
    return baseDecoratorFunction(AnnotationTypes.time, config);
}

function url(config) {
    return baseDecoratorFunction(AnnotationTypes.url, config);
}

function json(config) {
    return baseDecoratorFunction(AnnotationTypes.json, config);
}

function greaterThan(config) {
    return baseDecoratorFunction(AnnotationTypes.greaterThan, config);
}

function greaterThanEqualTo(config) {
    return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, config);
}

function lessThanEqualTo(config) {
    return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, config);
}

function lessThan(config) {
    return baseDecoratorFunction(AnnotationTypes.lessThan, config);
}

function choice(config) {
    return baseDecoratorFunction(AnnotationTypes.choice, config);
}

function different(config) {
    return baseDecoratorFunction(AnnotationTypes.different, config);
}

function numeric(config) {
    return baseDecoratorFunction(AnnotationTypes.numeric, config);
}

function even(config) {
    return baseDecoratorFunction(AnnotationTypes.even, config);
}

function odd(config) {
    return baseDecoratorFunction(AnnotationTypes.odd, config);
}

function factor(config) {
    return baseDecoratorFunction(AnnotationTypes.factor, config);
}

function leapYear(config) {
    return baseDecoratorFunction(AnnotationTypes.leapYear, config);
}

function allOf(config) {
    return baseDecoratorFunction(AnnotationTypes.allOf, config);
}

function oneOf(config) {
    return baseDecoratorFunction(AnnotationTypes.oneOf, config);
}

function noneOf(config) {
    return baseDecoratorFunction(AnnotationTypes.noneOf, config);
}

function mac(config) {
    return baseDecoratorFunction(AnnotationTypes.mac, config);
}

function ascii(config) {
    return baseDecoratorFunction(AnnotationTypes.ascii, config);
}

function dataUri(config) {
    return baseDecoratorFunction(AnnotationTypes.dataUri, config);
}

function port(config) {
    return baseDecoratorFunction(AnnotationTypes.port, config);
}

function latLong(config) {
    return baseDecoratorFunction(AnnotationTypes.latLong, config);
}

function extension(config) {
    return baseDecoratorFunction(AnnotationTypes.extension, config);
}

function fileSize(config) {
    return baseDecoratorFunction(AnnotationTypes.fileSize, config);
}

function endsWith(config) {
    return baseDecoratorFunction(AnnotationTypes.endsWith, config);
}

function startsWith(config) {
    return baseDecoratorFunction(AnnotationTypes.startsWith, config);
}

function primeNumber(config) {
    return baseDecoratorFunction(AnnotationTypes.primeNumber, config);
}

function latitude(config) {
    return baseDecoratorFunction(AnnotationTypes.latitude, config);
}

function longitude(config) {
    return baseDecoratorFunction(AnnotationTypes.longitude, config);
}

function rule(config) {
    return baseDecoratorFunction(AnnotationTypes.rule, config);
}

function file(config) {
    return baseDecoratorFunction(AnnotationTypes.file, config);
}

function custom(config) {
    return baseDecoratorFunction(AnnotationTypes.custom, config);
}

function unique(config) {
    return baseDecoratorFunction(AnnotationTypes.unique, config);
}

function image(config) {
    return baseDecoratorFunction(AnnotationTypes.image, config);
}

function notEmpty(config) {
    return baseDecoratorFunction(AnnotationTypes.notEmpty, config);
}

function async(validators) {
    return baseDecoratorFunction(AnnotationTypes.async, validators, true);
}

function cusip(config) {
    return baseDecoratorFunction(AnnotationTypes.cusip, config);
}

function grid(config) {
    return baseDecoratorFunction(AnnotationTypes.grid, config);
}

function date(config) {
    return baseDecoratorFunction(AnnotationTypes.date, config);
}

function disable(config) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.disabled);
    };
}

function error(config) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.error);
    };
}

function and(config) {
    return baseDecoratorFunction(AnnotationTypes.and, config);
}

function or(config) {
    return baseDecoratorFunction(AnnotationTypes.or, config);
}

function not(config) {
    return baseDecoratorFunction(AnnotationTypes.not, config);
}

function trim$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.trim);
    };
}

function ltrim$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.ltrim);
    };
}

function rtrim$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.rtrim);
    };
}

function blacklist$1(chars) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.blacklist, chars);
    };
}

function stripLow$1(keepNewLines) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.stripLow, keepNewLines);
    };
}

function toBoolean$1(strict) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toBoolean, strict);
    };
}

function toDouble$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDouble);
    };
}

function toFloat$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toFloat);
    };
}

function toInt$1(radix) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toInt, radix);
    };
}

function toString$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.string);
    };
}

function whitelist$1(chars) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.whitelist, chars);
    };
}

function toDate$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDate);
    };
}

function escape$1() {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.escape);
    };
}

function prefix$1(text) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.prefix, text);
    };
}

function suffix$1(text) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.suffix, text);
    };
}

function model(config) {
    return function (target) {
        defaultContainer.addPropsConfig(target, config);
    };
}

function sanitize$1(config) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.sanitize, config);
    };
}

function elementClass(config) {
    return function (target, propertyKey, parameterIndex) {
        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.elementClass);
    };
}

function minTime(config) {
    return baseDecoratorFunction(AnnotationTypes.minTime, config);
}

function maxTime(config) {
    return baseDecoratorFunction(AnnotationTypes.maxTime, config);
}

function compose(config) {
    return baseDecoratorFunction(AnnotationTypes.compose, config);
}

var IAbstractControl = /** @class */ (function (_super) {
    __extends(IAbstractControl, _super);
    function IAbstractControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IAbstractControl;
}(AbstractControl));

var FORM_GROUP_PATH = "form-group-path";
function overrideAttribute() {
    var setAttribute = HTMLElement.prototype.setAttribute;
    HTMLElement.prototype.setAttribute = function (qualifiedName, value) {
        if (qualifiedName == FORM_GROUP_PATH) {
            formGroupContainer.mapElement(value, this);
        }
        setAttribute.call(this, qualifiedName, value);
    };
}
function bootstrapForms() {
    overrideAttribute();
}

export { ClientLibrary, ErrorMessageBindingStrategy, FormBuilderConfiguration, IAbstractControl, IpVersion, NumericValueType, ReactiveFormConfig, ResetFormType, RxFormArray, RxFormBuilder, RxFormControl, RxFormGroup, allOf, alpha, alphaNumeric, and, ascii, async, blacklist$1 as blacklist, bootstrapForms, choice, compare, compose, contains, creditCard, cusip, custom, dataUri, date, different, digit, disable, elementClass, email, endsWith, error, escape$1 as escape, even, extension, factor, file, fileSize, greaterThan, greaterThanEqualTo, grid, hexColor, image, json, latLong, latitude, leapYear, lessThan, lessThanEqualTo, longitude, lowerCase, ltrim$1 as ltrim, mac, maxDate, maxLength, maxNumber, maxTime, minDate, minLength, minNumber, minTime, model, noneOf, not, notEmpty, numeric, odd, oneOf, or, password, pattern, port, prefix$1 as prefix, primeNumber, prop, propArray, propObject, range, required, rtrim$1 as rtrim, rule, sanitize$1 as sanitize, startsWith, stripLow$1 as stripLow, suffix$1 as suffix, time, toBoolean$1 as toBoolean, toDate$1 as toDate, toDouble$1 as toDouble, toFloat$1 as toFloat, toInt$1 as toInt, toString$1 as toString, trim$1 as trim, unique, upperCase, url, whitelist$1 as whitelist, BaseFormBuilder as Éµa, AbstractControl as Éµb, FormBuilderConfiguration as Éµd, AbstractFormArray as Éµe };
//# sourceMappingURL=rxweb-reactive-forms.js.map
